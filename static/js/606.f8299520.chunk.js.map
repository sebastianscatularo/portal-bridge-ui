{"version":3,"file":"static/js/606.f8299520.chunk.js","mappings":"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","sources":["../../src/classes.ts","../../src/error-constants.ts","../../src/errors.ts","../../src/index.ts","../../src/utils.ts","../node_modules/@toruslabs/base-controllers/node_modules/ethereumjs-util/src/account.ts","../node_modules/@toruslabs/base-controllers/node_modules/ethereumjs-util/src/address.ts","../node_modules/@toruslabs/base-controllers/node_modules/ethereumjs-util/src/bytes.ts","../node_modules/@toruslabs/base-controllers/node_modules/ethereumjs-util/src/constants.ts","../node_modules/@toruslabs/base-controllers/node_modules/ethereumjs-util/src/externals.ts","../node_modules/@toruslabs/base-controllers/node_modules/ethereumjs-util/src/hash.ts","../node_modules/@toruslabs/base-controllers/node_modules/ethereumjs-util/src/helpers.ts","../node_modules/@toruslabs/base-controllers/node_modules/ethereumjs-util/src/index.ts","../node_modules/@toruslabs/base-controllers/node_modules/ethereumjs-util/src/internal.ts","../node_modules/@toruslabs/base-controllers/node_modules/ethereumjs-util/src/object.ts","../node_modules/@toruslabs/base-controllers/node_modules/ethereumjs-util/src/signature.ts","../node_modules/@toruslabs/base-controllers/node_modules/ethereumjs-util/src/types.ts","../node_modules/@toruslabs/openlogin-utils/src/url.ts","../node_modules/@toruslabs/openlogin-jrpc/src/basePostMessageStream.ts","../node_modules/@toruslabs/openlogin-jrpc/src/safeEventEmitter.ts","../node_modules/@toruslabs/openlogin-jrpc/src/serializableError.ts","../node_modules/@toruslabs/openlogin-jrpc/src/jrpc.ts","../node_modules/@toruslabs/openlogin-utils/src/randomId.ts","../node_modules/@toruslabs/openlogin-jrpc/src/jrpcEngine.ts","../node_modules/@toruslabs/openlogin-jrpc/src/substream.ts","../node_modules/@toruslabs/openlogin-jrpc/src/mux.ts","../node_modules/@toruslabs/base-controllers/src/Network/INetworkController.ts","../node_modules/@toruslabs/base-controllers/src/enums.ts","../node_modules/@toruslabs/base-controllers/src/utils/utils.ts","../node_modules/@toruslabs/base-controllers/src/Transaction/ITransactionController.ts","../node_modules/@toruslabs/solana-embed/src/messages.ts","../node_modules/@toruslabs/solana-embed/src/interfaces.ts","../node_modules/@toruslabs/solana-embed/src/config.ts","../node_modules/@toruslabs/solana-embed/src/loglevel.ts","../node_modules/@toruslabs/solana-embed/src/utils.ts","../node_modules/@toruslabs/solana-embed/src/baseProvider.ts","../node_modules/@toruslabs/base-controllers/src/Network/createLoggerMiddleware.ts","../node_modules/@toruslabs/solana-embed/src/embedUtils.ts","../node_modules/@toruslabs/solana-embed/src/PopupHandler.ts","../node_modules/@toruslabs/solana-embed/src/communicationProvider.ts","../node_modules/@toruslabs/solana-embed/src/inPageProvider.ts","../node_modules/@toruslabs/solana-embed/src/siteMetadata.ts","../node_modules/@toruslabs/solana-embed/src/embed.ts","../node_modules/json-rpc-random-id/index.js"],"sourcesContent":[null,null,null,null,null,"import assert from 'assert'\nimport { BN, rlp } from './externals'\nimport {\n  privateKeyVerify,\n  publicKeyCreate,\n  publicKeyVerify,\n  publicKeyConvert,\n} from 'ethereum-cryptography/secp256k1'\nimport { stripHexPrefix } from './internal'\nimport { KECCAK256_RLP, KECCAK256_NULL } from './constants'\nimport { zeros, bufferToHex, toBuffer } from './bytes'\nimport { keccak, keccak256, keccakFromString, rlphash } from './hash'\nimport { assertIsString, assertIsHexString, assertIsBuffer } from './helpers'\nimport { BNLike, BufferLike, bnToUnpaddedBuffer, toType, TypeOutput } from './types'\n\nexport interface AccountData {\n  nonce?: BNLike\n  balance?: BNLike\n  stateRoot?: BufferLike\n  codeHash?: BufferLike\n}\n\nexport class Account {\n  nonce: BN\n  balance: BN\n  stateRoot: Buffer\n  codeHash: Buffer\n\n  static fromAccountData(accountData: AccountData) {\n    const { nonce, balance, stateRoot, codeHash } = accountData\n\n    return new Account(\n      nonce ? new BN(toBuffer(nonce)) : undefined,\n      balance ? new BN(toBuffer(balance)) : undefined,\n      stateRoot ? toBuffer(stateRoot) : undefined,\n      codeHash ? toBuffer(codeHash) : undefined\n    )\n  }\n\n  public static fromRlpSerializedAccount(serialized: Buffer) {\n    const values = rlp.decode(serialized)\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized account input. Must be array')\n    }\n\n    return this.fromValuesArray(values)\n  }\n\n  public static fromValuesArray(values: Buffer[]) {\n    const [nonce, balance, stateRoot, codeHash] = values\n\n    return new Account(new BN(nonce), new BN(balance), stateRoot, codeHash)\n  }\n\n  /**\n   * This constructor assigns and validates the values.\n   * Use the static factory methods to assist in creating an Account from varying data types.\n   */\n  constructor(\n    nonce = new BN(0),\n    balance = new BN(0),\n    stateRoot = KECCAK256_RLP,\n    codeHash = KECCAK256_NULL\n  ) {\n    this.nonce = nonce\n    this.balance = balance\n    this.stateRoot = stateRoot\n    this.codeHash = codeHash\n\n    this._validate()\n  }\n\n  private _validate() {\n    if (this.nonce.lt(new BN(0))) {\n      throw new Error('nonce must be greater than zero')\n    }\n    if (this.balance.lt(new BN(0))) {\n      throw new Error('balance must be greater than zero')\n    }\n    if (this.stateRoot.length !== 32) {\n      throw new Error('stateRoot must have a length of 32')\n    }\n    if (this.codeHash.length !== 32) {\n      throw new Error('codeHash must have a length of 32')\n    }\n  }\n\n  /**\n   * Returns a Buffer Array of the raw Buffers for the account, in order.\n   */\n  raw(): Buffer[] {\n    return [\n      bnToUnpaddedBuffer(this.nonce),\n      bnToUnpaddedBuffer(this.balance),\n      this.stateRoot,\n      this.codeHash,\n    ]\n  }\n\n  /**\n   * Returns the RLP serialization of the account as a `Buffer`.\n   */\n  serialize(): Buffer {\n    return rlp.encode(this.raw())\n  }\n\n  /**\n   * Returns a `Boolean` determining if the account is a contract.\n   */\n  isContract(): boolean {\n    return !this.codeHash.equals(KECCAK256_NULL)\n  }\n\n  /**\n   * Returns a `Boolean` determining if the account is empty complying to the definition of\n   * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):\n   * \"An account is considered empty when it has no code and zero nonce and zero balance.\"\n   */\n  isEmpty(): boolean {\n    return this.balance.isZero() && this.nonce.isZero() && this.codeHash.equals(KECCAK256_NULL)\n  }\n}\n\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */\nexport const isValidAddress = function (hexAddress: string): boolean {\n  try {\n    assertIsString(hexAddress)\n  } catch (e: any) {\n    return false\n  }\n\n  return /^0x[0-9a-fA-F]{40}$/.test(hexAddress)\n}\n\n/**\n * Returns a checksummed address.\n *\n * If an eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).\n *\n * WARNING: Checksums with and without the chainId will differ and the EIP-1191 checksum is not\n * backwards compatible to the original widely adopted checksum format standard introduced in\n * [EIP-55](https://eips.ethereum.org/EIPS/eip-55), so this will break in existing applications.\n * Usage of this EIP is therefore discouraged unless you have a very targeted use case.\n */\nexport const toChecksumAddress = function (hexAddress: string, eip1191ChainId?: BNLike): string {\n  assertIsHexString(hexAddress)\n  const address = stripHexPrefix(hexAddress).toLowerCase()\n\n  let prefix = ''\n  if (eip1191ChainId) {\n    const chainId = toType(eip1191ChainId, TypeOutput.BN)\n    prefix = chainId.toString() + '0x'\n  }\n\n  const hash = keccakFromString(prefix + address).toString('hex')\n  let ret = '0x'\n\n  for (let i = 0; i < address.length; i++) {\n    if (parseInt(hash[i], 16) >= 8) {\n      ret += address[i].toUpperCase()\n    } else {\n      ret += address[i]\n    }\n  }\n\n  return ret\n}\n\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */\nexport const isValidChecksumAddress = function (\n  hexAddress: string,\n  eip1191ChainId?: BNLike\n): boolean {\n  return isValidAddress(hexAddress) && toChecksumAddress(hexAddress, eip1191ChainId) === hexAddress\n}\n\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */\nexport const generateAddress = function (from: Buffer, nonce: Buffer): Buffer {\n  assertIsBuffer(from)\n  assertIsBuffer(nonce)\n  const nonceBN = new BN(nonce)\n\n  if (nonceBN.isZero()) {\n    // in RLP we want to encode null in the case of zero nonce\n    // read the RLP documentation for an answer if you dare\n    return rlphash([from, null]).slice(-20)\n  }\n\n  // Only take the lower 160bits of the hash\n  return rlphash([from, Buffer.from(nonceBN.toArray())]).slice(-20)\n}\n\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */\nexport const generateAddress2 = function (from: Buffer, salt: Buffer, initCode: Buffer): Buffer {\n  assertIsBuffer(from)\n  assertIsBuffer(salt)\n  assertIsBuffer(initCode)\n\n  assert(from.length === 20)\n  assert(salt.length === 32)\n\n  const address = keccak256(\n    Buffer.concat([Buffer.from('ff', 'hex'), from, salt, keccak256(initCode)])\n  )\n\n  return address.slice(-20)\n}\n\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */\nexport const isValidPrivate = function (privateKey: Buffer): boolean {\n  return privateKeyVerify(privateKey)\n}\n\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nexport const isValidPublic = function (publicKey: Buffer, sanitize: boolean = false): boolean {\n  assertIsBuffer(publicKey)\n  if (publicKey.length === 64) {\n    // Convert to SEC1 for secp256k1\n    return publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]))\n  }\n\n  if (!sanitize) {\n    return false\n  }\n\n  return publicKeyVerify(publicKey)\n}\n\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nexport const pubToAddress = function (pubKey: Buffer, sanitize: boolean = false): Buffer {\n  assertIsBuffer(pubKey)\n  if (sanitize && pubKey.length !== 64) {\n    pubKey = Buffer.from(publicKeyConvert(pubKey, false).slice(1))\n  }\n  assert(pubKey.length === 64)\n  // Only take the lower 160bits of the hash\n  return keccak(pubKey).slice(-20)\n}\nexport const publicToAddress = pubToAddress\n\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nexport const privateToPublic = function (privateKey: Buffer): Buffer {\n  assertIsBuffer(privateKey)\n  // skip the type flag and use the X, Y points\n  return Buffer.from(publicKeyCreate(privateKey, false)).slice(1)\n}\n\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nexport const privateToAddress = function (privateKey: Buffer): Buffer {\n  return publicToAddress(privateToPublic(privateKey))\n}\n\n/**\n * Converts a public key to the Ethereum format.\n */\nexport const importPublic = function (publicKey: Buffer): Buffer {\n  assertIsBuffer(publicKey)\n  if (publicKey.length !== 64) {\n    publicKey = Buffer.from(publicKeyConvert(publicKey, false).slice(1))\n  }\n  return publicKey\n}\n\n/**\n * Returns the zero address.\n */\nexport const zeroAddress = function (): string {\n  const addressLength = 20\n  const addr = zeros(addressLength)\n  return bufferToHex(addr)\n}\n\n/**\n * Checks if a given address is the zero address.\n */\nexport const isZeroAddress = function (hexAddress: string): boolean {\n  try {\n    assertIsString(hexAddress)\n  } catch (e: any) {\n    return false\n  }\n\n  const zeroAddr = zeroAddress()\n  return zeroAddr === hexAddress\n}\n","import assert from 'assert'\nimport { BN } from './externals'\nimport { toBuffer, zeros } from './bytes'\nimport {\n  isValidAddress,\n  pubToAddress,\n  privateToAddress,\n  generateAddress,\n  generateAddress2,\n} from './account'\n\nexport class Address {\n  public readonly buf: Buffer\n\n  constructor(buf: Buffer) {\n    assert(buf.length === 20, 'Invalid address length')\n    this.buf = buf\n  }\n\n  /**\n   * Returns the zero address.\n   */\n  static zero(): Address {\n    return new Address(zeros(20))\n  }\n\n  /**\n   * Returns an Address object from a hex-encoded string.\n   * @param str - Hex-encoded address\n   */\n  static fromString(str: string): Address {\n    assert(isValidAddress(str), 'Invalid address')\n    return new Address(toBuffer(str))\n  }\n\n  /**\n   * Returns an address for a given public key.\n   * @param pubKey The two points of an uncompressed key\n   */\n  static fromPublicKey(pubKey: Buffer): Address {\n    assert(Buffer.isBuffer(pubKey), 'Public key should be Buffer')\n    const buf = pubToAddress(pubKey)\n    return new Address(buf)\n  }\n\n  /**\n   * Returns an address for a given private key.\n   * @param privateKey A private key must be 256 bits wide\n   */\n  static fromPrivateKey(privateKey: Buffer): Address {\n    assert(Buffer.isBuffer(privateKey), 'Private key should be Buffer')\n    const buf = privateToAddress(privateKey)\n    return new Address(buf)\n  }\n\n  /**\n   * Generates an address for a newly created contract.\n   * @param from The address which is creating this new address\n   * @param nonce The nonce of the from account\n   */\n  static generate(from: Address, nonce: BN): Address {\n    assert(BN.isBN(nonce))\n    return new Address(generateAddress(from.buf, nonce.toArrayLike(Buffer)))\n  }\n\n  /**\n   * Generates an address for a contract created using CREATE2.\n   * @param from The address which is creating this new address\n   * @param salt A salt\n   * @param initCode The init code of the contract being created\n   */\n  static generate2(from: Address, salt: Buffer, initCode: Buffer): Address {\n    assert(Buffer.isBuffer(salt))\n    assert(Buffer.isBuffer(initCode))\n    return new Address(generateAddress2(from.buf, salt, initCode))\n  }\n\n  /**\n   * Is address equal to another.\n   */\n  equals(address: Address): boolean {\n    return this.buf.equals(address.buf)\n  }\n\n  /**\n   * Is address zero.\n   */\n  isZero(): boolean {\n    return this.equals(Address.zero())\n  }\n\n  /**\n   * True if address is in the address range defined\n   * by EIP-1352\n   */\n  isPrecompileOrSystemAddress(): boolean {\n    const addressBN = new BN(this.buf)\n    const rangeMin = new BN(0)\n    const rangeMax = new BN('ffff', 'hex')\n\n    return addressBN.gte(rangeMin) && addressBN.lte(rangeMax)\n  }\n\n  /**\n   * Returns hex encoding of address.\n   */\n  toString(): string {\n    return '0x' + this.buf.toString('hex')\n  }\n\n  /**\n   * Returns Buffer representation of address.\n   */\n  toBuffer(): Buffer {\n    return Buffer.from(this.buf)\n  }\n}\n","import { BN } from './externals'\nimport { stripHexPrefix, padToEven, isHexString, isHexPrefixed } from './internal'\nimport {\n  PrefixedHexString,\n  TransformableToArray,\n  TransformableToBuffer,\n  NestedBufferArray,\n  NestedUint8Array,\n} from './types'\nimport { assertIsBuffer, assertIsArray, assertIsHexString } from './helpers'\n\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nexport const intToHex = function (i: number) {\n  if (!Number.isSafeInteger(i) || i < 0) {\n    throw new Error(`Received an invalid integer type: ${i}`)\n  }\n  return `0x${i.toString(16)}`\n}\n\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\nexport const intToBuffer = function (i: number) {\n  const hex = intToHex(i)\n  return Buffer.from(padToEven(hex.slice(2)), 'hex')\n}\n\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\nexport const zeros = function (bytes: number): Buffer {\n  return Buffer.allocUnsafe(bytes).fill(0)\n}\n\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */\nconst setLength = function (msg: Buffer, length: number, right: boolean) {\n  const buf = zeros(length)\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf)\n      return buf\n    }\n    return msg.slice(0, length)\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length)\n      return buf\n    }\n    return msg.slice(-length)\n  }\n}\n\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nexport const setLengthLeft = function (msg: Buffer, length: number) {\n  assertIsBuffer(msg)\n  return setLength(msg, length, false)\n}\n\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nexport const setLengthRight = function (msg: Buffer, length: number) {\n  assertIsBuffer(msg)\n  return setLength(msg, length, true)\n}\n\n/**\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\nconst stripZeros = function (a: any): Buffer | number[] | string {\n  let first = a[0]\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1)\n    first = a[0]\n  }\n  return a\n}\n\n/**\n * Trims leading zeros from a `Buffer`.\n * @param a (Buffer)\n * @return (Buffer)\n */\nexport const unpadBuffer = function (a: Buffer): Buffer {\n  assertIsBuffer(a)\n  return stripZeros(a) as Buffer\n}\n\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param a (number[])\n * @return (number[])\n */\nexport const unpadArray = function (a: number[]): number[] {\n  assertIsArray(a)\n  return stripZeros(a) as number[]\n}\n\n/**\n * Trims leading zeros from a hex-prefixed `String`.\n * @param a (String)\n * @return (String)\n */\nexport const unpadHexString = function (a: string): string {\n  assertIsHexString(a)\n  a = stripHexPrefix(a)\n  return stripZeros(a) as string\n}\n\nexport type ToBufferInputTypes =\n  | PrefixedHexString\n  | number\n  | BN\n  | Buffer\n  | Uint8Array\n  | number[]\n  | TransformableToArray\n  | TransformableToBuffer\n  | null\n  | undefined\n\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BN` and other objects\n * with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */\nexport const toBuffer = function (v: ToBufferInputTypes): Buffer {\n  if (v === null || v === undefined) {\n    return Buffer.allocUnsafe(0)\n  }\n\n  if (Buffer.isBuffer(v)) {\n    return Buffer.from(v)\n  }\n\n  if (Array.isArray(v) || v instanceof Uint8Array) {\n    return Buffer.from(v as Uint8Array)\n  }\n\n  if (typeof v === 'string') {\n    if (!isHexString(v)) {\n      throw new Error(\n        `Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ${v}`\n      )\n    }\n    return Buffer.from(padToEven(stripHexPrefix(v)), 'hex')\n  }\n\n  if (typeof v === 'number') {\n    return intToBuffer(v)\n  }\n\n  if (BN.isBN(v)) {\n    if (v.isNeg()) {\n      throw new Error(`Cannot convert negative BN to buffer. Given: ${v}`)\n    }\n    return v.toArrayLike(Buffer)\n  }\n\n  if (v.toArray) {\n    // converts a BN to a Buffer\n    return Buffer.from(v.toArray())\n  }\n\n  if (v.toBuffer) {\n    return Buffer.from(v.toBuffer())\n  }\n\n  throw new Error('invalid type')\n}\n\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\nexport const bufferToInt = function (buf: Buffer): number {\n  return new BN(toBuffer(buf)).toNumber()\n}\n\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\nexport const bufferToHex = function (buf: Buffer): string {\n  buf = toBuffer(buf)\n  return '0x' + buf.toString('hex')\n}\n\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\nexport const fromSigned = function (num: Buffer): BN {\n  return new BN(num).fromTwos(256)\n}\n\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\nexport const toUnsigned = function (num: BN): Buffer {\n  return Buffer.from(num.toTwos(256).toArray())\n}\n\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\nexport const addHexPrefix = function (str: string): string {\n  if (typeof str !== 'string') {\n    return str\n  }\n\n  return isHexPrefixed(str) ? str : '0x' + str\n}\n\n/**\n * Returns the utf8 string representation from a hex string.\n *\n * Examples:\n *\n * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'\n * Input 2: '657468657265756d'\n * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'\n *\n * Output (all 3 input variants): 'ethereum'\n *\n * Note that this method is not intended to be used with hex strings\n * representing quantities in both big endian or little endian notation.\n *\n * @param string Hex string, should be `0x` prefixed\n * @return Utf8 string\n */\nexport const toUtf8 = function (hex: string): string {\n  const zerosRegexp = /^(00)+|(00)+$/g\n  hex = stripHexPrefix(hex)\n  if (hex.length % 2 !== 0) {\n    throw new Error('Invalid non-even hex string input for toUtf8() provided')\n  }\n  const bufferVal = Buffer.from(hex.replace(zerosRegexp, ''), 'hex')\n\n  return bufferVal.toString('utf8')\n}\n\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\nexport const baToJSON = function (ba: any): any {\n  if (Buffer.isBuffer(ba)) {\n    return `0x${ba.toString('hex')}`\n  } else if (ba instanceof Array) {\n    const array = []\n    for (let i = 0; i < ba.length; i++) {\n      array.push(baToJSON(ba[i]))\n    }\n    return array\n  }\n}\n\n/**\n * Checks provided Buffers for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Buffer values\n * @throws if any provided value is found to have leading zero bytes\n */\nexport const validateNoLeadingZeroes = function (values: { [key: string]: Buffer | undefined }) {\n  for (const [k, v] of Object.entries(values)) {\n    if (v !== undefined && v.length > 0 && v[0] === 0) {\n      throw new Error(`${k} cannot have leading zeroes, received: ${v.toString('hex')}`)\n    }\n  }\n}\n\n/**\n * Converts a {@link Uint8Array} or {@link NestedUint8Array} to {@link Buffer} or {@link NestedBufferArray}\n */\nexport function arrToBufArr(arr: Uint8Array): Buffer\nexport function arrToBufArr(arr: NestedUint8Array): NestedBufferArray\nexport function arrToBufArr(arr: Uint8Array | NestedUint8Array): Buffer | NestedBufferArray\nexport function arrToBufArr(arr: Uint8Array | NestedUint8Array): Buffer | NestedBufferArray {\n  if (!Array.isArray(arr)) {\n    return Buffer.from(arr)\n  }\n  return arr.map((a) => arrToBufArr(a))\n}\n\n/**\n * Converts a {@link Buffer} or {@link NestedBufferArray} to {@link Uint8Array} or {@link NestedUint8Array}\n */\nexport function bufArrToArr(arr: Buffer): Uint8Array\nexport function bufArrToArr(arr: NestedBufferArray): NestedUint8Array\nexport function bufArrToArr(arr: Buffer | NestedBufferArray): Uint8Array | NestedUint8Array\nexport function bufArrToArr(arr: Buffer | NestedBufferArray): Uint8Array | NestedUint8Array {\n  if (!Array.isArray(arr)) {\n    return Uint8Array.from(arr ?? [])\n  }\n  return arr.map((a) => bufArrToArr(a))\n}\n","import { Buffer } from 'buffer'\nimport { BN } from './externals'\n\n/**\n * 2^64-1\n */\nexport const MAX_UINT64 = new BN('ffffffffffffffff', 16)\n\n/**\n * The max integer that the evm can handle (2^256-1)\n */\nexport const MAX_INTEGER = new BN(\n  'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',\n  16\n)\n\n/**\n * 2^256\n */\nexport const TWO_POW256 = new BN(\n  '10000000000000000000000000000000000000000000000000000000000000000',\n  16\n)\n\n/**\n * Keccak-256 hash of null\n */\nexport const KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470'\n\n/**\n * Keccak-256 hash of null\n */\nexport const KECCAK256_NULL = Buffer.from(KECCAK256_NULL_S, 'hex')\n\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexport const KECCAK256_RLP_ARRAY_S =\n  '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347'\n\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexport const KECCAK256_RLP_ARRAY = Buffer.from(KECCAK256_RLP_ARRAY_S, 'hex')\n\n/**\n * Keccak-256 hash of the RLP of null\n */\nexport const KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421'\n\n/**\n * Keccak-256 hash of the RLP of null\n */\nexport const KECCAK256_RLP = Buffer.from(KECCAK256_RLP_S, 'hex')\n","/**\n * Re-exports commonly used modules:\n * * Exports [`BN`](https://github.com/indutny/bn.js), [`rlp`](https://github.com/ethereumjs/rlp).\n * @packageDocumentation\n */\n\nimport BN from 'bn.js'\nimport * as rlp from 'rlp'\n\n/**\n * [`BN`](https://github.com/indutny/bn.js)\n */\nexport { BN }\n\n/**\n * [`rlp`](https://github.com/ethereumjs/rlp)\n */\nexport { rlp }\n","import { keccak224, keccak384, keccak256 as k256, keccak512 } from 'ethereum-cryptography/keccak'\nconst createHash = require('create-hash')\nimport { rlp } from './externals'\nimport { toBuffer, setLengthLeft } from './bytes'\nimport { assertIsString, assertIsBuffer, assertIsArray, assertIsHexString } from './helpers'\n\n/**\n * Creates Keccak hash of a Buffer input\n * @param a The input data (Buffer)\n * @param bits (number = 256) The Keccak width\n */\nexport const keccak = function (a: Buffer, bits: number = 256): Buffer {\n  assertIsBuffer(a)\n  switch (bits) {\n    case 224: {\n      return keccak224(a)\n    }\n    case 256: {\n      return k256(a)\n    }\n    case 384: {\n      return keccak384(a)\n    }\n    case 512: {\n      return keccak512(a)\n    }\n    default: {\n      throw new Error(`Invald algorithm: keccak${bits}`)\n    }\n  }\n}\n\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\n * @param a The input data (Buffer)\n */\nexport const keccak256 = function (a: Buffer): Buffer {\n  return keccak(a)\n}\n\n/**\n * Creates Keccak hash of a utf-8 string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\nexport const keccakFromString = function (a: string, bits: number = 256) {\n  assertIsString(a)\n  const buf = Buffer.from(a, 'utf8')\n  return keccak(buf, bits)\n}\n\n/**\n * Creates Keccak hash of an 0x-prefixed string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\nexport const keccakFromHexString = function (a: string, bits: number = 256) {\n  assertIsHexString(a)\n  return keccak(toBuffer(a), bits)\n}\n\n/**\n * Creates Keccak hash of a number array input\n * @param a The input data (number[])\n * @param bits (number = 256) The Keccak width\n */\nexport const keccakFromArray = function (a: number[], bits: number = 256) {\n  assertIsArray(a)\n  return keccak(toBuffer(a), bits)\n}\n\n/**\n * Creates SHA256 hash of an input.\n * @param  a The input data (Buffer|Array|String)\n */\nconst _sha256 = function (a: any): Buffer {\n  a = toBuffer(a)\n  return createHash('sha256').update(a).digest()\n}\n\n/**\n * Creates SHA256 hash of a Buffer input.\n * @param a The input data (Buffer)\n */\nexport const sha256 = function (a: Buffer): Buffer {\n  assertIsBuffer(a)\n  return _sha256(a)\n}\n\n/**\n * Creates SHA256 hash of a string input.\n * @param a The input data (string)\n */\nexport const sha256FromString = function (a: string): Buffer {\n  assertIsString(a)\n  return _sha256(a)\n}\n\n/**\n * Creates SHA256 hash of a number[] input.\n * @param a The input data (number[])\n */\nexport const sha256FromArray = function (a: number[]): Buffer {\n  assertIsArray(a)\n  return _sha256(a)\n}\n\n/**\n * Creates RIPEMD160 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n * @param padded Whether it should be padded to 256 bits or not\n */\nconst _ripemd160 = function (a: any, padded: boolean): Buffer {\n  a = toBuffer(a)\n  const hash = createHash('rmd160').update(a).digest()\n  if (padded === true) {\n    return setLengthLeft(hash, 32)\n  } else {\n    return hash\n  }\n}\n\n/**\n * Creates RIPEMD160 hash of a Buffer input.\n * @param a The input data (Buffer)\n * @param padded Whether it should be padded to 256 bits or not\n */\nexport const ripemd160 = function (a: Buffer, padded: boolean): Buffer {\n  assertIsBuffer(a)\n  return _ripemd160(a, padded)\n}\n\n/**\n * Creates RIPEMD160 hash of a string input.\n * @param a The input data (String)\n * @param padded Whether it should be padded to 256 bits or not\n */\nexport const ripemd160FromString = function (a: string, padded: boolean): Buffer {\n  assertIsString(a)\n  return _ripemd160(a, padded)\n}\n\n/**\n * Creates RIPEMD160 hash of a number[] input.\n * @param a The input data (number[])\n * @param padded Whether it should be padded to 256 bits or not\n */\nexport const ripemd160FromArray = function (a: number[], padded: boolean): Buffer {\n  assertIsArray(a)\n  return _ripemd160(a, padded)\n}\n\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input.\n * @param a The input data\n */\nexport const rlphash = function (a: rlp.Input): Buffer {\n  return keccak(rlp.encode(a))\n}\n","import { isHexString } from './internal'\n\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\nexport const assertIsHexString = function (input: string): void {\n  if (!isHexString(input)) {\n    const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nexport const assertIsBuffer = function (input: Buffer): void {\n  if (!Buffer.isBuffer(input)) {\n    const msg = `This method only supports Buffer but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\nexport const assertIsArray = function (input: number[]): void {\n  if (!Array.isArray(input)) {\n    const msg = `This method only supports number arrays but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\nexport const assertIsString = function (input: string): void {\n  if (typeof input !== 'string') {\n    const msg = `This method only supports strings but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n","/**\n * Constants\n */\nexport * from './constants'\n\n/**\n * Account class and helper functions\n */\nexport * from './account'\n\n/**\n * Address type\n */\nexport * from './address'\n\n/**\n * Hash functions\n */\nexport * from './hash'\n\n/**\n * ECDSA signature\n */\nexport * from './signature'\n\n/**\n * Utilities for manipulating Buffers, byte arrays, etc.\n */\nexport * from './bytes'\n\n/**\n * Function for definining properties on an object\n */\nexport * from './object'\n\n/**\n * External exports (BN, rlp)\n */\nexport * from './externals'\n\n/**\n * Helpful TypeScript types\n */\nexport * from './types'\n\n/**\n * Export ethjs-util methods\n */\nexport {\n  isHexPrefixed,\n  stripHexPrefix,\n  padToEven,\n  getBinarySize,\n  arrayContainsArray,\n  toAscii,\n  fromUtf8,\n  fromAscii,\n  getKeys,\n  isHexString,\n} from './internal'\n","/*\nThe MIT License\n\nCopyright (c) 2016 Nick Dodson. nickdodson.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE\n */\n\n/**\n * Returns a `Boolean` on whether or not the a `String` starts with '0x'\n * @param str the string input value\n * @return a boolean if it is or is not hex prefixed\n * @throws if the str input is not a string\n */\nexport function isHexPrefixed(str: string): boolean {\n  if (typeof str !== 'string') {\n    throw new Error(`[isHexPrefixed] input must be type 'string', received type ${typeof str}`)\n  }\n\n  return str[0] === '0' && str[1] === 'x'\n}\n\n/**\n * Removes '0x' from a given `String` if present\n * @param str the string value\n * @returns the string without 0x prefix\n */\nexport const stripHexPrefix = (str: string): string => {\n  if (typeof str !== 'string')\n    throw new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`)\n\n  return isHexPrefixed(str) ? str.slice(2) : str\n}\n\n/**\n * Pads a `String` to have an even length\n * @param value\n * @return output\n */\nexport function padToEven(value: string): string {\n  let a = value\n\n  if (typeof a !== 'string') {\n    throw new Error(`[padToEven] value must be type 'string', received ${typeof a}`)\n  }\n\n  if (a.length % 2) a = `0${a}`\n\n  return a\n}\n\n/**\n * Get the binary size of a string\n * @param str\n * @returns the number of bytes contained within the string\n */\nexport function getBinarySize(str: string) {\n  if (typeof str !== 'string') {\n    throw new Error(`[getBinarySize] method requires input type 'string', recieved ${typeof str}`)\n  }\n\n  return Buffer.byteLength(str, 'utf8')\n}\n\n/**\n * Returns TRUE if the first specified array contains all elements\n * from the second one. FALSE otherwise.\n *\n * @param superset\n * @param subset\n *\n */\nexport function arrayContainsArray(\n  superset: unknown[],\n  subset: unknown[],\n  some?: boolean\n): boolean {\n  if (Array.isArray(superset) !== true) {\n    throw new Error(\n      `[arrayContainsArray] method requires input 'superset' to be an array, got type '${typeof superset}'`\n    )\n  }\n  if (Array.isArray(subset) !== true) {\n    throw new Error(\n      `[arrayContainsArray] method requires input 'subset' to be an array, got type '${typeof subset}'`\n    )\n  }\n\n  return subset[some ? 'some' : 'every']((value) => superset.indexOf(value) >= 0)\n}\n\n/**\n * Should be called to get ascii from its hex representation\n *\n * @param string in hex\n * @returns ascii string representation of hex value\n */\nexport function toAscii(hex: string): string {\n  let str = ''\n  let i = 0\n  const l = hex.length\n\n  if (hex.substring(0, 2) === '0x') i = 2\n\n  for (; i < l; i += 2) {\n    const code = parseInt(hex.substr(i, 2), 16)\n    str += String.fromCharCode(code)\n  }\n\n  return str\n}\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @param string\n * @param optional padding\n * @returns hex representation of input string\n */\nexport function fromUtf8(stringValue: string) {\n  const str = Buffer.from(stringValue, 'utf8')\n\n  return `0x${padToEven(str.toString('hex')).replace(/^0+|0+$/g, '')}`\n}\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @param  string\n * @param  optional padding\n * @returns  hex representation of input string\n */\nexport function fromAscii(stringValue: string) {\n  let hex = ''\n  for (let i = 0; i < stringValue.length; i++) {\n    const code = stringValue.charCodeAt(i)\n    const n = code.toString(16)\n    hex += n.length < 2 ? `0${n}` : n\n  }\n\n  return `0x${hex}`\n}\n\n/**\n * Returns the keys from an array of objects.\n * @example\n * ```js\n * getKeys([{a: '1', b: '2'}, {a: '3', b: '4'}], 'a') => ['1', '3']\n *````\n * @param  params\n * @param  key\n * @param  allowEmpty\n * @returns output just a simple array of output keys\n */\nexport function getKeys(params: Record<string, string>[], key: string, allowEmpty?: boolean) {\n  if (!Array.isArray(params)) {\n    throw new Error(`[getKeys] method expects input 'params' to be an array, got ${typeof params}`)\n  }\n  if (typeof key !== 'string') {\n    throw new Error(\n      `[getKeys] method expects input 'key' to be type 'string', got ${typeof params}`\n    )\n  }\n\n  const result = []\n\n  for (let i = 0; i < params.length; i++) {\n    let value = params[i][key]\n    if (allowEmpty && !value) {\n      value = ''\n    } else if (typeof value !== 'string') {\n      throw new Error(`invalid abi - expected type 'string', received ${typeof value}`)\n    }\n    result.push(value)\n  }\n\n  return result\n}\n\n/**\n * Is the string a hex string.\n *\n * @param  value\n * @param  length\n * @returns  output the string is a hex string\n */\nexport function isHexString(value: string, length?: number): boolean {\n  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) return false\n\n  if (length && value.length !== 2 + 2 * length) return false\n\n  return true\n}\n","import assert from 'assert'\nimport { stripHexPrefix } from './internal'\nimport { rlp } from './externals'\nimport { toBuffer, baToJSON, unpadBuffer } from './bytes'\n\n/**\n * Defines properties on a `Object`. It make the assumption that underlying data is binary.\n * @param self the `Object` to define properties on\n * @param fields an array fields to define. Fields can contain:\n * * `name` - the name of the properties\n * * `length` - the number of bytes the field can have\n * * `allowLess` - if the field can be less than the length\n * * `allowEmpty`\n * @param data data to be validated against the definitions\n * @deprecated\n */\nexport const defineProperties = function (self: any, fields: any, data?: any) {\n  self.raw = []\n  self._fields = []\n\n  // attach the `toJSON`\n  self.toJSON = function (label: boolean = false) {\n    if (label) {\n      type Dict = { [key: string]: string }\n      const obj: Dict = {}\n      self._fields.forEach((field: string) => {\n        obj[field] = `0x${self[field].toString('hex')}`\n      })\n      return obj\n    }\n    return baToJSON(self.raw)\n  }\n\n  self.serialize = function serialize() {\n    return rlp.encode(self.raw)\n  }\n\n  fields.forEach((field: any, i: number) => {\n    self._fields.push(field.name)\n    function getter() {\n      return self.raw[i]\n    }\n    function setter(v: any) {\n      v = toBuffer(v)\n\n      if (v.toString('hex') === '00' && !field.allowZero) {\n        v = Buffer.allocUnsafe(0)\n      }\n\n      if (field.allowLess && field.length) {\n        v = unpadBuffer(v)\n        assert(\n          field.length >= v.length,\n          `The field ${field.name} must not have more ${field.length} bytes`\n        )\n      } else if (!(field.allowZero && v.length === 0) && field.length) {\n        assert(\n          field.length === v.length,\n          `The field ${field.name} must have byte length of ${field.length}`\n        )\n      }\n\n      self.raw[i] = v\n    }\n\n    Object.defineProperty(self, field.name, {\n      enumerable: true,\n      configurable: true,\n      get: getter,\n      set: setter,\n    })\n\n    if (field.default) {\n      self[field.name] = field.default\n    }\n\n    // attach alias\n    if (field.alias) {\n      Object.defineProperty(self, field.alias, {\n        enumerable: false,\n        configurable: true,\n        set: setter,\n        get: getter,\n      })\n    }\n  })\n\n  // if the constuctor is passed data\n  if (data) {\n    if (typeof data === 'string') {\n      data = Buffer.from(stripHexPrefix(data), 'hex')\n    }\n\n    if (Buffer.isBuffer(data)) {\n      data = rlp.decode(data)\n    }\n\n    if (Array.isArray(data)) {\n      if (data.length > self._fields.length) {\n        throw new Error('wrong number of fields in data')\n      }\n\n      // make sure all the items are buffers\n      data.forEach((d, i) => {\n        self[self._fields[i]] = toBuffer(d)\n      })\n    } else if (typeof data === 'object') {\n      const keys = Object.keys(data)\n      fields.forEach((field: any) => {\n        if (keys.indexOf(field.name) !== -1) self[field.name] = data[field.name]\n        if (keys.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias]\n      })\n    } else {\n      throw new Error('invalid data')\n    }\n  }\n}\n","import { ecdsaSign, ecdsaRecover, publicKeyConvert } from 'ethereum-cryptography/secp256k1'\nimport { BN } from './externals'\nimport { toBuffer, setLengthLeft, bufferToHex, bufferToInt } from './bytes'\nimport { keccak } from './hash'\nimport { assertIsBuffer } from './helpers'\nimport { BNLike, toType, TypeOutput } from './types'\n\nexport interface ECDSASignature {\n  v: number\n  r: Buffer\n  s: Buffer\n}\n\nexport interface ECDSASignatureBuffer {\n  v: Buffer\n  r: Buffer\n  s: Buffer\n}\n\n/**\n * Returns the ECDSA signature of a message hash.\n */\nexport function ecsign(msgHash: Buffer, privateKey: Buffer, chainId?: number): ECDSASignature\nexport function ecsign(msgHash: Buffer, privateKey: Buffer, chainId: BNLike): ECDSASignatureBuffer\nexport function ecsign(msgHash: Buffer, privateKey: Buffer, chainId: any): any {\n  const { signature, recid: recovery } = ecdsaSign(msgHash, privateKey)\n\n  const r = Buffer.from(signature.slice(0, 32))\n  const s = Buffer.from(signature.slice(32, 64))\n\n  if (!chainId || typeof chainId === 'number') {\n    // return legacy type ECDSASignature (deprecated in favor of ECDSASignatureBuffer to handle large chainIds)\n    if (chainId && !Number.isSafeInteger(chainId)) {\n      throw new Error(\n        'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)'\n      )\n    }\n    const v = chainId ? recovery + (chainId * 2 + 35) : recovery + 27\n    return { r, s, v }\n  }\n\n  const chainIdBN = toType(chainId as BNLike, TypeOutput.BN)\n  const v = chainIdBN.muln(2).addn(35).addn(recovery).toArrayLike(Buffer)\n  return { r, s, v }\n}\n\nfunction calculateSigRecovery(v: BNLike, chainId?: BNLike): BN {\n  const vBN = toType(v, TypeOutput.BN)\n\n  if (vBN.eqn(0) || vBN.eqn(1)) return toType(v, TypeOutput.BN)\n\n  if (!chainId) {\n    return vBN.subn(27)\n  }\n  const chainIdBN = toType(chainId, TypeOutput.BN)\n  return vBN.sub(chainIdBN.muln(2).addn(35))\n}\n\nfunction isValidSigRecovery(recovery: number | BN): boolean {\n  const rec = new BN(recovery)\n  return rec.eqn(0) || rec.eqn(1)\n}\n\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nexport const ecrecover = function (\n  msgHash: Buffer,\n  v: BNLike,\n  r: Buffer,\n  s: Buffer,\n  chainId?: BNLike\n): Buffer {\n  const signature = Buffer.concat([setLengthLeft(r, 32), setLengthLeft(s, 32)], 64)\n  const recovery = calculateSigRecovery(v, chainId)\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value')\n  }\n  const senderPubKey = ecdsaRecover(signature, recovery.toNumber(), msgHash)\n  return Buffer.from(publicKeyConvert(senderPubKey, false).slice(1))\n}\n\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @returns Signature\n */\nexport const toRpcSig = function (v: BNLike, r: Buffer, s: Buffer, chainId?: BNLike): string {\n  const recovery = calculateSigRecovery(v, chainId)\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value')\n  }\n\n  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n  return bufferToHex(Buffer.concat([setLengthLeft(r, 32), setLengthLeft(s, 32), toBuffer(v)]))\n}\n\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @returns Signature\n */\nexport const toCompactSig = function (v: BNLike, r: Buffer, s: Buffer, chainId?: BNLike): string {\n  const recovery = calculateSigRecovery(v, chainId)\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value')\n  }\n\n  const vn = toType(v, TypeOutput.Number)\n  let ss = s\n  if ((vn > 28 && vn % 2 === 1) || vn === 1 || vn === 28) {\n    ss = Buffer.from(s)\n    ss[0] |= 0x80\n  }\n\n  return bufferToHex(Buffer.concat([setLengthLeft(r, 32), setLengthLeft(ss, 32)]))\n}\n\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */\nexport const fromRpcSig = function (sig: string): ECDSASignature {\n  const buf: Buffer = toBuffer(sig)\n\n  let r: Buffer\n  let s: Buffer\n  let v: number\n  if (buf.length >= 65) {\n    r = buf.slice(0, 32)\n    s = buf.slice(32, 64)\n    v = bufferToInt(buf.slice(64))\n  } else if (buf.length === 64) {\n    // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n    r = buf.slice(0, 32)\n    s = buf.slice(32, 64)\n    v = bufferToInt(buf.slice(32, 33)) >> 7\n    s[0] &= 0x7f\n  } else {\n    throw new Error('Invalid signature length')\n  }\n\n  // support both versions of `eth_sign` responses\n  if (v < 27) {\n    v += 27\n  }\n\n  return {\n    v,\n    r,\n    s,\n  }\n}\n\n/**\n * Validate a ECDSA signature.\n * NOTE: Accepts `v == 0 | v == 1` for EIP1559 transactions\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nexport const isValidSignature = function (\n  v: BNLike,\n  r: Buffer,\n  s: Buffer,\n  homesteadOrLater: boolean = true,\n  chainId?: BNLike\n): boolean {\n  const SECP256K1_N_DIV_2 = new BN(\n    '7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0',\n    16\n  )\n  const SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16)\n\n  if (r.length !== 32 || s.length !== 32) {\n    return false\n  }\n\n  if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n    return false\n  }\n\n  const rBN = new BN(r)\n  const sBN = new BN(s)\n\n  if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\n    return false\n  }\n\n  if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nexport const hashPersonalMessage = function (message: Buffer): Buffer {\n  assertIsBuffer(message)\n  const prefix = Buffer.from(`\\u0019Ethereum Signed Message:\\n${message.length}`, 'utf-8')\n  return keccak(Buffer.concat([prefix, message]))\n}\n","import { BN } from './externals'\nimport { isHexString } from './internal'\nimport { Address } from './address'\nimport { unpadBuffer, toBuffer, ToBufferInputTypes } from './bytes'\n\n/*\n * A type that represents a BNLike input that can be converted to a BN.\n */\nexport type BNLike = BN | PrefixedHexString | number | Buffer\n\n/*\n * A type that represents a BufferLike input that can be converted to a Buffer.\n */\nexport type BufferLike =\n  | Buffer\n  | Uint8Array\n  | number[]\n  | number\n  | BN\n  | TransformableToBuffer\n  | PrefixedHexString\n\n/*\n * A type that represents a `0x`-prefixed hex string.\n */\nexport type PrefixedHexString = string\n\n/**\n * A type that represents an Address-like value.\n * To convert to address, use `new Address(toBuffer(value))`\n */\nexport type AddressLike = Address | Buffer | PrefixedHexString\n\n/*\n * A type that represents an object that has a `toArray()` method.\n */\nexport interface TransformableToArray {\n  toArray(): Uint8Array\n  toBuffer?(): Buffer\n}\n\n/*\n * A type that represents an object that has a `toBuffer()` method.\n */\nexport interface TransformableToBuffer {\n  toBuffer(): Buffer\n  toArray?(): Uint8Array\n}\n\nexport type NestedUint8Array = Array<Uint8Array | NestedUint8Array>\nexport type NestedBufferArray = Array<Buffer | NestedBufferArray>\n\n/**\n * Convert BN to 0x-prefixed hex string.\n */\nexport function bnToHex(value: BN): PrefixedHexString {\n  return `0x${value.toString(16)}`\n}\n\n/**\n * Convert value from BN to an unpadded Buffer\n * (useful for RLP transport)\n * @param value value to convert\n */\nexport function bnToUnpaddedBuffer(value: BN): Buffer {\n  // Using `bn.toArrayLike(Buffer)` instead of `bn.toBuffer()`\n  // for compatibility with browserify and similar tools\n  return unpadBuffer(value.toArrayLike(Buffer))\n}\n\n/**\n * Deprecated alias for {@link bnToUnpaddedBuffer}\n * @deprecated\n */\nexport function bnToRlp(value: BN): Buffer {\n  return bnToUnpaddedBuffer(value)\n}\n\n/**\n * Type output options\n */\nexport enum TypeOutput {\n  Number,\n  BN,\n  Buffer,\n  PrefixedHexString,\n}\n\nexport type TypeOutputReturnType = {\n  [TypeOutput.Number]: number\n  [TypeOutput.BN]: BN\n  [TypeOutput.Buffer]: Buffer\n  [TypeOutput.PrefixedHexString]: PrefixedHexString\n}\n\n/**\n * Convert an input to a specified type.\n * Input of null/undefined returns null/undefined regardless of the output type.\n * @param input value to convert\n * @param outputType type to output\n */\nexport function toType<T extends TypeOutput>(input: null, outputType: T): null\nexport function toType<T extends TypeOutput>(input: undefined, outputType: T): undefined\nexport function toType<T extends TypeOutput>(\n  input: ToBufferInputTypes,\n  outputType: T\n): TypeOutputReturnType[T]\nexport function toType<T extends TypeOutput>(\n  input: ToBufferInputTypes,\n  outputType: T\n): TypeOutputReturnType[T] | undefined | null {\n  if (input === null) {\n    return null\n  }\n  if (input === undefined) {\n    return undefined\n  }\n\n  if (typeof input === 'string' && !isHexString(input)) {\n    throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`)\n  } else if (typeof input === 'number' && !Number.isSafeInteger(input)) {\n    throw new Error(\n      'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)'\n    )\n  }\n\n  const output = toBuffer(input)\n\n  if (outputType === TypeOutput.Buffer) {\n    return output as TypeOutputReturnType[T]\n  } else if (outputType === TypeOutput.BN) {\n    return new BN(output) as TypeOutputReturnType[T]\n  } else if (outputType === TypeOutput.Number) {\n    const bn = new BN(output)\n    const max = new BN(Number.MAX_SAFE_INTEGER.toString())\n    if (bn.gt(max)) {\n      throw new Error(\n        'The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)'\n      )\n    }\n    return bn.toNumber() as TypeOutputReturnType[T]\n  } else {\n    // outputType === TypeOutput.PrefixedHexString\n    return `0x${output.toString('hex')}` as TypeOutputReturnType[T]\n  }\n}\n","import { HashParams } from \"./hashParams\";\n\nexport class URLWithHashParams extends URL {\n  hashParams: HashParams = new URLSearchParams();\n\n  toString(): string {\n    this.hash = this.hashParams.toString();\n    return super.toString.call(this);\n  }\n}\n","import { Duplex } from \"readable-stream\";\n\nfunction noop(): void {\n  return undefined;\n}\n\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\n\nexport default class BasePostMessageStream extends Duplex {\n  _init: boolean;\n\n  _haveSyn: boolean;\n\n  _name: string;\n\n  _target: string;\n\n  _targetWindow: Window;\n\n  _targetOrigin: string;\n\n  _onMessage: any;\n\n  _synIntervalId: number;\n\n  constructor({\n    name,\n    target,\n    targetWindow = window,\n    targetOrigin = \"*\",\n  }: {\n    name: string;\n    target: string;\n    targetWindow?: Window;\n    targetOrigin?: string;\n  }) {\n    super({\n      objectMode: true,\n    });\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n    this._init = false;\n    this._haveSyn = false;\n    this._name = name;\n    this._target = target; // target origin\n    this._targetWindow = targetWindow;\n    this._targetOrigin = targetOrigin;\n    this._onMessage = this.onMessage.bind(this);\n    this._synIntervalId = null;\n\n    window.addEventListener(\"message\", this._onMessage, false);\n    this._handShake();\n  }\n\n  _break(): void {\n    this.cork();\n    this._write(BRK, null, noop);\n    this._haveSyn = false;\n    this._init = false;\n  }\n\n  _handShake(): void {\n    this._write(SYN, null, noop);\n    this.cork();\n  }\n\n  _onData(data: unknown): void {\n    if (!this._init) {\n      // listen for handshake\n      if (data === SYN) {\n        this._haveSyn = true;\n        this._write(ACK, null, noop);\n      } else if (data === ACK) {\n        this._init = true;\n        if (!this._haveSyn) {\n          this._write(ACK, null, noop);\n        }\n        this.uncork();\n      }\n    } else if (data === BRK) {\n      this._break();\n    } else {\n      // forward message\n      try {\n        this.push(data);\n      } catch (err) {\n        this.emit(\"error\", err);\n      }\n    }\n  }\n\n  _postMessage(data: unknown): void {\n    const originConstraint = this._targetOrigin;\n    this._targetWindow.postMessage(\n      {\n        target: this._target,\n        data,\n      },\n      originConstraint\n    );\n  }\n\n  onMessage(event: MessageEvent): void {\n    const message = event.data;\n\n    // validate message\n    if (\n      (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin) ||\n      event.source !== this._targetWindow ||\n      typeof message !== \"object\" ||\n      message.target !== this._name ||\n      !message.data\n    ) {\n      return;\n    }\n\n    this._onData(message.data);\n  }\n\n  _read(): void {\n    return undefined;\n  }\n\n  _write(data: unknown, _, cb: () => void): void {\n    this._postMessage(data);\n    cb();\n  }\n\n  _destroy(): void {\n    window.removeEventListener(\"message\", this._onMessage, false);\n  }\n}\n","import { EventEmitter } from \"events\";\n\ntype Handler = (...args: any[]) => void;\ninterface EventMap {\n  [k: string]: Handler | Handler[] | undefined;\n}\n\nfunction safeApply<T, A extends any[]>(handler: (this: T, ...handlerArgs: A) => void, context: T, args: A): void {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(() => {\n      throw err;\n    });\n  }\n}\n\nfunction arrayClone<T>(arr: T[]): T[] {\n  const n = arr.length;\n  const copy = new Array(n);\n  for (let i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n  return copy;\n}\n\nexport default class SafeEventEmitter extends EventEmitter {\n  emit(type: string, ...args: any[]): boolean {\n    let doError = type === \"error\";\n\n    const events: EventMap = (this as any)._events;\n    if (events !== undefined) {\n      doError = doError && events.error === undefined;\n    } else if (!doError) {\n      return false;\n    }\n\n    // If there is no 'error' event listener then throw.\n    if (doError) {\n      let er;\n      if (args.length > 0) {\n        [er] = args;\n      }\n      if (er instanceof Error) {\n        // Note: The comments on the `throw` lines are intentional, they show\n        // up in Node's output if this results in an unhandled exception.\n        throw er; // Unhandled 'error' event\n      }\n      // At least give some kind of context to the user\n      const err = new Error(`Unhandled error.${er ? ` (${er.message})` : \"\"}`);\n      (err as any).context = er;\n      throw err; // Unhandled 'error' event\n    }\n\n    const handler = events[type];\n\n    if (handler === undefined) {\n      return false;\n    }\n\n    if (typeof handler === \"function\") {\n      safeApply(handler, this, args);\n    } else {\n      const len = handler.length;\n      const listeners = arrayClone(handler);\n      for (let i = 0; i < len; i += 1) {\n        safeApply(listeners[i], this, args);\n      }\n    }\n\n    return true;\n  }\n}\n","import stringify from \"fast-safe-stringify\";\n\nexport default class SerializableError<T> extends Error {\n  public code: number;\n\n  public data: T;\n\n  constructor({ code, message, data }: { code: number; message: string; data?: T }) {\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n\n    super(message);\n    this.code = code;\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n\n  toString(): string {\n    return stringify({\n      code: this.code,\n      message: this.message,\n      data: this.data,\n      stack: this.stack,\n    });\n  }\n}\n","import { randomId } from \"@toruslabs/openlogin-utils\";\nimport { Duplex } from \"readable-stream\";\n\nimport SafeEventEmitter from \"./safeEventEmitter\";\nimport SerializableError from \"./serializableError\";\n\nexport type Json = boolean | number | string | null | { [property: string]: Json } | Json[];\n\nexport type JRPCVersion = \"2.0\";\nexport type JRPCId = number | string | void;\n\nexport type ConsoleLike = Pick<Console, \"log\" | \"warn\" | \"error\" | \"debug\" | \"info\" | \"trace\">;\nexport interface JRPCBase {\n  jsonrpc?: JRPCVersion;\n  id?: JRPCId;\n}\n\nexport interface JRPCResponse<T> extends JRPCBase {\n  result?: T;\n  error?: any;\n}\n\nexport const getRpcPromiseCallback =\n  (resolve: (value?: any) => void, reject: (error?: Error) => void, unwrapResult = true) =>\n  (error: Error, response: JRPCResponse<unknown>): void => {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n\nexport interface JRPCRequest<T> extends JRPCBase {\n  method: string;\n  params?: T;\n}\n\nexport type JRPCEngineNextCallback = (cb?: (done: (error?: Error) => void) => void) => void;\nexport type JRPCEngineEndCallback = (error?: Error) => void;\nexport type JRPCEngineReturnHandler = (done: (error?: Error) => void) => void;\n\ninterface IdMapValue {\n  req: JRPCRequest<unknown>;\n  res: JRPCResponse<unknown>;\n  next: JRPCEngineNextCallback;\n  end: JRPCEngineEndCallback;\n}\n\ninterface IdMap {\n  [requestId: string]: IdMapValue;\n}\n\nexport type JRPCMiddleware<T, U> = (req: JRPCRequest<T>, res: JRPCResponse<U>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => void;\n\nexport function createErrorMiddleware(log: ConsoleLike): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next, end) => {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({ code: -32603, message: \"invalid method\" });\n        end();\n        return;\n      }\n      next((done) => {\n        const { error } = res;\n        if (!error) {\n          return done();\n        }\n        log.error(`OpenLogin - RPC Error: ${error.message}`, error);\n        return done();\n      });\n    } catch (error) {\n      log.error(`OpenLogin - RPC Error thrown: ${error.message}`, error);\n      res.error = new SerializableError({ code: -32603, message: error.message });\n      end();\n    }\n  };\n}\n\nexport function createStreamMiddleware(): { events: SafeEventEmitter; middleware: JRPCMiddleware<unknown, unknown>; stream: Duplex } {\n  const idMap: IdMap = {};\n\n  function readNoop() {\n    return false;\n  }\n\n  const events = new SafeEventEmitter();\n\n  function processResponse(res: JRPCResponse<unknown>) {\n    const context = idMap[res.id as unknown as string];\n    if (!context) {\n      throw new Error(`StreamMiddleware - Unknown response id \"${res.id}\"`);\n    }\n\n    delete idMap[res.id as unknown as string];\n    // copy whole res onto original res\n    Object.assign(context.res, res);\n    // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n    setTimeout(context.end);\n  }\n\n  function processNotification(res: JRPCRequest<unknown>) {\n    events.emit(\"notification\", res);\n  }\n\n  function processMessage(res: JRPCResponse<unknown>, _encoding: unknown, cb: (error?: Error | null) => void) {\n    let err;\n    try {\n      const isNotification = !res.id;\n      if (isNotification) {\n        processNotification(res as unknown as JRPCRequest<unknown>);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err;\n    }\n    // continue processing stream\n    cb(err);\n  }\n\n  const stream = new Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage,\n  });\n\n  const middleware: JRPCMiddleware<unknown, unknown> = (req, res, next, end) => {\n    // write req to stream\n    stream.push(req);\n    // register request on id map\n    idMap[req.id as unknown as string] = { req, res, next, end };\n  };\n\n  return { events, middleware, stream };\n}\n\ntype ScaffoldMiddlewareHandler<T, U> = JRPCMiddleware<T, U> | Json;\n\nexport function createScaffoldMiddleware(handlers: {\n  [methodName: string]: ScaffoldMiddlewareHandler<unknown, unknown>;\n}): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next, end) => {\n    const handler = handlers[req.method];\n    // if no handler, return\n    if (handler === undefined) {\n      return next();\n    }\n    // if handler is fn, call as middleware\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    }\n    // if handler is some other value, use as result\n    res.result = handler;\n    return end();\n  };\n}\n\nexport function createIdRemapMiddleware(): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next, _end) => {\n    const originalId = req.id;\n    const newId = randomId();\n    req.id = newId;\n    res.id = newId;\n    next((done) => {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\n\nexport function createLoggerMiddleware(logger: ConsoleLike): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next, _) => {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\n\nexport type AsyncJRPCEngineNextCallback = () => Promise<void>;\n\ntype Maybe<T> = Partial<T> | null | undefined;\n\nexport interface JRPCSuccess<T> extends JRPCBase {\n  result: Maybe<T>;\n}\n\nexport interface JRPCError {\n  code: number;\n  message: string;\n  data?: unknown;\n  stack?: string;\n}\n\nexport interface PendingJRPCResponse<T> extends JRPCBase {\n  result?: T;\n  error?: Error | JRPCError;\n}\n\nexport interface JRPCFailure extends JRPCBase {\n  error: JRPCError;\n}\n\nexport type AsyncJRPCMiddleware<T, U> = (req: JRPCRequest<T>, res: PendingJRPCResponse<U>, next: AsyncJRPCEngineNextCallback) => Promise<void>;\n\ntype ReturnHandlerCallback = (error: null | Error) => void;\n\nexport function createAsyncMiddleware<T, U>(asyncMiddleware: AsyncJRPCMiddleware<T, U>): JRPCMiddleware<T, U> {\n  return async (req, res, next, end) => {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise: () => void;\n    const nextPromise = new Promise<void>((resolve) => {\n      resolveNextPromise = resolve;\n    });\n\n    let returnHandlerCallback: unknown = null;\n    let nextWasCalled = false;\n\n    // This will be called by the consumer's async middleware.\n    const asyncNext = async () => {\n      nextWasCalled = true;\n\n      // We pass a return handler to next(). When it is called by the engine,\n      // the consumer's async middleware will resume executing.\n\n      next((runReturnHandlersCallback) => {\n        // This callback comes from JRPCEngine._runReturnHandlers\n        returnHandlerCallback = runReturnHandlersCallback;\n        resolveNextPromise();\n      });\n      await nextPromise;\n    };\n\n    try {\n      await asyncMiddleware(req, res, asyncNext);\n\n      if (nextWasCalled) {\n        await nextPromise; // we must wait until the return handler is called\n        (returnHandlerCallback as ReturnHandlerCallback)(null);\n      } else {\n        end(null);\n      }\n    } catch (error) {\n      if (returnHandlerCallback) {\n        (returnHandlerCallback as ReturnHandlerCallback)(error);\n      } else {\n        end(error);\n      }\n    }\n  };\n}\n","import randombytes from \"randombytes\";\n\nexport const randomId = (): string => randombytes(32).toString(\"hex\");\n","import { serializeError } from \"eth-rpc-errors\";\nimport { Duplex } from \"readable-stream\";\n\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCEngineReturnHandler, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"./jrpc\";\nimport SafeEventEmitter from \"./safeEventEmitter\";\nimport SerializableError from \"./serializableError\";\n\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\nexport class JRPCEngine extends SafeEventEmitter {\n  private _middleware: JRPCMiddleware<unknown, unknown>[];\n\n  constructor() {\n    super();\n    this._middleware = [];\n  }\n\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n  private static async _runAllMiddleware(\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<unknown>,\n    middlewareStack: JRPCMiddleware<unknown, unknown>[]\n  ): Promise<\n    [\n      unknown, // error\n      boolean, // isComplete\n      JRPCEngineReturnHandler[]\n    ]\n  > {\n    const returnHandlers: JRPCEngineReturnHandler[] = [];\n    let error = null;\n    let isComplete = false;\n\n    // Go down stack of middleware, call and collect optional returnHandlers\n    for (const middleware of middlewareStack) {\n      [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n      if (isComplete) {\n        break;\n      }\n    }\n    return [error, isComplete, returnHandlers.reverse()];\n  }\n\n  /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */\n  private static _runMiddleware(\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<unknown>,\n    middleware: JRPCMiddleware<unknown, unknown>,\n    returnHandlers: JRPCEngineReturnHandler[]\n  ): Promise<[unknown, boolean]> {\n    return new Promise((resolve) => {\n      const end: JRPCEngineEndCallback = (err?: unknown) => {\n        const error = err || res.error;\n        if (error) {\n          res.error = serializeError(error);\n        }\n        // True indicates that the request should end\n        resolve([error, true]);\n      };\n\n      const next: JRPCEngineNextCallback = (returnHandler?: JRPCEngineReturnHandler) => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== \"function\") {\n              end(new SerializableError({ code: -32603, message: \"JRPCEngine: 'next' return handlers must be functions\" }));\n            }\n            returnHandlers.push(returnHandler);\n          }\n\n          // False indicates that the request should not end\n          resolve([null, false]);\n        }\n      };\n\n      try {\n        middleware(req, res, next, end);\n      } catch (error) {\n        end(error);\n      }\n    });\n  }\n\n  /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */\n  private static async _runReturnHandlers(handlers: JRPCEngineReturnHandler[]): Promise<void> {\n    for (const handler of handlers) {\n      await new Promise<void>((resolve, reject) => {\n        handler((err) => (err ? reject(err) : resolve()));\n      });\n    }\n  }\n\n  /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */\n  private static _checkForCompletion(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>, isComplete: boolean): void {\n    if (!(\"result\" in res) && !(\"error\" in res)) {\n      throw new SerializableError({ code: -32603, message: \"Response has no error or result for request\" });\n    }\n    if (!isComplete) {\n      throw new SerializableError({ code: -32603, message: \"Nothing ended request\" });\n    }\n  }\n\n  /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */\n  push<T, U>(middleware: JRPCMiddleware<T, U>): void {\n    this._middleware.push(middleware as JRPCMiddleware<unknown, unknown>);\n  }\n\n  /**\n   * Handle a JSON-RPC request, and return a response.\n   *\n   * @param request - The request to handle.\n   * @param callback - An error-first callback that will receive the response.\n   */\n  handle<T, U>(request: JRPCRequest<T>, callback: (error: unknown, response: JRPCResponse<U>) => void): void;\n\n  /**\n   * Handle an array of JSON-RPC requests, and return an array of responses.\n   *\n   * @param request - The requests to handle.\n   * @param callback - An error-first callback that will receive the array of\n   * responses.\n   */\n  handle<T, U>(requests: JRPCRequest<T>[], callback: (error: unknown, responses: JRPCResponse<U>[]) => void): void;\n\n  /**\n   * Handle a JSON-RPC request, and return a response.\n   *\n   * @param request - The request to handle.\n   * @returns A promise that resolves with the response, or rejects with an\n   * error.\n   */\n  handle<T, U>(request: JRPCRequest<T>): Promise<JRPCResponse<U>>;\n\n  /**\n   * Handle an array of JSON-RPC requests, and return an array of responses.\n   *\n   * @param request - The requests to handle.\n   * @returns A promise that resolves with the array of responses, or rejects\n   * with an error.\n   */\n  handle<T, U>(requests: JRPCRequest<T>[]): Promise<JRPCResponse<U>[]>;\n\n  handle(req: unknown, cb?: any) {\n    if (cb && typeof cb !== \"function\") {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n      return this._handleBatch(req);\n    }\n\n    if (cb) {\n      return this._handle(req as JRPCRequest<unknown>, cb);\n    }\n    return this._promiseHandle(req as JRPCRequest<unknown>);\n  }\n\n  /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */\n  asMiddleware(): JRPCMiddleware<unknown, unknown> {\n    return async (req, res, next, end) => {\n      try {\n        const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n        if (isComplete) {\n          await JRPCEngine._runReturnHandlers(returnHandlers);\n          return end(middlewareError as Error);\n        }\n\n        return next(async (handlerCallback) => {\n          try {\n            await JRPCEngine._runReturnHandlers(returnHandlers);\n          } catch (error) {\n            return handlerCallback(error);\n          }\n          return handlerCallback();\n        });\n      } catch (error) {\n        return end(error);\n      }\n    };\n  }\n\n  /**\n   * Like _handle, but for batch requests.\n   */\n  private _handleBatch(reqs: JRPCRequest<unknown>[]): Promise<JRPCResponse<unknown>[]>;\n\n  /**\n   * Like _handle, but for batch requests.\n   */\n  private _handleBatch(reqs: JRPCRequest<unknown>[], cb: (error: unknown, responses?: JRPCResponse<unknown>[]) => void): Promise<void>;\n\n  private async _handleBatch(\n    reqs: JRPCRequest<unknown>[],\n    cb?: (error: unknown, responses?: JRPCResponse<unknown>[]) => void\n  ): Promise<JRPCResponse<unknown>[] | void> {\n    // The order here is important\n    try {\n      // 2. Wait for all requests to finish, or throw on some kind of fatal\n      // error\n      const responses = await Promise.all(\n        // 1. Begin executing each request in the order received\n        reqs.map(this._promiseHandle.bind(this))\n      );\n\n      // 3. Return batch response\n      if (cb) {\n        return cb(null, responses);\n      }\n      return responses;\n    } catch (error) {\n      if (cb) {\n        return cb(error);\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * A promise-wrapped _handle.\n   */\n  private _promiseHandle(req: JRPCRequest<unknown>): Promise<JRPCResponse<unknown>> {\n    return new Promise((resolve) => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        resolve(res);\n      });\n    });\n  }\n\n  /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */\n  private async _handle(callerReq: JRPCRequest<unknown>, cb: (error: unknown, response: JRPCResponse<unknown>) => void): Promise<void> {\n    if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n      const error = new SerializableError({ code: -32603, message: \"request must be plain object\" });\n      return cb(error, { id: undefined, jsonrpc: \"2.0\", error });\n    }\n\n    if (typeof callerReq.method !== \"string\") {\n      const error = new SerializableError({ code: -32603, message: \"method must be string\" });\n      return cb(error, { id: callerReq.id, jsonrpc: \"2.0\", error });\n    }\n\n    const req: JRPCRequest<unknown> = { ...callerReq };\n    const res: JRPCResponse<unknown> = {\n      id: req.id,\n      jsonrpc: req.jsonrpc,\n    };\n    let error: Error = null;\n\n    try {\n      await this._processRequest(req, res);\n    } catch (_error) {\n      // A request handler error, a re-thrown middleware error, or something\n      // unexpected.\n      error = _error;\n    }\n\n    if (error) {\n      // Ensure no result is present on an errored response\n      delete res.result;\n      if (!res.error) {\n        res.error = serializeError(error);\n      }\n    }\n\n    return cb(error, res as JRPCResponse<unknown>);\n  }\n\n  /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */\n  private async _processRequest(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n    // Throw if \"end\" was not called, or if the response has neither a result\n    // nor an error.\n    JRPCEngine._checkForCompletion(req, res, isComplete);\n\n    // The return handlers should run even if an error was encountered during\n    // middleware processing.\n    await JRPCEngine._runReturnHandlers(returnHandlers);\n\n    // Now we re-throw the middleware processing error, if any, to catch it\n    // further up the call chain.\n    if (error) {\n      throw error;\n    }\n  }\n}\n\nexport function mergeMiddleware(middlewareStack: JRPCMiddleware<unknown, unknown>[]): JRPCMiddleware<unknown, unknown> {\n  const engine = new JRPCEngine();\n  middlewareStack.forEach((middleware) => engine.push(middleware));\n  return engine.asMiddleware();\n}\n\nexport interface EngineStreamOptions {\n  engine: JRPCEngine;\n}\n\nexport function createEngineStream(opts: EngineStreamOptions): Duplex {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n\n  const { engine } = opts;\n  // eslint-disable-next-line prefer-const\n  let stream: Duplex;\n\n  function read() {\n    return undefined;\n  }\n\n  function write(req: JRPCRequest<unknown>, _encoding: unknown, cb: (error?: Error | null) => void) {\n    engine.handle(req, (_err, res) => {\n      stream.push(res);\n    });\n    cb();\n  }\n\n  stream = new Duplex({ objectMode: true, read, write });\n\n  // forward notifications\n  if (engine.on) {\n    engine.on(\"notification\", (message) => {\n      stream.push(message);\n    });\n  }\n  return stream;\n}\n","import { BufferEncoding } from \"@toruslabs/openlogin-utils\";\nimport { Duplex } from \"readable-stream\";\n\nexport default class Substream extends Duplex {\n  private readonly _parent: any;\n\n  private readonly _name: string;\n\n  constructor({ parent, name }: { parent: any; name: string }) {\n    super({ objectMode: true });\n    this._parent = parent;\n    this._name = name;\n  }\n\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n  _read(): void {\n    return undefined;\n  }\n\n  /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */\n  _write(chunk: unknown, _encoding: BufferEncoding, callback: (error?: Error | null) => void): void {\n    this._parent.push({\n      name: this._name,\n      data: chunk,\n    });\n    callback();\n  }\n}\n","import { BufferEncoding } from \"@toruslabs/openlogin-utils\";\nimport eos from \"end-of-stream\";\nimport once from \"once\";\nimport pump from \"pump\";\nimport { Duplex } from \"readable-stream\";\nimport type { Readable, Writable } from \"stream\";\n\nimport Substream from \"./substream\";\n\nexport const IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\n\nexport type Stream = Readable | Writable;\n\ninterface Chunk {\n  name: string;\n  data: unknown;\n}\n\nexport class ObjectMultiplex extends Duplex {\n  public _substreams: Record<string, Substream | typeof IGNORE_SUBSTREAM>;\n\n  getStream: (name: string) => Substream | symbol;\n\n  constructor(opts: Record<string, unknown> = {}) {\n    super({\n      ...opts,\n      objectMode: true,\n    });\n    this._substreams = {};\n  }\n\n  createStream(name: string): Substream {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n\n    if (this._substreams[name]) {\n      throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n    }\n\n    // create substream\n    const substream = new Substream({ parent: this, name });\n    this._substreams[name] = substream;\n\n    // listen for parent stream to end\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    anyStreamEnd(this, (_error?: Error | null) => substream.destroy(_error || undefined));\n\n    return substream;\n  }\n\n  // ignore streams (dont display orphaned data warning)\n  ignoreStream(name: string): void {\n    // validate name\n    if (!name) {\n      throw new Error(\"ObjectMultiplex - name must not be empty\");\n    }\n    if (this._substreams[name]) {\n      throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n    }\n    // set\n    this._substreams[name] = IGNORE_SUBSTREAM;\n  }\n\n  _read(): void {\n    return undefined;\n  }\n\n  _write(chunk: Chunk, _encoding: BufferEncoding, callback: (error?: Error | null) => void): void {\n    const { name, data } = chunk;\n\n    if (!name) {\n      window.console.warn(`ObjectMultiplex - malformed chunk without name \"${chunk}\"`);\n      return callback();\n    }\n\n    // get corresponding substream\n    const substream = this._substreams[name];\n    if (!substream) {\n      window.console.warn(`ObjectMultiplex - orphaned data for stream \"${name}\"`);\n      return callback();\n    }\n\n    // push data into substream\n    if (substream !== IGNORE_SUBSTREAM) {\n      substream.push(data);\n    }\n\n    return callback();\n  }\n}\n\n// util\nfunction anyStreamEnd(stream: ObjectMultiplex, _cb: (error?: Error | null) => void) {\n  const cb = once(_cb);\n  eos(stream as unknown as Stream, { readable: false }, cb);\n  eos(stream as unknown as Stream, { writable: false }, cb);\n}\n\nexport function setupMultiplex(stream: Duplex): ObjectMultiplex {\n  const mux = new ObjectMultiplex();\n  mux.getStream = function streamHelper(name: string) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n    return this.createStream(name);\n  };\n\n  pump(stream as unknown as Stream, mux as unknown as Stream, stream as unknown as Stream, (err) => {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\n","import { JRPCEngine, JRPCMiddleware, JRPCRequest, JRPCResponse, SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors, serializeError } from \"eth-rpc-errors\";\nimport getCreateRandomId from \"json-rpc-random-id\";\n\nimport { BaseConfig, BaseState, IController } from \"../interfaces\";\nexport const createRandomId = getCreateRandomId();\n\nexport interface ProviderConfig {\n  /**\n   * Block explorer url for the chain\n   * @example https://ropsten.etherscan.io\n   */\n  blockExplorerUrl: string;\n  /**\n   * Logo url for the base token\n   */\n  logo: string;\n  /**\n   * Name for ticker\n   * @example 'Binance Token', 'Ethereum', 'Matic Network Token'\n   */\n  tickerName: string;\n  /**\n   * Symbol for ticker\n   * @example BNB, ETH\n   */\n  ticker: string;\n  /**\n   * RPC target Url for the chain\n   * @example https://ropsten.infura.io/v3/YOUR_API_KEY\n   */\n  rpcTarget: string;\n  /**\n   * Chain Id parameter(hex with 0x prefix) for the network. Mandatory for all networks. (assign one with a map to network identifier for platforms)\n   * @example 0x1 for mainnet, 'loading' if not connected to anything yet or connection fails\n   * @defaultValue 'loading'\n   */\n  chainId: string;\n  /**\n   * Display name for the network\n   */\n  displayName: string;\n}\n\n/**\n * Custom network properties\n * @example isEIP1559Compatible: true etc.\n */\nexport interface NetworkProperties {\n  [key: string]: number | string | boolean;\n}\n\n/**\n *\n */\nexport interface NetworkState extends BaseState {\n  /**\n   * Chain Id for the current network\n   */\n  chainId: string;\n  providerConfig: ProviderConfig;\n  properties: NetworkProperties;\n}\n\nexport interface NetworkConfig extends BaseConfig {\n  providerConfig: ProviderConfig;\n}\n\nexport interface INetworkController<C, S> extends IController<C, S> {\n  /**\n   * Gets the chainId of the network\n   */\n  getNetworkIdentifier(): string;\n\n  /**\n   * Sets provider for the current network controller\n   * @param providerConfig - Provider config object\n   */\n  setProviderConfig(providerConfig: ProviderConfig): void;\n  /**\n   * Connects to the rpcUrl for the current selected provider\n   */\n  lookupNetwork(): Promise<void>;\n}\n\nexport type BlockData = string | string[];\n\nexport type Block = Record<string, BlockData>;\n\nexport type SendAsyncCallBack = (err: Error, providerRes: JRPCResponse<Block>) => void;\n\nexport type SendCallBack<U> = (err: any, providerRes: U) => void;\n\nexport type Payload = Partial<JRPCRequest<string[]>>;\n\nexport interface RequestArguments<T> {\n  method: string;\n  params?: T;\n}\nexport type Maybe<T> = T | Partial<T> | null | undefined;\n\nexport interface SafeEventEmitterProvider extends SafeEventEmitter {\n  sendAsync: <T, U>(req: JRPCRequest<T>) => Promise<U>;\n  send: <T, U>(req: JRPCRequest<T>, callback: SendCallBack<U>) => void;\n  request: <T, U>(args: RequestArguments<T>) => Promise<Maybe<U>>;\n}\n\nexport interface ExtendedJsonRpcRequest<T> extends JRPCRequest<T> {\n  skipCache?: boolean;\n}\n\nexport function providerFromEngine(engine: JRPCEngine): SafeEventEmitterProvider {\n  const provider: SafeEventEmitterProvider = new SafeEventEmitter() as SafeEventEmitterProvider;\n  // handle both rpc send methods\n  provider.sendAsync = async <T, U>(req: JRPCRequest<T>) => {\n    const res = await engine.handle(req);\n    if (res.error) {\n      const err = serializeError(res.error, {\n        fallbackError: {\n          message: res.error?.message || res.error.toString(),\n          code: res.error?.code || -32603,\n        },\n      });\n\n      throw ethErrors.rpc.internal(err);\n    }\n    return res.result as U;\n  };\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  provider.send = <T, U>(req: JRPCRequest<T>, callback: (error: any, providerRes: U) => void) => {\n    if (typeof callback !== \"function\") {\n      throw new Error('Must provide callback to \"send\" method.');\n    }\n    engine.handle(req, callback);\n  };\n  // forward notifications\n  if (engine.on) {\n    engine.on(\"notification\", (message: string) => {\n      provider.emit(\"data\", null, message);\n    });\n  }\n\n  provider.request = async <T, U>(args: RequestArguments<T>) => {\n    const req: JRPCRequest<T> = {\n      ...args,\n      id: createRandomId(),\n      jsonrpc: \"2.0\",\n    };\n    const res = await provider.sendAsync(req);\n    return res as U;\n  };\n  return provider;\n}\n\nexport function providerFromMiddleware(middleware: JRPCMiddleware<string[], unknown>): SafeEventEmitterProvider {\n  const engine = new JRPCEngine();\n  engine.push(middleware);\n  const provider: SafeEventEmitterProvider = providerFromEngine(engine);\n  return provider;\n}\n\nexport function providerAsMiddleware(provider: SafeEventEmitterProvider): JRPCMiddleware<unknown, unknown> {\n  return async (req, res, _next, end) => {\n    // send request to provider\n    try {\n      const providerRes: unknown = await provider.sendAsync<unknown, unknown>(req);\n      res.result = providerRes;\n      return end();\n    } catch (error) {\n      return end(error.message);\n    }\n  };\n}\n","export const FEATURES_PROVIDER_CHANGE_WINDOW = { height: 660, width: 375 };\nexport const FEATURES_DEFAULT_WALLET_WINDOW = { height: 740, width: 1315 };\nexport const FEATURES_DEFAULT_POPUP_WINDOW = { height: 700, width: 1200 };\nexport const FEATURES_CONFIRM_WINDOW = { height: 700, width: 450 };\n\nexport const POPUP_LOADED = \"popup_loaded\";\nexport const POPUP_RESULT = \"popup_result\";\n\nexport const SETUP_COMPLETE = \"setup_complete\";\n\nexport const ACTIVITY_ACTION_ALL = \"walletActivity.allTransactions\";\nexport const ACTIVITY_ACTION_SEND = \"walletActivity.send\";\nexport const ACTIVITY_ACTION_BURN = \"walletActivity.burn\";\nexport const ACTIVITY_ACTION_RECEIVE = \"walletActivity.receive\";\nexport const ACTIVITY_ACTION_TOPUP = \"walletActivity.topup\";\n\nexport const ACTIVITY_PERIOD_ALL = \"walletActivity.all\";\nexport const ACTIVITY_PERIOD_WEEK_ONE = \"walletActivity.lastOneWeek\";\nexport const ACTIVITY_PERIOD_MONTH_ONE = \"walletActivity.lastOneMonth\";\nexport const ACTIVITY_PERIOD_MONTH_SIX = \"walletActivity.lastSixMonts\";\n\nexport const ACTIVITY_STATUS_SUCCESSFUL = \"walletActivity.successful\";\nexport const ACTIVITY_STATUS_UNSUCCESSFUL = \"walletActivity.unsuccessful\";\nexport const ACTIVITY_STATUS_PENDING = \"walletActivity.pending\";\nexport const ACTIVITY_STATUS_CANCELLED = \"walletActivity.cancelled\";\nexport const ACTIVITY_STATUS_CANCELLING = \"walletActivity.cancelling\";\n\nexport const COMMUNICATION_NOTIFICATIONS = {\n  IFRAME_STATUS: \"iframe_status\",\n\n  // Tell embed to create the window\n  CREATE_WINDOW: \"create_window\",\n  // Tell embed to close the window\n  CLOSE_WINDOW: \"close_window\",\n\n  USER_LOGGED_IN: \"user_logged_in\",\n  USER_LOGGED_OUT: \"user_logged_out\",\n};\n\nexport const COMMUNICATION_JRPC_METHODS = {\n  LOGOUT: \"logout\",\n  WALLET_INSTANCE_ID: \"wallet_instance_id\",\n  USER_INFO: \"user_info\",\n  SET_PROVIDER: \"set_provider\",\n  TOPUP: \"topup\",\n  IFRAME_STATUS: \"iframe_status\",\n  // embed has opened the window as requested\n  OPENED_WINDOW: \"opened_window\",\n  // user has closed the window from embed's side\n  CLOSED_WINDOW: \"closed_window\",\n  GET_PROVIDER_STATE: \"get_provider_state\",\n  LOGIN_WITH_PRIVATE_KEY: \"login_with_private_key\",\n};\n\nexport const PROVIDER_JRPC_METHODS = {\n  GET_PROVIDER_STATE: \"wallet_get_provider_state\",\n};\n\nexport const PROVIDER_NOTIFICATIONS = {\n  ACCOUNTS_CHANGED: \"wallet_accounts_changed\",\n  CHAIN_CHANGED: \"wallet_chain_changed\",\n  UNLOCK_STATE_CHANGED: \"wallet_unlock_state_changed\",\n};\n\nexport const BROADCAST_CHANNELS = {\n  REDIRECT_CHANNEL: \"redirect_channel\",\n  PROVIDER_CHANGE_CHANNEL: \"torus_provider_change_channel\",\n  TRANSACTION_CHANNEL: \"torus_channel\",\n  MESSAGE_CHANNEL: \"torus_message_channel\",\n  WALLET_LOGOUT_CHANNEL: \"wallet_logout_channel\",\n  WALLET_SELECTED_ADDRESS_CHANNEL: \"wallet_selected_address_channel\",\n  WALLET_NETWORK_CHANGE_CHANNEL: \"wallet_network_change_channel\",\n  WALLET_ACCOUNT_IMPORT_CHANNEL: \"wallet_account_import_channel\",\n  THEME_CHANGE: \"theme_change_channel\",\n};\nexport const BROADCAST_CHANNELS_MSGS = {\n  LOGOUT: \"logout\",\n  ACCOUNT_IMPORTED: \"account_imported\",\n  SELECTED_ADDRESS_CHANGE: \"selected_address_change\",\n  NETWORK_CHANGE: \"network_change\",\n  SET_THEME: \"set_theme\",\n};\n\nexport type BROADCAST_CHANNELS_MSGS_TYPE = typeof BROADCAST_CHANNELS_MSGS[keyof typeof BROADCAST_CHANNELS_MSGS];\n","import { BigNumber } from \"bignumber.js\";\nimport { addHexPrefix, bufferToInt, ecsign, fromSigned, hashPersonalMessage, intToBuffer, stripHexPrefix, toUnsigned } from \"ethereumjs-util\";\n\nimport { TransactionMeta } from \"../Transaction/ITransactionController\";\n\n/**\n * General utility functions\n */\n\nexport function intToHex(i: number): string {\n  const hex = i.toString(16);\n  return `0x${hex}`;\n}\n\n/**\n * Returns a random number. Don't use for cryptographic purposes.\n * @returns a random number\n */\nexport const randomId = (): string => Math.random().toString(36).slice(2);\n\n/**\n * Pads the front of the given hex string with zeroes until it reaches the\n * target length. If the input string is already longer than or equal to the\n * target length, it is returned unmodified.\n *\n * If the input string is \"0x\"-prefixed or not a hex string, an error will be\n * thrown.\n *\n * @param hexString - The hexadecimal string to pad with zeroes.\n * @param targetLength - The target length of the hexadecimal string.\n * @returns The input string front-padded with zeroes, or the original string\n * if it was already greater than or equal to to the target length.\n */\nexport function padWithZeroes(hexString: string, targetLength: number): string {\n  if (hexString !== \"\" && !/^[a-f0-9]+$/iu.test(hexString)) {\n    throw new Error(`Expected an unprefixed hex string. Received: ${hexString}`);\n  }\n\n  if (targetLength < 0) {\n    throw new Error(`Expected a non-negative integer target length. Received: ${targetLength}`);\n  }\n\n  return String.prototype.padStart.call(hexString, targetLength, \"0\");\n}\n/**\n * Concatenate an extended ECDSA signature into a hex string.\n *\n * @param v - The 'v' portion of the signature.\n * @param r - The 'r' portion of the signature.\n * @param s - The 's' portion of the signature.\n * @returns The concatenated ECDSA signature.\n */\nexport function concatSig(v: Buffer, r: Buffer, s: Buffer): string {\n  const rSig = fromSigned(r);\n  const sSig = fromSigned(s);\n  const vSig = bufferToInt(v);\n  const rStr = padWithZeroes(toUnsigned(rSig).toString(\"hex\"), 64);\n  const sStr = padWithZeroes(toUnsigned(sSig).toString(\"hex\"), 64);\n  const vStr = stripHexPrefix(intToHex(vSig));\n  return addHexPrefix(rStr.concat(sStr, vStr));\n}\n\nexport function timeout(duration: number): Promise<void> {\n  return new Promise((resolve) => {\n    const timeoutRef = window.setTimeout(() => {\n      resolve();\n      window.clearTimeout(timeoutRef);\n    }, duration);\n  });\n}\n\nexport const getHeaders = (jwt: string) => {\n  return {\n    headers: {\n      Authorization: `Bearer ${jwt}`,\n      \"Content-Type\": \"application/json; charset=utf-8\",\n    },\n  };\n};\n\n/**\n * Text/number formatting utilities\n */\nexport const formatSmallNumbers = (number: number, currency = \"usd\", noTilde = false): string => {\n  const finalNumber = BigNumber.isBigNumber(number) ? number.toNumber() : number;\n  if (!Number.isFinite(finalNumber)) return \"\";\n  const value = currency.toLowerCase() === \"usd\" ? parseFloat(Number(finalNumber).toFixed(2)) : parseFloat(Number(finalNumber).toFixed(5));\n  const tilde = value > 0 ? \"~ \" : \"\";\n  return `${currency.toLowerCase() === \"usd\" || noTilde ? \"\" : tilde}${Number(value)} ${currency.toUpperCase()}`;\n};\n\nexport const addressSlicer = (address: string, sliceLength = 5): string => {\n  if (address.length < 11) {\n    return address;\n  }\n  if (typeof address !== \"string\") return \"\";\n  return `${address.slice(0, sliceLength)}...${address.slice(-sliceLength)}`;\n};\n\nexport const significantDigits = (number: number | BigNumber, perc = false, length_ = 2): number | BigNumber => {\n  let input = !BigNumber.isBigNumber(number) ? new BigNumber(number) : number;\n  if (input.isZero()) return input;\n  if (perc) {\n    input = input.times(new BigNumber(100));\n  }\n  let depth;\n  if (input.gte(new BigNumber(1))) {\n    depth = length_;\n  } else {\n    depth = length_ - 1 + Math.ceil(Math.log10(new BigNumber(\"1\").div(input).toNumber()));\n  }\n  const shift = new BigNumber(10).pow(new BigNumber(depth));\n  const roundedNumber = Math.round(shift.times(input).toNumber()) / shift.toNumber();\n  return roundedNumber;\n};\nexport const formatDate = (inputDate: string): string => {\n  const monthList = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const date = new Date(inputDate);\n  const day = date.getDate();\n  const month = monthList[date.getMonth()];\n  const year = date.getFullYear();\n  return `${day} ${month} ${year}`;\n};\n\nexport const formatTime = (time: string): string => {\n  return new Date(time).toTimeString().slice(0, 8);\n};\n\n/**\n * Network utilities\n */\nexport const transactionMatchesNetwork = <T>(transaction: TransactionMeta<T>, chainId: string): boolean => {\n  if (typeof transaction.chainId !== \"undefined\") {\n    return transaction.chainId === chainId;\n  }\n  return false;\n};\n\n/**\n * Signing utils\n */\nexport const hashMessage = (message: string): Buffer => {\n  const bufferedMessage = Buffer.from(message, \"utf8\");\n  const el = hashPersonalMessage(bufferedMessage);\n  return el;\n};\n\nexport const signMessage = (privateKey: string, data: string): string => {\n  const privKey = Buffer.from(privateKey, \"hex\");\n  const message = stripHexPrefix(data);\n  const msgSig = ecsign(Buffer.from(message, \"hex\"), privKey);\n  const rawMsgSig = concatSig(intToBuffer(msgSig.v), msgSig.r, msgSig.s);\n  return rawMsgSig;\n};\n\n/**\n * popup handler utils\n */\nexport function getPopupFeatures({ width: w, height: h }: { width: number; height: number }): string {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n  const width = window.innerWidth\n    ? window.innerWidth\n    : document.documentElement.clientWidth\n    ? document.documentElement.clientWidth\n    : window.screen.width;\n\n  const height = window.innerHeight\n    ? window.innerHeight\n    : document.documentElement.clientHeight\n    ? document.documentElement.clientHeight\n    : window.screen.height;\n\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\n\nexport const broadcastChannelOptions = {\n  // type: 'localstorage', // (optional) enforce a type, oneOf['native', 'idb', 'localstorage', 'node']\n  webWorkerSupport: false, // (optional) set this to false if you know that your channel will never be used in a WebWorker (increases performance)\n};\n\nexport function getCustomDeviceInfo(): Record<string, string> | undefined {\n  if ((navigator as any)?.brave) {\n    return {\n      browser: \"Brave\",\n    };\n  }\n}\nexport class UserError extends Error {}\n\nexport const handleRedirectParameters = (\n  hash: string,\n  queryParameters: Record<string, string>\n): { error: string; instanceParameters: Record<string, string>; hashParameters: Record<string, string> } => {\n  const hashParameters: Record<string, string> = {};\n  const hashUrl = new URL(`${window.location.origin}/?${hash.slice(1)}`);\n  hashUrl.searchParams.forEach((value, key) => {\n    hashParameters[key] = value;\n  });\n  let instanceParameters = {};\n  let error = \"\";\n  if (!queryParameters.windowId) {\n    if (Object.keys(hashParameters).length > 0 && hashParameters.state) {\n      instanceParameters = JSON.parse(window.atob(decodeURIComponent(decodeURIComponent(hashParameters.state)))) || {};\n      error = hashParameters.error_description || hashParameters.error || error;\n    } else if (Object.keys(queryParameters).length > 0 && queryParameters.state) {\n      instanceParameters = JSON.parse(window.atob(decodeURIComponent(decodeURIComponent(queryParameters.state)))) || {};\n      if (queryParameters.error) error = queryParameters.error;\n    }\n  }\n  return { error, instanceParameters, hashParameters };\n};\n\nexport function sleep<T>(ms: number): Promise<T> {\n  return new Promise<T>((resolve) => setTimeout(resolve, ms));\n}\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\n\nimport { BaseConfig, BaseState } from \"../interfaces\";\n\n/**\n * The status of the transaction. Each status represents the state of the transaction internally\n * in the wallet. Some of these correspond with the state of the transaction on the network, but\n * some are wallet-specific.\n */\n\nexport enum TransactionStatus {\n  approved = \"approved\",\n  cancelled = \"cancelled\",\n  confirmed = \"confirmed\",\n  failed = \"failed\",\n  finalized = \"finalized\",\n  processed = \"processed\",\n  rejected = \"rejected\",\n  signed = \"signed\",\n  submitted = \"submitted\",\n  unapproved = \"unapproved\",\n  dropped = \"dropped\",\n  expired = \"expired\",\n}\n\nexport const TRANSACTION_TYPES = {\n  CONTRACT_INTERACTION: \"contractInteraction\",\n  DEPLOY_CONTRACT: \"contractDeployment\",\n  WASM_BASED_DEPLOY: \"wasmBasedDeploy\",\n  STANDARD_TRANSACTION: \"transaction\",\n  STANDARD_PAYMENT_TRANSACTION: \"payment_transaction\", // specific to chains like solana and casper\n};\n\nexport type TRANSACTION_TYPE = typeof TRANSACTION_TYPES[keyof typeof TRANSACTION_TYPES];\n\nexport const TX_EVENTS = {\n  TX_WARNING: \"tx:warning\",\n  TX_ERROR: \"tx:error\",\n  TX_FAILED: \"tx:failed\",\n  TX_CONFIRMED: \"tx:confirmed\",\n  TX_DROPPED: \"tx:dropped\",\n  TX_EXPIRED: \"tx:expired\",\n  TX_STATUS_UPDATE: \"tx:status_update\",\n  TX_UNAPPROVED: \"tx:unapproved\",\n};\n\nexport interface TransactionMeta<T> {\n  id: string;\n  transaction: T;\n  transactionType: TRANSACTION_TYPE;\n  dappSuggestedTransaction: Partial<T>;\n  chainId: string;\n  origin: string;\n  time: number;\n  status: TransactionStatus;\n  updated_at?: string; // iso date string\n  transactionHash?: string;\n  rawTransaction?: string;\n  txReceipt?: unknown;\n  error?: Error;\n  warning?: {\n    error?: string;\n    message?: string;\n  };\n}\n\nexport type BASE_TX_EVENT_TYPE = {\n  txId: string;\n};\n\nexport type TX_ERROR_EVENT_TYPE = BASE_TX_EVENT_TYPE & {\n  error: Error;\n};\n\nexport type TX_FAILED_EVENT_TYPE = BASE_TX_EVENT_TYPE & {\n  error: Error;\n};\n\nexport type TX_EXPIRED_EVENT_TYPE = BASE_TX_EVENT_TYPE;\n\nexport type TX_WARNING_EVENT_TYPE<T> = BASE_TX_EVENT_TYPE & {\n  txMeta: TransactionMeta<T>;\n};\n\nexport type TX_CONFIRMED_EVENT_TYPE = BASE_TX_EVENT_TYPE & {\n  txReceipt: unknown;\n};\n\nexport type TX_DROPPED_EVENT_TYPE = BASE_TX_EVENT_TYPE;\n\nexport type TX_STATUS_UPDATE_EVENT_TYPE = BASE_TX_EVENT_TYPE & {\n  status: TransactionStatus;\n};\n\nexport type TX_FINISHED_EVENT_TYPE<T> = BASE_TX_EVENT_TYPE & {\n  txMeta: TransactionMeta<T>;\n};\n\n/**\n * Transaction controller configuration\n */\nexport interface TransactionConfig extends BaseConfig {\n  txHistoryLimit: number;\n}\n\n/**\n * Transaction controller state\n */\nexport interface TransactionState<T> extends BaseState {\n  /**\n   * Transactions by key (id) value (TxMeta)\n   */\n  transactions: Record<string, TransactionMeta<T>>; // all transactions (unapprroved and all others)\n  unapprovedTxs?: Record<string, TransactionMeta<T>>; // only unapproved\n  currentNetworkTxsList?: TransactionMeta<T>[];\n}\n\n/**\n * Result\n *\n * result - Promise resolving to a new transaction hash\n * transactionMeta - Meta information about this new transaction\n */\nexport interface Result<T> {\n  result: Promise<string>;\n  transactionMeta: TransactionMeta<T>;\n}\n\nexport interface ITransactionController<T> {\n  /**\n   * Add a new unapproved transaction to state.\n   * @param transaction - Transaction object to add\n   * @returns - Object containing a promise resolving to the transaction hash if approved\n   */\n  addTransaction(transaction: T, req: JRPCRequest<T & { windowId?: string }> & { origin: string }): Promise<Result<T>>;\n\n  /**\n   * Approves a transaction and updates it's status in state.\n   *\n   * @param transactionID - ID of the transaction to approve\n   * @returns - Promise resolving when this operation completes\n   */\n  approveTransaction(transactionID: string): Promise<void>;\n\n  /**\n   * Cancels a transaction based on its ID by setting its status to \"rejected\"\n   *\n   * @param transactionID - ID of the transaction to cancel\n   */\n  cancelTransaction?(transactionID: string): Promise<void>;\n}\n\nexport interface ITransactionStateManager<T> {\n  addTransactionToState(txMeta: TransactionMeta<T>): TransactionMeta<T>;\n\n  wipeTransactions(address: string): void;\n\n  getTransactions(args: {\n    searchCriteria?: Record<string, (val: unknown) => boolean> | Record<string, unknown>;\n    initialList?: TransactionMeta<T>[];\n    filterToCurrentNetwork?: boolean;\n  }): TransactionMeta<T>[];\n  getApprovedTransactions(address?: string): TransactionMeta<T>[];\n  getPendingTransactions(address?: string): TransactionMeta<T>[];\n  getConfirmedTransactions(address?: string): TransactionMeta<T>[];\n}\n","export default {\n  errors: {\n    disconnected: (): string => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: (): string => \"Torus: Disconnected from iframe. Page reload required.\",\n    unsupportedSync: (method: string): string =>\n      `Torus: The Torus Ethereum provider does not support synchronous methods like ${method} without a callback parameter.`,\n    invalidDuplexStream: (): string => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: (maxEventListeners: number): string => `Invalid options. Received: { maxEventListeners: ${maxEventListeners}}`,\n    invalidRequestArgs: (): string => `Expected a single, non-array, object argument.`,\n    invalidRequestMethod: (): string => `'args.method' must be a non-empty string.`,\n    invalidRequestParams: (): string => `'args.params' must be an object or array if provided.`,\n    invalidLoggerObject: (): string => `'args.logger' must be an object if provided.`,\n    invalidLoggerMethod: (method: string): string => `'args.logger' must include required method '${method}'.`,\n  },\n  info: {\n    connected: (chainId: string): string => `Torus: Connected to chain with ID \"${chainId}\".`,\n  },\n  warnings: {},\n};\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\n\nexport const PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\",\n} as const;\n\nexport const TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  TESTING: \"testing\",\n} as const;\n\nexport type PAYMENT_PROVIDER_TYPE = typeof PAYMENT_PROVIDER[keyof typeof PAYMENT_PROVIDER];\n\nexport type TORUS_BUILD_ENV_TYPE = typeof TORUS_BUILD_ENV[keyof typeof TORUS_BUILD_ENV];\n\nexport const BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\",\n} as const;\n\nexport type EMBED_TRANSLATION_ITEM = {\n  continue: string;\n  actionRequired: string;\n  pendingAction: string;\n  cookiesRequired: string;\n  enableCookies: string;\n  clickHere: string;\n};\n\nexport type BUTTON_POSITION_TYPE = typeof BUTTON_POSITION[keyof typeof BUTTON_POSITION];\n\nexport type WALLET_PATH = \"transfer\" | \"topup\" | \"home\" | \"settings\" | \"history\" | \"discover\";\n\nexport const LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\",\n} as const;\n\nexport type LOGIN_PROVIDER_TYPE = typeof LOGIN_PROVIDER[keyof typeof LOGIN_PROVIDER];\n\nexport interface TorusCtorArgs {\n  /**\n   * Z-index of the modal and iframe\n   * @defaultValue 99999\n   */\n  modalZIndex?: number;\n}\n\nexport interface NetworkInterface {\n  /**\n   * Block explorer url for the chain\n   * @example https://explorer.solana.com/\n   */\n  blockExplorerUrl: string;\n  /**\n   * Logo url for the base token\n   */\n  logo: string;\n  /**\n   * Name for ticker\n   * @example 'Solana'\n   */\n  tickerName: string;\n  /**\n   * Symbol for ticker\n   * @example SOL\n   */\n  ticker: string;\n  /**\n   * RPC target Url for the chain\n   * @example https://api.devnet.solana.com/\n   */\n  rpcTarget: string;\n  /**\n   * Chain Id parameter(hex with 0x prefix) for the network. Mandatory for all networks. (assign one with a map to network identifier for platforms)\n   * @example 0x1 for mainnet, 0x2 for testnet, 0x3 for devnet,  'loading' if not connected to anything yet or connection fails\n   * @defaultValue 'loading'\n   */\n  chainId: string;\n  /**\n   * Display name for the network\n   */\n  displayName: string;\n}\n\nexport interface PaymentParams {\n  /**\n   * Address to send the funds to\n   */\n  selectedAddress?: string;\n  /**\n   * Default fiat currency for the user to make the payment in\n   */\n  selectedCurrency?: string;\n  /**\n   * Amount to buy in the selectedCurrency\n   */\n  fiatValue?: number;\n  /**\n   * Cryptocurrency to buy\n   */\n  selectedCryptoCurrency?: string;\n  /**\n   * Amount Cryptocurrency to buy\n   */\n  cryptoAmount?: number;\n}\n\nexport interface LoginParams {\n  loginProvider?: string;\n}\n\nexport interface UserInfo {\n  /**\n   * Email of the logged in user\n   */\n  email: string;\n  /**\n   * Full name of the logged in user\n   */\n  name: string;\n  /**\n   * Profile image of the logged in user\n   */\n  profileImage: string;\n  /**\n   * verifier of the logged in user (google, facebook etc)\n   */\n  verifier: string;\n  /**\n   * Verifier Id of the logged in user\n   *\n   * email for google,\n   * id for facebook,\n   * username for reddit,\n   * id for twitch,\n   * id for discord\n   */\n  verifierId: string;\n}\n\nexport interface LocaleLinks<T> {\n  /**\n   * Item corresponding to english\n   */\n  en?: T;\n  /**\n   * Item corresponding to japanese\n   */\n  ja?: T;\n  /**\n   * Item corresponding to korean\n   */\n  ko?: T;\n  /**\n   * Item corresponding to german\n   */\n  de?: T;\n  /**\n   * Item corresponding to chinese (simplified)\n   */\n  zh?: T;\n  /**\n   * Item corresponding to spanish\n   */\n  es?: T;\n}\n\nexport type NetworkLabel = \"mainnet-beta\" | \"testnet\" | \"devnet\";\n\nexport interface ThemeParams {\n  /**\n   * If true, enables dark mode\n   * Defaults to false\n   * @defaultValue false\n   */\n  isDark: boolean;\n  /**\n   * Colors object to customize colors in torus theme.\n   *\n   * Contact us for whitelabel. Example provided in `examples/vue-app`\n   */\n  colors: Record<string, string>;\n}\n\nexport interface WhiteLabelParams {\n  /**\n   * App name to display in the UI\n   */\n  name?: string;\n  /**\n   * App url\n   */\n  url?: string;\n  /**\n   * Whitelabel theme\n   */\n  theme: ThemeParams;\n  /**\n   * Language of whitelabel.\n   *\n   * order of preference: Whitelabel language \\> user language (in torus-website) \\> browser language\n   */\n  defaultLanguage?: string;\n  /**\n   * Logo Url to be used in light mode (dark logo)\n   */\n  logoDark: string;\n  /**\n   * Logo Url to be used in dark mode (light logo)\n   */\n  logoLight: string;\n  /**\n   * Shows/hides topup option in torus-website/widget.\n   * Defaults to false\n   * @defaultValue false\n   */\n  topupHide?: boolean;\n  /**\n   * Custom translations. See (examples/vue-app) to configure\n   */\n  customTranslations?: LocaleLinks<unknown>;\n}\nexport interface TorusParams {\n  /**\n   * Determines where the torus widget is visible on the page.\n   * @defaultValue bottom-left\n   */\n  buttonPosition?: BUTTON_POSITION_TYPE;\n  /**\n   * Api key\n   * Get yours today at {@link https://developer.tor.us | Dashboard}\n   */\n  apiKey?: string;\n\n  /**\n   * Torus Network Object\n   */\n  network?: NetworkInterface | NetworkLabel;\n  /**\n   * Build Environment of Torus.\n   *\n   * production uses https://solana.tor.us,\n   *\n   * development uses http://localhost:8080 (expects torus-website to be run locally),\n   *\n   * testing uses https://solana-testing.tor.us (latest internal build)\n   * @defaultValue production\n   */\n  buildEnv?: TORUS_BUILD_ENV_TYPE;\n  /**\n   * Enables or disables logging.\n   *\n   * Defaults to false in prod and true in other environments\n   */\n  enableLogging?: boolean;\n  /**\n   * whether to show/hide torus widget.\n   *\n   * Defaults to true\n   * @defaultValue true\n   */\n  showTorusButton?: boolean;\n  /**\n   * Prefers to use localStorage instead of sessionStorage for torus iframe. Allows longer lived sessions\n   *\n   * Defaults to false\n   * @defaultValue false\n   */\n  useLocalStorage?: boolean;\n  /**\n   * Allows passing external data for initialize\n   *\n   * Defaults to empty object\n   */\n  extraParams?: { [keyof: string]: string };\n  /**\n   * Params to enable whitelabelling of torus website and widget\n   */\n  whiteLabel?: WhiteLabelParams;\n}\n\nexport interface TorusLoginParams {\n  loginProvider?: LOGIN_PROVIDER_TYPE;\n  login_hint?: string;\n}\n\nexport interface ProviderOptions {\n  /**\n   * The name of the stream used to connect to the wallet.\n   */\n  jsonRpcStreamName?: string;\n\n  /**\n   * The maximum number of event listeners.\n   */\n  maxEventListeners?: number;\n}\n\nexport interface BaseProviderState {\n  isConnected: boolean;\n  initialized: boolean;\n  isPermanentlyDisconnected: boolean;\n  hasEmittedConnection: boolean;\n}\n\nexport interface InPageProviderState extends BaseProviderState {\n  accounts: null | string[];\n  isUnlocked: boolean;\n}\n\nexport interface CommunicationProviderState extends BaseProviderState {\n  buttonPosition: string;\n  isLoggedIn: boolean;\n  torusWidgetVisibility: boolean;\n  currentLoginProvider: LOGIN_PROVIDER_TYPE;\n  isIFrameFullScreen: boolean;\n}\n\nexport type Maybe<T> = Partial<T> | T | null | undefined;\n\nexport interface UnValidatedJsonRpcRequest extends JRPCRequest<unknown> {\n  windowId?: string;\n}\n\nexport interface RequestArguments<T> {\n  /** The RPC method to request. */\n  method: string;\n\n  /** The params of the RPC method, if any. */\n  params?: T;\n}\n","import { EMBED_TRANSLATION_ITEM, LocaleLinks, LOGIN_PROVIDER } from \"./interfaces\";\n\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\",\n    },\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\",\n    },\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\",\n    },\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\",\n    },\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\",\n    },\n  },\n} as LocaleLinks<{ embed: EMBED_TRANSLATION_ITEM }>;\n\nexport default {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKey: `torus-${window.location.hostname}`,\n};\n","import loglevel from \"loglevel\";\n\nexport default loglevel.getLogger(\"solana-embed\");\n","import { JRPCMiddleware, SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { LogLevelDesc } from \"loglevel\";\n\nimport config from \"./config\";\nimport { NetworkInterface, NetworkLabel } from \"./interfaces\";\nimport log from \"./loglevel\";\n\n// utility functions\n\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\nexport function createErrorMiddleware(): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: `The request 'method' must be a non-empty string.`,\n        data: req,\n      });\n    }\n\n    next((done) => {\n      const { error } = res;\n      if (!error) {\n        return done();\n      }\n      log.error(`Torus - RPC Error: ${error.message}`, error);\n      return done();\n    });\n  };\n}\n\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\nexport function logStreamDisconnectWarning(remoteLabel: string, error: Error, emitter: SafeEventEmitter): void {\n  let warningMsg = `Torus: Lost connection to \"${remoteLabel}\".`;\n  if (error?.stack) {\n    warningMsg += `\\n${error.stack}`;\n  }\n  log.warn(warningMsg);\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\n\nexport const getWindowId = (): string => Math.random().toString(36).slice(2);\n\nexport const getTorusUrl = async (buildEnv: string): Promise<{ torusUrl: string; logLevel: LogLevelDesc }> => {\n  let torusUrl: string;\n  let logLevel: LogLevelDesc;\n  // const versionUsed = version;\n  // log.info(\"solana embed version used: \", versionUsed);\n  switch (buildEnv) {\n    case \"testing\":\n      torusUrl = \"https://solana-testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n    case \"development\":\n      torusUrl = \"http://localhost:8080\";\n      logLevel = \"debug\";\n      break;\n    default:\n      torusUrl = `https://solana.tor.us`;\n      logLevel = \"error\";\n      break;\n  }\n  return { torusUrl, logLevel };\n};\n\nexport const getUserLanguage = (): string => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(config.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\n\nexport const NOOP = (): void => {\n  // empty function\n};\n\nexport const FEATURES_PROVIDER_CHANGE_WINDOW = { height: 660, width: 375 };\nexport const FEATURES_DEFAULT_WALLET_WINDOW = { height: 740, width: 1315 };\nexport const FEATURES_DEFAULT_POPUP_WINDOW = { height: 700, width: 1200 };\nexport const FEATURES_CONFIRM_WINDOW = { height: 600, width: 400 };\n\nexport function storageAvailable(type: \"localStorage\" | \"sessionStorage\"): boolean {\n  let storage: Storage;\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return (\n      e &&\n      // everything except Firefox\n      (e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === \"QuotaExceededError\" ||\n        // Firefox\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storage &&\n      storage.length !== 0\n    );\n  }\n}\n\n/**\n * popup handler utils\n */\nexport function getPopupFeatures({ width: w, height: h }: { width: number; height: number }): string {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n  const width = window.innerWidth\n    ? window.innerWidth\n    : document.documentElement.clientWidth\n    ? document.documentElement.clientWidth\n    : window.screen.width;\n\n  const height = window.innerHeight\n    ? window.innerHeight\n    : document.documentElement.clientHeight\n    ? document.documentElement.clientHeight\n    : window.screen.height;\n\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\n\nexport const getNetworkConfig = (label: NetworkLabel): NetworkInterface | undefined => {\n  switch (label) {\n    case \"mainnet-beta\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x1\",\n        displayName: \"Solana Mainnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://green-dark-sky.solana-mainnet.quiknode.pro/0b4b99540b7930cf590dc7fb0a2d1c9a906fd53c/\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    case \"testnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x2\",\n        displayName: \"Solana Testnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://spring-black-waterfall.solana-testnet.quiknode.pro/89830c37acd15df105b23742d37f33dc85b5eff8/\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    case \"devnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x3\",\n        displayName: \"Solana Devnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.devnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    default:\n      return undefined;\n  }\n};\n","import { createLoggerMiddleware, SafeEventEmitterProvider, SendCallBack } from \"@toruslabs/base-controllers\";\nimport {\n  createIdRemapMiddleware,\n  createStreamMiddleware,\n  getRpcPromiseCallback,\n  JRPCEngine,\n  JRPCRequest,\n  JRPCResponse,\n  ObjectMultiplex,\n  SafeEventEmitter,\n  Stream,\n} from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { duplex as isDuplexStream } from \"is-stream\";\nimport pump from \"pump\";\nimport type { Duplex } from \"readable-stream\";\n\nimport { BaseProviderState, Maybe, ProviderOptions, RequestArguments, UnValidatedJsonRpcRequest } from \"./interfaces\";\nimport messages from \"./messages\";\nimport { createErrorMiddleware, logStreamDisconnectWarning } from \"./utils\";\n\nabstract class BaseProvider<U extends BaseProviderState> extends SafeEventEmitter implements SafeEventEmitterProvider {\n  /**\n   * Indicating that this provider is a Torus provider.\n   */\n  public readonly isTorus: true;\n\n  _rpcEngine: JRPCEngine;\n\n  jsonRpcConnectionEvents: SafeEventEmitter;\n\n  protected _state: U;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super();\n    if (!isDuplexStream(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners);\n\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n\n    this.request = this.request.bind(this);\n    this.sendAsync = this.sendAsync.bind(this);\n    // this.enable = this.enable.bind(this);\n\n    // setup connectionStream multiplexing\n    const mux = new ObjectMultiplex();\n    pump(\n      connectionStream as unknown as Stream,\n      mux as unknown as Stream,\n      connectionStream as unknown as Stream,\n      this._handleStreamDisconnect.bind(this, \"Torus\")\n    );\n\n    // ignore phishing warning message (handled elsewhere)\n    mux.ignoreStream(\"phishing\");\n\n    // setup own event listeners\n    // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(\n      jsonRpcConnection.stream as unknown as Stream,\n      mux.createStream(jsonRpcStreamName) as unknown as Stream,\n      jsonRpcConnection.stream as unknown as Stream,\n      this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\")\n    );\n\n    // handle RPC requests via dapp-side rpc engine\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(createLoggerMiddleware({ origin: location.origin }));\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine;\n\n    this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n  }\n\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */\n  async request<TArgs, TResponse>(args: RequestArguments<TArgs>): Promise<Maybe<TResponse>> {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args,\n      });\n    }\n\n    const { method, params } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args,\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args,\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({ method, params }, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n\n  send<T, V>(req: JRPCRequest<T>, callback: SendCallBack<V>): void;\n\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  send(payload: JRPCRequest<unknown>, callback: (error: Error | null, result?: JRPCResponse<unknown>) => void): void {\n    this._rpcRequest(payload, callback);\n  }\n\n  sendAsync<T, V>(req: JRPCRequest<T>): Promise<V>;\n\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  sendAsync(payload: JRPCRequest<unknown>): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      this._rpcRequest(payload, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleStreamDisconnect(streamName: string, error: Error): void {\n    logStreamDisconnectWarning(streamName, error, this);\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n  abstract _initializeState(...args: unknown[]): Promise<void>;\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  protected abstract _rpcRequest(\n    payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[],\n    callback: (...args: unknown[]) => void,\n    isInternal?: boolean\n  ): void;\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInPageProvider#connect\n   */\n  protected abstract _handleConnect(...args: unknown[]): void;\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected abstract _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void;\n}\n\nexport default BaseProvider;\n","import { JRPCEngineNextCallback, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\nimport log from \"loglevel\";\n\nexport interface LoggerMiddlewareOptions {\n  origin: string;\n}\n\nexport function createLoggerMiddleware(options: LoggerMiddlewareOptions) {\n  return function loggerMiddleware(request: JRPCRequest<unknown>, response: JRPCResponse<unknown>, next: JRPCEngineNextCallback): void {\n    next((callback) => {\n      if (response.error) {\n        log.warn(\"Error in RPC response:\\n\", response);\n      }\n      if ((request as unknown as { isTorusInternal: boolean }).isTorusInternal) return;\n      log.info(`RPC (${options.origin}):`, request, \"->\", response);\n      callback();\n    });\n  };\n}\n","export const handleEvent = (handle: EventTarget, eventName: string, handler: (...args: unknown[]) => void, ...handlerArgs: unknown[]): void => {\n  const handlerWrapper = () => {\n    handler(...handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n  handle.addEventListener(eventName, handlerWrapper);\n};\n\nexport async function documentReady(): Promise<void> {\n  return new Promise<void>((resolve) => {\n    if (document.readyState !== \"loading\") {\n      resolve();\n    } else {\n      handleEvent(document, \"DOMContentLoaded\", resolve);\n    }\n  });\n}\n\nexport const htmlToElement = <T extends Element>(html: string): T => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild as T;\n};\n","import { SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\n\nimport { FEATURES_DEFAULT_POPUP_WINDOW, getPopupFeatures } from \"./utils\";\n\nclass PopupHandler extends SafeEventEmitter {\n  url: URL;\n\n  target: string;\n\n  features: string;\n\n  window: Window;\n\n  windowTimer: number;\n\n  iClosedWindow: boolean;\n\n  constructor({ url, target, features }: { url: URL; target?: string; features?: string }) {\n    super();\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n    this._setupTimer();\n  }\n\n  _setupTimer(): void {\n    this.windowTimer = Number(\n      setInterval(() => {\n        if (this.window && this.window.closed) {\n          clearInterval(this.windowTimer);\n          if (!this.iClosedWindow) {\n            this.emit(\"close\");\n          }\n          this.iClosedWindow = false;\n          this.window = undefined;\n        }\n        if (this.window === undefined) clearInterval(this.windowTimer);\n      }, 500)\n    );\n  }\n\n  open(): Promise<void> {\n    this.window = window.open(this.url.href, this.target, this.features);\n    if (this.window?.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close(): void {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect: boolean): void {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n}\n\nexport default PopupHandler;\n","import { COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, CommunicationWalletProviderState } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { EthereumRpcError } from \"eth-rpc-errors\";\nimport type { Duplex } from \"readable-stream\";\n\nimport BaseProvider from \"./baseProvider\";\nimport configuration from \"./config\";\nimport { documentReady, htmlToElement } from \"./embedUtils\";\nimport {\n  BUTTON_POSITION,\n  CommunicationProviderState,\n  EMBED_TRANSLATION_ITEM,\n  LOGIN_PROVIDER_TYPE,\n  ProviderOptions,\n  RequestArguments,\n  UnValidatedJsonRpcRequest,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport messages from \"./messages\";\nimport PopupHandler from \"./PopupHandler\";\nimport { FEATURES_CONFIRM_WINDOW, getPopupFeatures, getUserLanguage } from \"./utils\";\n\nclass TorusCommunicationProvider extends BaseProvider<CommunicationProviderState> {\n  protected static _defaultState: CommunicationProviderState = {\n    buttonPosition: \"bottom-left\",\n    currentLoginProvider: null,\n    isIFrameFullScreen: false,\n    hasEmittedConnection: false,\n\n    torusWidgetVisibility: false,\n    initialized: false,\n    isLoggedIn: false,\n    isPermanentlyDisconnected: false,\n    isConnected: false,\n  };\n\n  public embedTranslations: EMBED_TRANSLATION_ITEM;\n\n  public torusUrl: string;\n\n  public dappStorageKey: string;\n\n  public windowRefs: Record<string, PopupHandler>;\n\n  tryWindowHandle: (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => void;\n\n  private torusAlertContainer: HTMLDivElement;\n\n  private torusIframe: HTMLIFrameElement;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super(connectionStream, { maxEventListeners, jsonRpcStreamName });\n\n    // private state\n    this._state = {\n      ...TorusCommunicationProvider._defaultState,\n    };\n\n    // public state\n    this.torusUrl = \"\";\n    this.dappStorageKey = \"\";\n    const languageTranslations = configuration.translations[getUserLanguage()];\n    this.embedTranslations = languageTranslations.embed;\n    this.windowRefs = {};\n\n    // setup own event listeners\n\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const notificationHandler = (payload: RequestArguments<Record<string, unknown>>) => {\n      const { method, params } = payload;\n      if (method === COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n        const { isFullScreen, rid } = params;\n        this._displayIframe({ isFull: isFullScreen as boolean, rid: rid as string });\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW) {\n        const { windowId, url } = params as Record<string, string>;\n        this._createPopupBlockAlert(windowId, url);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n        this._handleCloseWindow(params);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n        const { currentLoginProvider } = params;\n        this._state.isLoggedIn = true;\n        this._state.currentLoginProvider = currentLoginProvider as LOGIN_PROVIDER_TYPE;\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n        this._state.isLoggedIn = false;\n        this._state.currentLoginProvider = null;\n        this._displayIframe();\n      }\n    };\n\n    this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n  }\n\n  get isLoggedIn(): boolean {\n    return this._state.isLoggedIn;\n  }\n\n  get isIFrameFullScreen(): boolean {\n    return this._state.isIFrameFullScreen;\n  }\n\n  /**\n   * Returns whether the inPage provider is connected to Torus.\n   */\n  isConnected(): boolean {\n    return this._state.isConnected;\n  }\n\n  async _initializeState(params: Record<string, unknown>): Promise<void> {\n    try {\n      const { torusUrl, dappStorageKey, torusAlertContainer, torusIframe } = params;\n      this.torusUrl = torusUrl as string;\n      this.dappStorageKey = dappStorageKey as string;\n      this.torusAlertContainer = torusAlertContainer as HTMLDivElement;\n      this.torusIframe = torusIframe as HTMLIFrameElement;\n      this.torusIframe.addEventListener(\"load\", () => {\n        // only do this if iframe is not full screen\n        if (!this._state.isIFrameFullScreen) this._displayIframe();\n      });\n      const { currentLoginProvider, isLoggedIn } = (await this.request({\n        method: COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: [],\n      })) as CommunicationWalletProviderState;\n\n      // indicate that we've connected, for EIP-1193 compliance\n      this._handleConnect(currentLoginProvider, isLoggedIn);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized communication state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  _handleWindow(windowId: string, { url, target, features }: { url?: string; target?: string; features?: string } = {}): void {\n    const finalUrl = new URL(url || `${this.torusUrl}/redirect?windowId=${windowId}`);\n    if (this.dappStorageKey) {\n      // If multiple instances, it returns the first one\n      if (finalUrl.hash) finalUrl.hash += `&dappStorageKey=${this.dappStorageKey}`;\n      else finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    const handledWindow = new PopupHandler({ url: finalUrl, target, features });\n    handledWindow.open();\n    if (!handledWindow.window) {\n      this._createPopupBlockAlert(windowId, finalUrl.href);\n      return;\n    }\n    // Add to collection only if window is opened\n    this.windowRefs[windowId] = handledWindow;\n    // We tell the iframe that the window has been successfully opened\n    this.request<{ windowId: string }, unknown>({\n      method: COMMUNICATION_JRPC_METHODS.OPENED_WINDOW,\n      params: { windowId },\n    });\n    handledWindow.once(\"close\", () => {\n      // user closed the window\n      delete this.windowRefs[windowId];\n      this.request<{ windowId: string }, unknown>({\n        method: COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n        params: { windowId },\n      });\n    });\n  }\n\n  _displayIframe({ isFull = false, rid = \"\" }: { isFull?: boolean; rid?: string } = {}): void {\n    const style: Partial<CSSStyleDeclaration> = {};\n    // set phase\n    if (!isFull) {\n      style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n      switch (this._state.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n    Object.assign(this.torusIframe.style, style);\n    this._state.isIFrameFullScreen = isFull;\n    this.request<{ isIFrameFullScreen: boolean; rid: string }, unknown>({\n      method: COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n      params: { isIFrameFullScreen: isFull, rid },\n    });\n  }\n\n  hideTorusButton(): void {\n    this._state.torusWidgetVisibility = false;\n    this._displayIframe();\n  }\n\n  showTorusButton(): void {\n    this._state.torusWidgetVisibility = true;\n    this._displayIframe();\n  }\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  protected _rpcRequest(payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], callback: (...args: unknown[]) => void): void {\n    const cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n    }\n    this.tryWindowHandle(_payload as JRPCRequest<unknown>[], cb);\n  }\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */\n  protected _handleConnect(currentLoginProvider: string, isLoggedIn: boolean): void {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", { currentLoginProvider, isLoggedIn });\n      log.debug(messages.info.connected(currentLoginProvider));\n    }\n  }\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void {\n    if (this._state.isConnected || (!this._state.isPermanentlyDisconnected && !isRecoverable)) {\n      this._state.isConnected = false;\n\n      let error: Error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(\n          1013, // Try again later\n          errorMessage || messages.errors.disconnected()\n        );\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(\n          1011, // Internal error\n          errorMessage || messages.errors.permanentlyDisconnected()\n        );\n        log.error(error);\n        this._state.currentLoginProvider = null;\n        this._state.isLoggedIn = false;\n        this._state.torusWidgetVisibility = false;\n        this._state.isIFrameFullScreen = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n\n  // Called if the iframe wants to close the window cause it is done processing the request\n  private _handleCloseWindow(params: { windowId?: string }): void {\n    const { windowId } = params;\n    if (this.windowRefs[windowId]) {\n      this.windowRefs[windowId].close();\n      delete this.windowRefs[windowId];\n    }\n  }\n\n  private async _createPopupBlockAlert(windowId: string, url: string): Promise<void> {\n    const logoUrl = this.getLogoUrl();\n    const torusAlert = htmlToElement<HTMLDivElement>(\n      '<div id=\"torusAlert\" class=\"torus-alert--v2\">' +\n        `<div id=\"torusAlert__logo\"><img src=\"${logoUrl}\" /></div>` +\n        \"<div>\" +\n        `<h1 id=\"torusAlert__title\">${this.embedTranslations.actionRequired}</h1>` +\n        `<p id=\"torusAlert__desc\">${this.embedTranslations.pendingAction}</p>` +\n        \"</div>\" +\n        \"</div>\"\n    );\n\n    const successAlert = htmlToElement(`<div><a id=\"torusAlert__btn\">${this.embedTranslations.continue}</a></div>`);\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(windowId, {\n          url,\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW),\n        });\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n\n    const attachOnLoad = () => {\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n\n    await documentReady();\n    attachOnLoad();\n    bindOnLoad();\n    this.torusAlertContainer.style.display = \"block\";\n  }\n\n  private getLogoUrl(): string {\n    const logoUrl = `${this.torusUrl}/images/torus_icon-blue.svg`;\n    return logoUrl;\n  }\n}\n\nexport default TorusCommunicationProvider;\n","import { InPageWalletProviderState, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest, JRPCSuccess } from \"@toruslabs/openlogin-jrpc\";\nimport { EthereumRpcError } from \"eth-rpc-errors\";\nimport dequal from \"fast-deep-equal\";\nimport type { Duplex } from \"readable-stream\";\n\nimport BaseProvider from \"./baseProvider\";\nimport { InPageProviderState, ProviderOptions, RequestArguments, UnValidatedJsonRpcRequest } from \"./interfaces\";\nimport log from \"./loglevel\";\nimport messages from \"./messages\";\n\nclass TorusInPageProvider extends BaseProvider<InPageProviderState> {\n  protected static _defaultState: InPageProviderState = {\n    accounts: null,\n    isConnected: false,\n    isUnlocked: false,\n    initialized: false,\n    isPermanentlyDisconnected: false,\n    hasEmittedConnection: false,\n  };\n\n  /**\n   * The chain ID of the currently connected Solana chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n  public chainId: string | null;\n\n  /**\n   * The user's currently selected Solana address.\n   * If null, Torus is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n  public selectedAddress: string | null;\n\n  tryWindowHandle: (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => void;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super(connectionStream, { maxEventListeners, jsonRpcStreamName });\n\n    // private state\n    this._state = {\n      ...TorusInPageProvider._defaultState,\n    };\n\n    // public state\n    this.selectedAddress = null;\n    this.chainId = null;\n\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this);\n\n    // setup own event listeners\n\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const jsonRpcNotificationHandler = (payload: RequestArguments<unknown[] | Record<string, unknown>>) => {\n      const { method, params } = payload;\n      if (method === PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n        this._handleAccountsChanged(params as unknown[]);\n      } else if (method === PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n        this._handleUnlockStateChanged(params as Record<string, unknown>);\n      } else if (method === PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n        this._handleChainChanged(params as Record<string, unknown>);\n      }\n    };\n\n    // json rpc notification listener\n    this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n  }\n\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n  isConnected(): boolean {\n    return this._state.isConnected;\n  }\n\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n  async _initializeState(): Promise<void> {\n    try {\n      const { accounts, chainId, isUnlocked } = (await this.request({\n        method: PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: [],\n      })) as InPageWalletProviderState;\n\n      // indicate that we've connected, for EIP-1193 compliance\n      this.emit(\"connect\", { chainId });\n\n      this._handleChainChanged({ chainId });\n      this._handleUnlockStateChanged({ accounts, isUnlocked });\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized provider state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  _rpcRequest(payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], callback: (...args: unknown[]) => void, isInternal = false): void {\n    let cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n\n      if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n        // handle accounts changing\n        cb = (err: Error, res: JRPCSuccess<string[]>) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n          callback(err, res);\n        };\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload as JRPCRequest<unknown>, cb);\n        return;\n      }\n    }\n    this.tryWindowHandle(_payload, cb);\n  }\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */\n  protected _handleConnect(chainId: string): void {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", { chainId });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void {\n    if (this._state.isConnected || (!this._state.isPermanentlyDisconnected && !isRecoverable)) {\n      this._state.isConnected = false;\n\n      let error: Error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(\n          1013, // Try again later\n          errorMessage || messages.errors.disconnected()\n        );\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(\n          1011, // Internal error\n          errorMessage || messages.errors.permanentlyDisconnected()\n        );\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n\n  /**\n   * Called when accounts may have changed.\n   */\n  protected _handleAccountsChanged(accounts: unknown[], isEthAccounts = false, isInternal = false): void {\n    // defensive programming\n    let finalAccounts = accounts;\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    }\n\n    // emit accountsChanged if anything about the accounts array has changed\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before solana_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n\n      this._state.accounts = finalAccounts as string[];\n      this.emit(\"accountsChanged\", finalAccounts);\n    }\n\n    // handle selectedAddress\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = (finalAccounts[0] as string) || null;\n    }\n  }\n\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n  protected _handleChainChanged({ chainId }: { chainId?: string } = {}): void {\n    if (!chainId) {\n      log.error(\"Torus: Received invalid network parameters. Please report this bug.\", { chainId });\n      return;\n    }\n\n    if (chainId === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n  protected _handleUnlockStateChanged({ accounts, isUnlocked }: { accounts?: string[]; isUnlocked?: boolean } = {}): void {\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", { isUnlocked });\n      return;\n    }\n\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n}\n\nexport default TorusInPageProvider;\n","/**\n * Returns whether the given image URL exists\n */\nfunction imgExists(url: string): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n      img.onload = () => resolve(true);\n      img.onerror = () => resolve(false);\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\n/**\n * Extracts a name for the site from the DOM\n */\nconst getSiteName = (window: Window): string => {\n  const { document } = window;\n\n  const siteName = document.querySelector<HTMLMetaElement>('head > meta[property=\"og:site_name\"]');\n  if (siteName) {\n    return siteName.content;\n  }\n\n  const metaTitle = document.querySelector<HTMLMetaElement>('head > meta[name=\"title\"]');\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n};\n\n/**\n * Extracts an icon for the site from the DOM\n */\nasync function getSiteIcon(window: Window): Promise<string> {\n  try {\n    const { document } = window;\n\n    // Use the site's favicon if it exists\n    let icon = document.querySelector<HTMLLinkElement>('head > link[rel=\"shortcut icon\"]');\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    // Search through available icons in no particular order\n    icon = Array.from(document.querySelectorAll<HTMLLinkElement>('head > link[rel=\"icon\"]')).find((_icon) => Boolean(_icon.href));\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    return \"\";\n  } catch (error) {\n    return \"\";\n  }\n}\n\n/**\n * Gets site metadata and returns it\n *\n */\nconst getSiteMetadata = async (): Promise<{ name: string; icon: string }> => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window),\n});\n\nexport default getSiteMetadata;\n","import { PublicKey, SendOptions, SignaturePubkeyPair, Transaction } from \"@solana/web3.js\";\nimport { COMMUNICATION_JRPC_METHODS } from \"@toruslabs/base-controllers\";\nimport { setAPIKey } from \"@toruslabs/http-helpers\";\nimport { BasePostMessageStream, getRpcPromiseCallback, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\n\nimport TorusCommunicationProvider from \"./communicationProvider\";\nimport configuration from \"./config\";\nimport { documentReady, htmlToElement } from \"./embedUtils\";\nimport TorusInPageProvider from \"./inPageProvider\";\nimport {\n  BUTTON_POSITION,\n  LOGIN_PROVIDER_TYPE,\n  NetworkInterface,\n  PAYMENT_PROVIDER_TYPE,\n  PaymentParams,\n  TORUS_BUILD_ENV,\n  TorusCtorArgs,\n  TorusLoginParams,\n  TorusParams,\n  UnValidatedJsonRpcRequest,\n  UserInfo,\n  WALLET_PATH,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport PopupHandler from \"./PopupHandler\";\nimport getSiteMetadata from \"./siteMetadata\";\nimport {\n  FEATURES_CONFIRM_WINDOW,\n  FEATURES_DEFAULT_WALLET_WINDOW,\n  FEATURES_PROVIDER_CHANGE_WINDOW,\n  getPopupFeatures,\n  getTorusUrl,\n  getWindowId,\n  storageAvailable,\n} from \"./utils\";\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst { version } = require(\"../package.json\");\nconst PROVIDER_UNSAFE_METHODS = [\"send_transaction\", \"sign_transaction\", \"sign_all_transactions\", \"sign_message\", \"connect\"];\nconst COMMUNICATION_UNSAFE_METHODS = [COMMUNICATION_JRPC_METHODS.SET_PROVIDER];\n\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\");\n\n// preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const { torusUrl } = await getTorusUrl(\"production\");\n    torusIframeHtml.href = `${torusUrl}/frame`;\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\n\nclass Torus {\n  isInitialized: boolean;\n\n  torusAlert: HTMLDivElement;\n\n  modalZIndex: number;\n\n  alertZIndex: number;\n\n  public requestedLoginProvider?: LOGIN_PROVIDER_TYPE;\n\n  provider: TorusInPageProvider;\n\n  communicationProvider: TorusCommunicationProvider;\n\n  dappStorageKey: string;\n\n  isTopupHidden = false;\n\n  private torusAlertContainer: HTMLDivElement;\n\n  private torusUrl: string;\n\n  private torusIframe: HTMLIFrameElement;\n\n  private styleLink: HTMLLinkElement;\n\n  constructor({ modalZIndex = 99999 }: TorusCtorArgs = {}) {\n    this.torusUrl = \"\";\n    this.isInitialized = false; // init done\n    this.requestedLoginProvider = null;\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.dappStorageKey = \"\";\n  }\n\n  get isLoggedIn(): boolean {\n    if (!this.communicationProvider) return false;\n    return this.communicationProvider.isLoggedIn;\n  }\n\n  async init({\n    buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n    enableLogging = false,\n    network,\n    showTorusButton = false,\n    useLocalStorage = false,\n    buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n    apiKey = \"torus-default\",\n    extraParams = {},\n    whiteLabel,\n  }: TorusParams = {}): Promise<void> {\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    setAPIKey(apiKey);\n    const { torusUrl, logLevel } = await getTorusUrl(buildEnv);\n    log.enableAll();\n    log.info(torusUrl, \"url loaded\");\n    log.info(`Solana Embed Version :${version}`);\n    this.torusUrl = torusUrl;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();\n    else log.disableAll();\n    const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";\n    else torusIframeUrl.pathname += \"/frame\";\n\n    const hashParams = new URLSearchParams();\n    if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n    hashParams.append(\"origin\", window.location.origin);\n\n    torusIframeUrl.hash = hashParams.toString();\n\n    // Iframe code\n    this.torusIframe = htmlToElement<HTMLIFrameElement>(\n      `<iframe\n        id=\"torusIframe\"\n        class=\"torusIframe\"\n        src=\"${torusIframeUrl.href}\"\n        style=\"display: none; position: fixed; top: 0; right: 0; width: 100%;\n        height: 100%; border: none; border-radius: 0; z-index: ${this.modalZIndex.toString()}\"\n      ></iframe>`\n    );\n\n    this.torusAlertContainer = htmlToElement<HTMLDivElement>(\n      `<div id=\"torusAlertContainer\" style=\"display:none; z-index: ${this.alertZIndex.toString()}\"></div>`\n    );\n\n    this.styleLink = htmlToElement<HTMLLinkElement>(`<link href=\"${torusUrl}/css/widget.css\" rel=\"stylesheet\" type=\"text/css\">`);\n    const handleSetup = async () => {\n      return new Promise<void>((resolve, reject) => {\n        try {\n          window.document.head.appendChild(this.styleLink);\n          window.document.body.appendChild(this.torusIframe);\n          window.document.body.appendChild(this.torusAlertContainer);\n          this.torusIframe.addEventListener(\"load\", async () => {\n            const dappMetadata = await getSiteMetadata();\n            // send init params here\n            this.torusIframe.contentWindow.postMessage(\n              {\n                buttonPosition,\n                apiKey,\n                network,\n                dappMetadata,\n                extraParams,\n                whiteLabel,\n              },\n              torusIframeUrl.origin\n            );\n            await this._setupWeb3({\n              torusUrl,\n            });\n            if (showTorusButton) this.showTorusButton();\n            if (whiteLabel?.topupHide) this.isTopupHidden = whiteLabel.topupHide;\n            else this.hideTorusButton();\n            this.isInitialized = true;\n            (window as any).torus = this;\n            resolve();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    };\n\n    await documentReady();\n    await handleSetup();\n  }\n\n  async login(params: TorusLoginParams = {}): Promise<string[]> {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    try {\n      this.requestedLoginProvider = params.loginProvider || null;\n      if (!this.requestedLoginProvider) {\n        this.communicationProvider._displayIframe({ isFull: true });\n      }\n      // If user is already logged in, we assume they have given access to the website\n      const res = await new Promise((resolve, reject) => {\n        // We use this method because we want to update inPage provider state with account info\n        this.provider._rpcRequest(\n          { method: \"solana_requestAccounts\", params: [this.requestedLoginProvider, params.login_hint] },\n          getRpcPromiseCallback(resolve, reject)\n        );\n      });\n\n      if (Array.isArray(res) && res.length > 0) {\n        return res;\n      }\n      // This would never happen, but just in case\n      throw new Error(\"Login failed\");\n    } catch (error) {\n      log.error(\"login failed\", error);\n      throw error;\n    } finally {\n      if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n    }\n  }\n\n  async loginWithPrivateKey(loginParams: { privateKey: string; userInfo: UserInfo }): Promise<void> {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    const { privateKey, userInfo } = loginParams;\n    const { success } = await this.communicationProvider.request<{ privateKey: string; userInfo: UserInfo }, { success: boolean }>({\n      method: \"login_with_private_key\",\n      params: {\n        privateKey,\n        userInfo,\n      },\n    });\n    if (!success) throw new Error(\"Login Failed\");\n  }\n\n  async logout(): Promise<void> {\n    if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.LOGOUT,\n      params: [],\n    });\n    this.requestedLoginProvider = null;\n  }\n\n  async cleanUp(): Promise<void> {\n    if (this.communicationProvider.isLoggedIn) {\n      await this.logout();\n    }\n    this.clearInit();\n  }\n\n  clearInit(): void {\n    function isElement(element: unknown) {\n      return element instanceof Element || element instanceof Document;\n    }\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n    this.isInitialized = false;\n  }\n\n  hideTorusButton(): void {\n    this.communicationProvider.hideTorusButton();\n  }\n\n  showTorusButton(): void {\n    this.communicationProvider.showTorusButton();\n  }\n\n  async setProvider(params: NetworkInterface): Promise<void> {\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n      params: { ...params },\n    });\n  }\n\n  async showWallet(path: WALLET_PATH, params: Record<string, string> = {}): Promise<void> {\n    const instanceId = await this.communicationProvider.request<[], string>({\n      method: COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n      params: [],\n    });\n    const finalPath = path ? `/${path}` : \"\";\n\n    const finalUrl = new URL(`${this.torusUrl}/wallet${finalPath}`);\n    // Using URL constructor to prevent js injection and allow parameter validation.!\n    finalUrl.searchParams.append(\"instanceId\", instanceId);\n    Object.keys(params).forEach((x) => {\n      finalUrl.searchParams.append(x, params[x]);\n    });\n    if (this.dappStorageKey) {\n      finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    // No need to track this window state. Hence, no _handleWindow call.\n    const walletWindow = new PopupHandler({ url: finalUrl, features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW) });\n    walletWindow.open();\n  }\n\n  async getUserInfo(): Promise<UserInfo> {\n    const userInfoResponse = await this.communicationProvider.request<[], UserInfo>({\n      method: COMMUNICATION_JRPC_METHODS.USER_INFO,\n      params: [],\n    });\n    return userInfoResponse as UserInfo;\n  }\n\n  async initiateTopup(provider: PAYMENT_PROVIDER_TYPE, params: PaymentParams): Promise<boolean> {\n    if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n    const windowId = getWindowId();\n    this.communicationProvider._handleWindow(windowId);\n    const topupResponse = await this.communicationProvider.request<\n      { provider: PAYMENT_PROVIDER_TYPE; params: PaymentParams; windowId: string },\n      boolean\n    >({\n      method: COMMUNICATION_JRPC_METHODS.TOPUP,\n      params: { provider, params, windowId },\n    });\n    return topupResponse;\n  }\n\n  // Solana specific API\n  async getAccounts() {\n    const response = (await this.provider.request({\n      method: \"getAccounts\",\n      params: [],\n    })) as string[];\n    return response;\n  }\n\n  async sendTransaction(transaction: Transaction): Promise<string> {\n    const response = (await this.provider.request({\n      method: \"send_transaction\",\n      params: { message: transaction.serialize({ requireAllSignatures: false }).toString(\"hex\") },\n    })) as string;\n    return response;\n  }\n\n  // support sendOptions\n  async signAndSendTransaction(transaction: Transaction, options?: SendOptions): Promise<{ signature: string }> {\n    const response = (await this.provider.request({\n      method: \"send_transaction\",\n      params: { message: transaction.serialize({ requireAllSignatures: false }).toString(\"hex\"), options },\n    })) as string;\n    return { signature: response };\n  }\n\n  async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const response: string = (await this.provider.request({\n      method: \"sign_transaction\",\n      params: { message: transaction.serializeMessage().toString(\"hex\"), messageOnly: true },\n    })) as string;\n\n    // reconstruct signature pair\n    const parsed = JSON.parse(response);\n    const signature: SignaturePubkeyPair = { publicKey: new PublicKey(parsed.publicKey), signature: Buffer.from(parsed.signature, \"hex\") };\n    transaction.addSignature(signature.publicKey, signature.signature);\n    return transaction;\n  }\n\n  async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n    const encodedMessage: string[] = transactions.map((tx) => {\n      return tx.serializeMessage().toString(\"hex\");\n    });\n    const responses: string[] = await this.provider.request({\n      method: \"sign_all_transactions\",\n      params: { message: encodedMessage, messageOnly: true },\n    });\n\n    // reconstruct signature pairs\n    const signatures: SignaturePubkeyPair[] = responses.map((item) => {\n      const parsed = JSON.parse(item);\n      return { publicKey: new PublicKey(parsed.publicKey), signature: Buffer.from(parsed.signature, \"hex\") };\n    });\n\n    transactions.forEach((tx, idx) => {\n      tx.addSignature(signatures[idx].publicKey, signatures[idx].signature);\n      return tx;\n    });\n    return transactions;\n  }\n\n  async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = (await this.provider.request({\n      method: \"sign_message\",\n      params: {\n        data,\n      },\n    })) as Uint8Array;\n    return response;\n  }\n\n  async getGaslessPublicKey(): Promise<string> {\n    const response = (await this.provider.request({\n      method: \"get_gasless_public_key\",\n      params: [],\n    })) as string;\n    return response;\n  }\n\n  // async connect(): Promise<boolean> {\n  //   const response = (await this.provider.request({\n  //     method: \"connect\",\n  //     params: {},\n  //   })) as boolean;\n  //   return response;\n  // }\n\n  private handleDappStorageKey(useLocalStorage: boolean) {\n    let dappStorageKey = \"\";\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const storedKey = window.localStorage.getItem(configuration.localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;\n      else {\n        const generatedKey = `torus-app-${getWindowId()}`;\n        window.localStorage.setItem(configuration.localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n    this.dappStorageKey = dappStorageKey;\n    return dappStorageKey;\n  }\n\n  private async _setupWeb3(providerParams: { torusUrl: string }): Promise<void> {\n    log.info(\"setupWeb3 running\");\n    // setup background connection\n    const providerStream = new BasePostMessageStream({\n      name: \"embed_torus\",\n      target: \"iframe_torus\",\n      targetWindow: this.torusIframe.contentWindow,\n    });\n\n    // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_communication\",\n      target: \"iframe_communication\",\n      targetWindow: this.torusIframe.contentWindow,\n    });\n\n    // compose the inPage provider\n    const inPageProvider = new TorusInPageProvider(providerStream, {});\n    const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n\n    inPageProvider.tryWindowHandle = (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW),\n        });\n        // for inPageProvider methods sending windowId in request instead of params\n        // as params might be positional.\n        _payload.windowId = windowId;\n      }\n      inPageProvider._rpcEngine.handle(_payload as JRPCRequest<unknown>[], cb);\n    };\n\n    communicationProvider.tryWindowHandle = (payload: JRPCRequest<unknown>, cb: (...args: unknown[]) => void) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW), // todo: are these features generic for all\n        });\n        // for communication methods sending window id in jrpc req params\n        (_payload.params as Record<string, unknown>).windowId = windowId;\n      }\n      communicationProvider._rpcEngine.handle(_payload as JRPCRequest<unknown>, cb);\n    };\n\n    // detect solana_requestAccounts and pipe to enable for now\n    const detectAccountRequestPrototypeModifier = (m) => {\n      const originalMethod = inPageProvider[m];\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const self = this;\n      inPageProvider[m] = function providerFunc(request, cb) {\n        const { method, params = [] } = request;\n        if (method === \"solana_requestAccounts\") {\n          if (!cb) return self.login({ loginProvider: params[0] });\n          self\n            .login({ loginProvider: params[0] })\n            // eslint-disable-next-line promise/no-callback-in-promise\n            .then((res) => cb(null, res))\n            // eslint-disable-next-line promise/no-callback-in-promise\n            .catch((err) => cb(err));\n        }\n        return originalMethod.apply(this, [request, cb]);\n      };\n    };\n\n    // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n    detectAccountRequestPrototypeModifier(\"request\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n    detectAccountRequestPrototypeModifier(\"send\");\n\n    const proxiedInPageProvider = new Proxy(inPageProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true,\n    });\n\n    const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true,\n    });\n\n    this.provider = proxiedInPageProvider;\n    this.communicationProvider = proxiedCommunicationProvider;\n\n    await Promise.all([\n      inPageProvider._initializeState(),\n      communicationProvider._initializeState({\n        ...providerParams,\n        dappStorageKey: this.dappStorageKey,\n        torusAlertContainer: this.torusAlertContainer,\n        torusIframe: this.torusIframe,\n      }),\n    ]);\n    log.debug(\"Torus - injected provider\");\n  }\n}\n\nexport default Torus;\n","module.exports = IdIterator\n\nfunction IdIterator(opts){\n  opts = opts || {}\n  var max = opts.max || Number.MAX_SAFE_INTEGER\n  var idCounter = typeof opts.start !== 'undefined' ? opts.start : Math.floor(Math.random() * max)\n\n  return function createRandomId () {\n    idCounter = idCounter % max\n    return idCounter++\n  }\n\n}"],"names":["fast_safe_stringify_1","require","EthereumRpcError","Error","constructor","code","message","data","Number","isInteger","undefined","serialize","serialized","stack","toString","default","stringifyReplacer","exports","_","value","isValidEthProviderCode","rpc","invalidInput","resourceNotFound","resourceUnavailable","transactionRejected","methodNotSupported","limitExceeded","parse","invalidRequest","methodNotFound","invalidParams","internal","provider","userRejectedRequest","unauthorized","unsupportedMethod","disconnected","chainDisconnected","standard","classes_1","utils_1","error_constants_1","getEthJsonRpcError","arg","parseOpts","getMessageFromCode","getEthProviderError","EthereumProviderError","Array","isArray","errorCodes","server","opts","custom","errors_1","FALLBACK_ERROR_CODE","FALLBACK_MESSAGE","FALLBACK_ERROR","fallbackMessage","arguments","length","codeString","hasKey","errorValues","isJsonRpcServerError","JSON_RPC_SERVER_ERROR_MESSAGE","isValidCode","assignOriginalError","error","Object","assign","obj","key","prototype","hasOwnProperty","call","fallbackError","shouldIncludeStack","_error","originalError","_a","_b","assert_1","__importDefault","externals_1","secp256k1_1","internal_1","constants_1","bytes_1","hash_1","helpers_1","types_1","Account","nonce","balance","stateRoot","codeHash","BN","KECCAK256_RLP","KECCAK256_NULL","this","_validate","fromAccountData","accountData","toBuffer","fromRlpSerializedAccount","values","rlp","decode","fromValuesArray","__read","lt","raw","bnToUnpaddedBuffer","encode","isContract","equals","isEmpty","isZero","hexAddress","assertIsString","e","test","eip1191ChainId","assertIsHexString","address","stripHexPrefix","toLowerCase","prefix","toType","TypeOutput","hash","keccakFromString","ret","i","parseInt","toUpperCase","isValidAddress","toChecksumAddress","from","assertIsBuffer","nonceBN","rlphash","slice","Buffer","toArray","salt","initCode","keccak256","concat","privateKey","privateKeyVerify","publicKey","sanitize","publicKeyVerify","pubKey","publicKeyConvert","keccak","pubToAddress","publicKeyCreate","publicToAddress","privateToPublic","addr","zeros","bufferToHex","zeroAddress","account_1","Address","buf","zero","fromString","str","fromPublicKey","isBuffer","fromPrivateKey","privateToAddress","generate","isBN","generateAddress","toArrayLike","generate2","generateAddress2","isPrecompileOrSystemAddress","addressBN","rangeMin","rangeMax","gte","lte","isSafeInteger","hex","intToHex","padToEven","bytes","allocUnsafe","fill","setLength","msg","right","copy","stripZeros","a","first","assertIsArray","v","Uint8Array","isHexString","intToBuffer","isNeg","toNumber","num","fromTwos","toTwos","isHexPrefixed","replace","ba","array","push","baToJSON","__values","entries","_c","next","done","_d","k","arrToBufArr","arr","map","bufArrToArr","buffer_1","KECCAK256_NULL_S","KECCAK256_RLP_ARRAY_S","KECCAK256_RLP_S","bn_js_1","__importStar","keccak_1","createHash","bits","keccak224","keccak384","keccak512","_sha256","update","digest","_ripemd160","padded","setLengthLeft","input","__exportStar","enumerable","get","getBinarySize","arrayContainsArray","toAscii","fromUtf8","fromAscii","getKeys","byteLength","superset","subset","some","indexOf","l","substring","substr","String","fromCharCode","stringValue","n","charCodeAt","params","allowEmpty","result","match","self","fields","_fields","toJSON","label","obj_1","forEach","field","getter","setter","allowZero","allowLess","unpadBuffer","name","defineProperty","configurable","set","alias","d","keys_1","keys","calculateSigRecovery","chainId","vBN","eqn","subn","chainIdBN","sub","muln","addn","isValidSigRecovery","recovery","rec","msgHash","ecdsaSign","signature","recid","r","s","senderPubKey","ecdsaRecover","vn","ss","sig","bufferToInt","homesteadOrLater","SECP256K1_N_DIV_2","SECP256K1_N","rBN","sBN","gt","cmp","outputType","output","bn","max","MAX_SAFE_INTEGER","serializeError","URL","noop","ACK","BasePostMessageStream","Duplex","_ref","target","targetWindow","window","targetOrigin","super","objectMode","_defineProperty","_init","_haveSyn","_name","_target","_targetWindow","_targetOrigin","_onMessage","onMessage","bind","_synIntervalId","addEventListener","_handShake","_break","cork","_write","_onData","err","emit","uncork","_postMessage","originConstraint","postMessage","event","origin","source","_read","cb","_destroy","removeEventListener","safeApply","handler","context","args","Reflect","apply","setTimeout","SafeEventEmitter","EventEmitter","type","doError","events","_events","_len","_key","er","len","listeners","arrayClone","SerializableError","stringify","getRpcPromiseCallback","resolve","reject","unwrapResult","response","createStreamMiddleware","idMap","stream","read","write","res","_encoding","id","processNotification","end","processResponse","_err","middleware","req","createIdRemapMiddleware","_end","originalId","newId","randombytes","JRPCEngine","_middleware","middlewareStack","returnHandlers","isComplete","_runMiddleware","reverse","Promise","returnHandler","handlers","handle","_handleBatch","_handle","_promiseHandle","asMiddleware","async","middlewareError","_runAllMiddleware","_runReturnHandlers","handlerCallback","reqs","responses","all","callerReq","jsonrpc","method","_objectSpread$1","_processRequest","_checkForCompletion","Substream","parent","_parent","chunk","callback","IGNORE_SUBSTREAM","Symbol","ObjectMultiplex","_objectSpread","_substreams","createStream","substream","_cb","once","eos","readable","writable","anyStreamEnd","destroy","ignoreStream","console","warn","getCreateRandomId","COMMUNICATION_NOTIFICATIONS","COMMUNICATION_JRPC_METHODS","PROVIDER_JRPC_METHODS","PROVIDER_NOTIFICATIONS","TransactionStatus","messages","permanentlyDisconnected","unsupportedSync","invalidDuplexStream","invalidOptions","maxEventListeners","invalidRequestArgs","invalidRequestMethod","invalidRequestParams","invalidLoggerObject","invalidLoggerMethod","connected","PAYMENT_PROVIDER","MOONPAY","WYRE","RAMPNETWORK","XANPOOL","MERCURYO","TRANSAK","TORUS_BUILD_ENV","PRODUCTION","DEVELOPMENT","TESTING","BUTTON_POSITION","BOTTOM_LEFT","TOP_LEFT","BOTTOM_RIGHT","TOP_RIGHT","LOGIN_PROVIDER","GOOGLE","FACEBOOK","REDDIT","DISCORD","TWITCH","APPLE","LINE","GITHUB","KAKAO","LINKEDIN","TWITTER","WEIBO","WECHAT","EMAIL_PASSWORDLESS","configuration","supportedVerifierList","api","translations","en","embed","continue","actionRequired","pendingAction","cookiesRequired","enableCookies","clickHere","de","ja","ko","zh","prodTorusUrl","localStorageKey","location","hostname","log","loglevel","getWindowId","Math","random","getTorusUrl","torusUrl","logLevel","buildEnv","FEATURES_PROVIDER_CHANGE_WINDOW","height","width","FEATURES_DEFAULT_WALLET_WINDOW","FEATURES_DEFAULT_POPUP_WINDOW","FEATURES_CONFIRM_WINDOW","getPopupFeatures","w","h","dualScreenLeft","screenLeft","screenX","dualScreenTop","screenTop","screenY","innerWidth","document","documentElement","clientWidth","screen","innerHeight","clientHeight","left","abs","top","BaseProvider","connectionStream","jsonRpcStreamName","duplex","isTorus","setMaxListeners","_handleConnect","_handleDisconnect","_handleStreamDisconnect","_rpcRequest","_initializeState","request","sendAsync","mux","pump","jsonRpcConnection","rpcEngine","options","ethErrors","isTorusInternal","_rpcEngine","jsonRpcConnectionEvents","send","payload","streamName","remoteLabel","emitter","warningMsg","listenerCount","logStreamDisconnectWarning","documentReady","readyState","eventName","handlerArgs","handlerWrapper","handleEvent","htmlToElement","html","template","createElement","trimmedHtml","trim","innerHTML","content","firstChild","PopupHandler","url","features","windowTimer","iClosedWindow","_setupTimer","setInterval","closed","clearInterval","open","_this$window","href","focus","close","redirect","locationReplaceOnRedirect","TorusCommunicationProvider","_state","_objectSpread$2","_defaultState","dappStorageKey","languageTranslations","getUserLanguage","userLanguage","navigator","language","userLanguages","split","embedTranslations","windowRefs","on","isConnected","isFullScreen","rid","_displayIframe","isFull","windowId","_createPopupBlockAlert","_handleCloseWindow","currentLoginProvider","isLoggedIn","isIFrameFullScreen","torusAlertContainer","torusIframe","info","initialized","_handleWindow","finalUrl","handledWindow","style","display","bottom","torusWidgetVisibility","buttonPosition","hideTorusButton","showTorusButton","_payload","tryWindowHandle","debug","isRecoverable","errorMessage","isPermanentlyDisconnected","logoUrl","getLogoUrl","torusAlert","successAlert","btnContainer","appendChild","attachOnLoad","bindOnLoad","remove","children","hasEmittedConnection","TorusInPageProvider","selectedAddress","_handleAccountsChanged","_handleChainChanged","_handleUnlockStateChanged","accounts","isUnlocked","isInternal","isEthAccounts","finalAccounts","account","dequal","imgExists","img","onload","onerror","src","getSiteName","siteName","querySelector","metaTitle","title","getSiteIcon","icon","querySelectorAll","find","_icon","Boolean","version","PROVIDER_UNSAFE_METHODS","COMMUNICATION_UNSAFE_METHODS","isLocalStorageAvailable","storage","x","setItem","removeItem","storageAvailable","torusIframeHtml","crossOrigin","rel","relList","supports","head","Torus","modalZIndex","isInitialized","requestedLoginProvider","alertZIndex","communicationProvider","enableLogging","network","useLocalStorage","apiKey","extraParams","whiteLabel","setAPIKey","enableAll","setDefaultLevel","disableAll","handleDappStorageKey","torusIframeUrl","pathname","endsWith","hashParams","URLSearchParams","append","styleLink","body","dappMetadata","getSiteMetadata","contentWindow","_setupWeb3","topupHide","isTopupHidden","torus","handleSetup","loginProvider","login_hint","loginParams","userInfo","success","logout","clearInit","isElement","element","Element","Document","contains","path","instanceId","finalPath","searchParams","transaction","requireAllSignatures","serializeMessage","messageOnly","parsed","JSON","PublicKey","addSignature","transactions","encodedMessage","tx","signatures","item","idx","storedKey","localStorage","getItem","generatedKey","providerParams","providerStream","communicationStream","inPageProvider","includes","detectAccountRequestPrototypeModifier","m","originalMethod","login","then","catch","proxiedInPageProvider","Proxy","deleteProperty","proxiedCommunicationProvider","module","idCounter","start","floor"],"sourceRoot":""}