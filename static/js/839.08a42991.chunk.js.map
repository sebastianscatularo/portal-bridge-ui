{"version":3,"file":"static/js/839.08a42991.chunk.js","mappings":"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","sources":["../node_modules/@ledgerhq/hw-app-eth/src/utils.ts","../node_modules/@ledgerhq/hw-app-eth/src/services/ledger/loadConfig.ts","../node_modules/@ledgerhq/hw-app-eth/src/services/ledger/contracts.ts","../node_modules/@ledgerhq/cryptoassets/src/data/evm/index.ts","../node_modules/@ledgerhq/hw-app-eth/src/services/ledger/erc20.ts","../node_modules/@ledgerhq/hw-app-eth/src/services/ledger/nfts.ts","../node_modules/@ledgerhq/hw-app-eth/src/services/ledger/index.ts","../node_modules/@ledgerhq/hw-app-eth/src/errors.ts","../node_modules/@ledgerhq/cryptoassets/src/data/eip712.ts","../node_modules/@ledgerhq/hw-app-eth/src/modules/EIP712/EIP712.utils.ts","../node_modules/@ledgerhq/hw-app-eth/src/modules/EIP712/index.ts","../node_modules/@ledgerhq/hw-app-eth/src/Eth.ts"],"sourcesContent":["import { encode, decode } from \"@ethersproject/rlp\";\nimport { BigNumber } from \"bignumber.js\";\nimport { LedgerEthTransactionResolution } from \"./services/types\";\n\nexport function splitPath(path: string): number[] {\n  const result: number[] = [];\n  const components = path.split(\"/\");\n  components.forEach((element) => {\n    let number = parseInt(element, 10);\n    if (isNaN(number)) {\n      return; // FIXME shouldn't it throws instead?\n    }\n    if (element.length > 1 && element[element.length - 1] === \"'\") {\n      number += 0x80000000;\n    }\n    result.push(number);\n  });\n  return result;\n}\n\nexport function hexBuffer(str: string): Buffer {\n  return Buffer.from(str.startsWith(\"0x\") ? str.slice(2) : str, \"hex\");\n}\n\nexport function maybeHexBuffer(\n  str: string | null | undefined\n): Buffer | null | undefined {\n  if (!str) return null;\n  return hexBuffer(str);\n}\n\nexport const decodeTxInfo = (rawTx: Buffer) => {\n  const VALID_TYPES = [1, 2];\n  const txType = VALID_TYPES.includes(rawTx[0]) ? rawTx[0] : null;\n  const rlpData = txType === null ? rawTx : rawTx.slice(1);\n  const rlpTx = decode(rlpData).map((hex) => Buffer.from(hex.slice(2), \"hex\"));\n  let chainIdTruncated = 0;\n  const rlpDecoded = decode(rlpData);\n\n  let decodedTx;\n  if (txType === 2) {\n    // EIP1559\n    decodedTx = {\n      data: rlpDecoded[7],\n      to: rlpDecoded[5],\n      chainId: rlpTx[0],\n    };\n  } else if (txType === 1) {\n    // EIP2930\n    decodedTx = {\n      data: rlpDecoded[6],\n      to: rlpDecoded[4],\n      chainId: rlpTx[0],\n    };\n  } else {\n    // Legacy tx\n    decodedTx = {\n      data: rlpDecoded[5],\n      to: rlpDecoded[3],\n      // Default to 1 for non EIP 155 txs\n      chainId: rlpTx.length > 6 ? rlpTx[6] : Buffer.from(\"0x01\", \"hex\"),\n    };\n  }\n\n  const chainIdSrc = decodedTx.chainId;\n  let chainId = new BigNumber(0);\n  if (chainIdSrc) {\n    // Using BigNumber because chainID could be any uint256.\n    chainId = new BigNumber(chainIdSrc.toString(\"hex\"), 16);\n    const chainIdTruncatedBuf = Buffer.alloc(4);\n    if (chainIdSrc.length > 4) {\n      chainIdSrc.copy(chainIdTruncatedBuf);\n    } else {\n      chainIdSrc.copy(chainIdTruncatedBuf, 4 - chainIdSrc.length);\n    }\n    chainIdTruncated = chainIdTruncatedBuf.readUInt32BE(0);\n  }\n\n  let vrsOffset = 0;\n  if (txType === null && rlpTx.length > 6) {\n    const rlpVrs = Buffer.from(encode(rlpTx.slice(-3)).slice(2), \"hex\");\n\n    vrsOffset = rawTx.length - (rlpVrs.length - 1);\n\n    // First byte > 0xf7 means the length of the list length doesn't fit in a single byte.\n    if (rlpVrs[0] > 0xf7) {\n      // Increment vrsOffset to account for that extra byte.\n      vrsOffset++;\n\n      // Compute size of the list length.\n      const sizeOfListLen = rlpVrs[0] - 0xf7;\n\n      // Increase rlpOffset by the size of the list length.\n      vrsOffset += sizeOfListLen - 1;\n    }\n  }\n\n  return {\n    decodedTx,\n    txType,\n    chainId,\n    chainIdTruncated,\n    vrsOffset,\n  };\n};\n\n/**\n * @ignore for the README\n *\n * Helper to convert an integer as a hexadecimal string with the right amount of digits\n * to respect the number of bytes given as parameter\n *\n * @param int Integer\n * @param bytes Number of bytes it should be represented as (1 byte = 2 caraters)\n * @returns The given integer as an hexa string padded with the right number of 0\n */\nexport const intAsHexBytes = (int: number, bytes: number): string =>\n  int.toString(16).padStart(2 * bytes, \"0\");\n\n/**\n * @ignore for the README\n *\n * List of selectors (hexadecimal representation of the used method's signature) related to\n * ERC20 (Tokens), ERC721/ERC1155 (NFT).\n * You can verify and/or get more info about them on http://4byte.directory\n */\n\nexport enum ERC20_CLEAR_SIGNED_SELECTORS {\n  APPROVE = \"0x095ea7b3\",\n  TRANSFER = \"0xa9059cbb\",\n}\n\nexport enum ERC721_CLEAR_SIGNED_SELECTORS {\n  APPROVE = \"0x095ea7b3\",\n  SET_APPROVAL_FOR_ALL = \"0xa22cb465\",\n  TRANSFER_FROM = \"0x23b872dd\",\n  SAFE_TRANSFER_FROM = \"0x42842e0e\",\n  SAFE_TRANSFER_FROM_WITH_DATA = \"0xb88d4fde\",\n}\n\nexport enum ERC1155_CLEAR_SIGNED_SELECTORS {\n  SET_APPROVAL_FOR_ALL = \"0xa22cb465\",\n  SAFE_TRANSFER_FROM = \"0xf242432a\",\n  SAFE_BATCH_TRANSFER_FROM = \"0x2eb2c2d6\",\n}\n\nexport const tokenSelectors = Object.values(ERC20_CLEAR_SIGNED_SELECTORS);\nexport const nftSelectors = [\n  ...Object.values(ERC721_CLEAR_SIGNED_SELECTORS),\n  ...Object.values(ERC1155_CLEAR_SIGNED_SELECTORS),\n];\n\nexport const mergeResolutions = (\n  oldResolution: Partial<LedgerEthTransactionResolution>,\n  newResolution: Partial<LedgerEthTransactionResolution>\n): LedgerEthTransactionResolution => {\n  const resolutions: LedgerEthTransactionResolution = {\n    nfts: [],\n    erc20Tokens: [],\n    externalPlugin: [],\n    plugin: [],\n  };\n\n  for (const key in oldResolution) {\n    resolutions[key].push(...oldResolution[key]);\n  }\n\n  for (const key in newResolution) {\n    resolutions[key].push(...newResolution[key]);\n  }\n\n  return resolutions;\n};\n","import type { LoadConfig } from \"../types\";\n\nconst defaultLoadConfig = {\n  nftExplorerBaseURL: \"https://nft.api.live.ledger.com/v1/ethereum\",\n  pluginBaseURL: \"https://cdn.live.ledger.com\",\n  extraPlugins: null,\n  cryptoassetsBaseURL: \"https://cdn.live.ledger.com/cryptoassets\",\n};\n\nexport function getLoadConfig(userLoadConfig?: LoadConfig): LoadConfig {\n  return {\n    ...defaultLoadConfig,\n    ...userLoadConfig,\n  };\n}\n","import axios from \"axios\";\nimport { getLoadConfig } from \"./loadConfig\";\nimport type { LoadConfig } from \"../types\";\nimport { log } from \"@ledgerhq/logs\";\n\ntype ContractMethod = {\n  payload: string;\n  signature: string;\n  plugin: string;\n  erc20OfInterest: string[];\n  abi: any;\n};\n\n/**\n * Retrieve the metadatas a given contract address and a method selector\n */\nexport const loadInfosForContractMethod = async (\n  contractAddress: string,\n  selector: string,\n  chainId: number,\n  userLoadConfig: LoadConfig\n): Promise<ContractMethod | undefined> => {\n  const { pluginBaseURL, extraPlugins } = getLoadConfig(userLoadConfig);\n\n  let data = {};\n\n  if (pluginBaseURL) {\n    const url = `${pluginBaseURL}/plugins/ethereum.json`;\n    data = await axios\n      .get(`${pluginBaseURL}/plugins/ethereum.json`)\n      .then((r) => r.data as any)\n      .catch((e) => {\n        log(\"error\", \"could not fetch from \" + url + \": \" + String(e));\n        return null;\n      });\n  }\n\n  if (extraPlugins) {\n    data = { ...data, ...extraPlugins };\n  }\n\n  if (!data) return;\n\n  const lcSelector = selector.toLowerCase();\n  const lcContractAddress = contractAddress.toLowerCase();\n\n  if (lcContractAddress in data) {\n    const contractSelectors = data[lcContractAddress];\n\n    if (lcSelector in contractSelectors) {\n      return {\n        payload: contractSelectors[lcSelector][\"serialized_data\"],\n        signature: contractSelectors[lcSelector][\"signature\"],\n        plugin: contractSelectors[lcSelector][\"plugin\"],\n        erc20OfInterest: contractSelectors[lcSelector][\"erc20OfInterest\"],\n        abi: contractSelectors[\"abi\"],\n      };\n    }\n  }\n};\n","import arbitrum_tokens from \"./42161/erc20.json\";\nimport arbitrum_goerli_tokens from \"./421613/erc20.json\";\nimport bsc_tokens from \"./56/erc20.json\";\nimport cronos_tokens from \"./25/erc20.json\";\nimport ethereum_tokens from \"./1/erc20.json\";\nimport ethereum_goerli_tokens from \"./5/erc20.json\";\nimport ethereum_rinkeby_tokens from \"./4/erc20.json\";\nimport ethereum_ropsten_tokens from \"./3/erc20.json\";\nimport ethereum_sepolia_tokens from \"./11155111/erc20.json\";\nimport fantom_tokens from \"./250/erc20.json\";\nimport flare_tokens from \"./14/erc20.json\";\nimport moonbeam_tokens from \"./1284/erc20.json\";\nimport optimism_tokens from \"./10/erc20.json\";\nimport optimism_goerli_tokens from \"./420/erc20.json\";\nimport polygon_tokens from \"./137/erc20.json\";\nimport songbird_tokens from \"./19/erc20.json\";\nimport arbitrum_signatures from \"./42161/erc20-signatures.json\";\nimport arbitrum_goerli_signatures from \"./421613/erc20-signatures.json\";\nimport bsc_signatures from \"./56/erc20-signatures.json\";\nimport cronos_signatures from \"./25/erc20-signatures.json\";\nimport ethereum_signatures from \"./1/erc20-signatures.json\";\nimport ethereum_goerli_signatures from \"./5/erc20-signatures.json\";\nimport ethereum_rinkeby_signatures from \"./4/erc20-signatures.json\";\nimport ethereum_ropsten_signatures from \"./3/erc20-signatures.json\";\nimport ethereum_sepolia_signatures from \"./11155111/erc20-signatures.json\";\nimport fantom_signatures from \"./250/erc20-signatures.json\";\nimport flare_signatures from \"./14/erc20-signatures.json\";\nimport moonbeam_signatures from \"./1284/erc20-signatures.json\";\nimport optimism_signatures from \"./10/erc20-signatures.json\";\nimport optimism_goerli_signatures from \"./420/erc20-signatures.json\";\nimport polygon_signatures from \"./137/erc20-signatures.json\";\nimport songbird_signatures from \"./19/erc20-signatures.json\";\n\nexport const tokens = {\n  42161: arbitrum_tokens,\n  421613: arbitrum_goerli_tokens,\n  56: bsc_tokens,\n  25: cronos_tokens,\n  1: ethereum_tokens,\n  5: ethereum_goerli_tokens,\n  4: ethereum_rinkeby_tokens,\n  3: ethereum_ropsten_tokens,\n  11155111: ethereum_sepolia_tokens,\n  250: fantom_tokens,\n  14: flare_tokens,\n  1284: moonbeam_tokens,\n  10: optimism_tokens,\n  420: optimism_goerli_tokens,\n  137: polygon_tokens,\n  19: songbird_tokens,\n};\n\nexport const signatures = {\n  42161: arbitrum_signatures,\n  421613: arbitrum_goerli_signatures,\n  56: bsc_signatures,\n  25: cronos_signatures,\n  1: ethereum_signatures,\n  5: ethereum_goerli_signatures,\n  4: ethereum_rinkeby_signatures,\n  3: ethereum_ropsten_signatures,\n  11155111: ethereum_sepolia_signatures,\n  250: fantom_signatures,\n  14: flare_signatures,\n  1284: moonbeam_signatures,\n  10: optimism_signatures,\n  420: optimism_goerli_signatures,\n  137: polygon_signatures,\n  19: songbird_signatures,\n};\n\nexport default {\n  tokens,\n  signatures,\n};\n","import axios from \"axios\";\nimport { log } from \"@ledgerhq/logs\";\nimport { signatures as signaturesByChainId } from \"@ledgerhq/cryptoassets/data/evm/index\";\nimport { getLoadConfig } from \"./loadConfig\";\nimport { LoadConfig } from \"../types\";\n\nconst asContractAddress = (addr: string) => {\n  const a = addr.toLowerCase();\n  return a.startsWith(\"0x\") ? a : \"0x\" + a;\n};\n\nexport const findERC20SignaturesInfo = async (\n  userLoadConfig: LoadConfig,\n  chainId: number\n): Promise<string | null> => {\n  const { cryptoassetsBaseURL } = getLoadConfig(userLoadConfig);\n  if (!cryptoassetsBaseURL) return null;\n\n  const url = `${cryptoassetsBaseURL}/evm/${chainId}/erc20-signatures.json`;\n  const blob = await axios\n    .get<string>(url)\n    .then(({ data }) => {\n      if (!data || typeof data !== \"string\") {\n        throw new Error(\n          `ERC20 signatures for chainId ${chainId} file is malformed ${url}`\n        );\n      }\n      return data;\n    })\n    .catch((e) => {\n      log(\"error\", \"could not fetch from \" + url + \": \" + String(e));\n      return null;\n    });\n\n  return blob;\n};\n\n/**\n * Retrieve the token information by a given contract address if any\n */\nexport const byContractAddressAndChainId = (\n  contract: string,\n  chainId: number,\n  erc20SignaturesBlob?: string | null\n): ReturnType<API[\"byContractAndChainId\"]> => {\n  // If we are able to fetch data from s3 bucket that contains dynamic CAL\n  if (erc20SignaturesBlob) {\n    try {\n      return parse(erc20SignaturesBlob).byContractAndChainId(\n        asContractAddress(contract),\n        chainId\n      );\n    } catch (e) {\n      return get(chainId)?.byContractAndChainId(\n        asContractAddress(contract),\n        chainId\n      );\n    }\n  }\n\n  // the static fallback when dynamic cal is not provided\n  return get(chainId)?.byContractAndChainId(\n    asContractAddress(contract),\n    chainId\n  );\n};\n\nexport type TokenInfo = {\n  contractAddress: string;\n  ticker: string;\n  decimals: number;\n  chainId: number;\n  signature: Buffer;\n  data: Buffer;\n};\nexport type API = {\n  byContractAndChainId: (\n    addr: string,\n    id: number\n  ) => TokenInfo | null | undefined;\n  list: () => TokenInfo[];\n};\n\nconst parse = (erc20SignaturesBlob: string): API => {\n  const buf = Buffer.from(erc20SignaturesBlob, \"base64\");\n  const map = {};\n  const entries: TokenInfo[] = [];\n  let i = 0;\n\n  while (i < buf.length) {\n    const length = buf.readUInt32BE(i);\n    i += 4;\n    const item = buf.slice(i, i + length);\n    let j = 0;\n    const tickerLength = item.readUInt8(j);\n    j += 1;\n    const ticker = item.slice(j, j + tickerLength).toString(\"ascii\");\n    j += tickerLength;\n    const contractAddress = asContractAddress(\n      item.slice(j, j + 20).toString(\"hex\")\n    );\n    j += 20;\n    const decimals = item.readUInt32BE(j);\n    j += 4;\n    const chainId = item.readUInt32BE(j);\n    j += 4;\n    const signature = item.slice(j);\n    const entry: TokenInfo = {\n      ticker,\n      contractAddress,\n      decimals,\n      chainId,\n      signature,\n      data: item,\n    };\n    entries.push(entry);\n    map[String(chainId) + \":\" + contractAddress] = entry;\n    i += length;\n  }\n\n  return {\n    list: () => entries,\n    byContractAndChainId: (contractAddress, chainId) =>\n      map[String(chainId) + \":\" + contractAddress],\n  };\n};\n\n// this internal get() will lazy load and cache the data from the erc20 data blob\nconst get: (chainId: number) => API | null = (() => {\n  const cache: Record<number, API> = {};\n  return (chainId) => {\n    if (cache[chainId]) return cache[chainId];\n\n    const signatureBlob: string | undefined = signaturesByChainId[chainId];\n    if (!signatureBlob) return null;\n\n    const api = parse(signatureBlob);\n    cache[chainId] = api;\n    return api;\n  };\n})();\n","import axios from \"axios\";\nimport { getLoadConfig } from \"./loadConfig\";\nimport type { LoadConfig } from \"../types\";\nimport { log } from \"@ledgerhq/logs\";\n\ntype NftInfo = {\n  contractAddress: string;\n  collectionName: string;\n  data: string;\n};\n\ntype BackendResponse = {\n  payload: string;\n};\n\nexport const getNFTInfo = async (\n  contractAddress: string,\n  chainId: number,\n  userLoadConfig: LoadConfig\n): Promise<NftInfo | undefined> => {\n  const { nftExplorerBaseURL } = getLoadConfig(userLoadConfig);\n  if (!nftExplorerBaseURL) return;\n  const url = `${nftExplorerBaseURL}/${chainId}/contracts/${contractAddress}`;\n  const response = await axios\n    .get<BackendResponse>(url)\n    .then((r) => r.data)\n    .catch((e) => {\n      log(\"error\", \"could not fetch from \" + url + \": \" + String(e));\n      return null;\n    });\n  if (!response) return;\n\n  // APDU response specification: https://ledgerhq.atlassian.net/wiki/spaces/WALLETCO/pages/3269984297/NFT-1+NFT+Backend+design#NFT-Metadata-BLOB\n  const payload = response[\"payload\"];\n  // Collection name length position: 3rd byte -> caracter 4 to 6\n  const collectionNameLength = parseInt(payload.slice(4, 6), 16);\n  const collectionNameHex = payload.substr(6, collectionNameLength * 2);\n  const collectionName = collectionNameHex\n    .match(/.{2}/g) // split every 2 characters\n    ?.reduce(\n      (acc, curr) => (acc += String.fromCharCode(parseInt(curr, 16))),\n      \"\"\n    ); // convert hex to string\n\n  return {\n    contractAddress: contractAddress,\n    collectionName: collectionName || \"\",\n    data: payload,\n  };\n};\n\nexport const loadNftPlugin = async (\n  contractAddress: string,\n  selector: string,\n  chainId: number,\n  userLoadConfig: LoadConfig\n): Promise<string | undefined> => {\n  const { nftExplorerBaseURL } = getLoadConfig(userLoadConfig);\n  if (!nftExplorerBaseURL) return;\n  const url = `${nftExplorerBaseURL}/${chainId}/contracts/${contractAddress}/plugin-selector/${selector}`;\n\n  const response = await axios\n    .get<BackendResponse>(url)\n    .then((r) => r.data)\n    .catch((e) => {\n      log(\"error\", \"could not fetch from \" + url + \": \" + String(e));\n      return null;\n    });\n  if (!response) return;\n\n  const payload = response[\"payload\"];\n  return payload;\n};\n","// This implements the resolution of a Transaction using Ledger's own API\nimport { log } from \"@ledgerhq/logs\";\nimport { Interface } from \"@ethersproject/abi\";\n\nimport {\n  LedgerEthTransactionResolution,\n  LedgerEthTransactionService,\n  LoadConfig,\n} from \"../types\";\nimport { loadInfosForContractMethod } from \"./contracts\";\nimport { byContractAddressAndChainId, findERC20SignaturesInfo } from \"./erc20\";\nimport { getNFTInfo, loadNftPlugin } from \"./nfts\";\nimport {\n  decodeTxInfo,\n  tokenSelectors,\n  nftSelectors,\n  mergeResolutions,\n} from \"../../utils\";\n\ntype potentialResolutions = {\n  token: boolean | undefined;\n  nft: boolean | undefined;\n  externalPlugins: boolean | undefined;\n};\n\n/**\n * @ignore for external documentation\n *\n * Providing additionnal data for some transactions (Token or NFT related) can enable clear signing\n * of initially impossible to decode data.\n * This method will add necessary APDUs to the resolution paramter in order to provide this data to the nano app\n */\nconst getAdditionalDataForContract = async (\n  contractAddress: string,\n  chainIdTruncated: number,\n  loadConfig: LoadConfig,\n  shouldResolve: potentialResolutions\n): Promise<Pick<LedgerEthTransactionResolution, \"nfts\" | \"erc20Tokens\">> => {\n  const resolution: Pick<\n    LedgerEthTransactionResolution,\n    \"nfts\" | \"erc20Tokens\"\n  > = {\n    nfts: [],\n    erc20Tokens: [],\n  };\n\n  if (shouldResolve.nft) {\n    const nftInfo = await getNFTInfo(\n      contractAddress,\n      chainIdTruncated,\n      loadConfig\n    );\n\n    if (nftInfo) {\n      log(\n        \"ethereum\",\n        \"loaded nft info for \" +\n          nftInfo.contractAddress +\n          \" (\" +\n          nftInfo.collectionName +\n          \")\"\n      );\n      resolution.nfts.push(nftInfo.data);\n    } else {\n      log(\"ethereum\", \"couldn't load nft info for \" + contractAddress);\n    }\n  }\n\n  if (shouldResolve.token) {\n    const erc20SignaturesBlob = await findERC20SignaturesInfo(\n      loadConfig,\n      chainIdTruncated\n    );\n    const erc20Info = byContractAddressAndChainId(\n      contractAddress,\n      chainIdTruncated,\n      erc20SignaturesBlob\n    );\n\n    if (erc20Info) {\n      log(\n        \"ethereum\",\n        \"loaded erc20token info for \" +\n          erc20Info.contractAddress +\n          \" (\" +\n          erc20Info.ticker +\n          \")\"\n      );\n      resolution.erc20Tokens.push(erc20Info.data.toString(\"hex\"));\n    } else {\n      log(\"ethereum\", \"couldn't load erc20token info for \" + contractAddress);\n    }\n  }\n\n  return resolution;\n};\n\n/**\n * @ignore for external documentation\n *\n * Depending on the transaction, it might be necessary to load internal plugins in the nano app\n * in order to clear sign it.\n * This method will add necessary APDUs to the resolution parameter in order to load those internal plugins\n */\nconst loadNanoAppPlugins = async (\n  contractAddress: string,\n  selector: string,\n  decodedTx,\n  chainIdTruncated: number,\n  loadConfig: LoadConfig,\n  shouldResolve: potentialResolutions\n): Promise<LedgerEthTransactionResolution> => {\n  let resolution: LedgerEthTransactionResolution = {\n    externalPlugin: [],\n    plugin: [],\n    nfts: [],\n    erc20Tokens: [],\n  };\n\n  if (shouldResolve.nft) {\n    const nftPluginPayload = await loadNftPlugin(\n      contractAddress,\n      selector,\n      chainIdTruncated,\n      loadConfig\n    );\n\n    if (nftPluginPayload) {\n      resolution.plugin.push(nftPluginPayload);\n    } else {\n      log(\n        \"ethereum\",\n        \"no NFT plugin payload for selector \" +\n          selector +\n          \" and address \" +\n          contractAddress\n      );\n    }\n  }\n\n  if (shouldResolve.externalPlugins) {\n    const contractMethodInfos = await loadInfosForContractMethod(\n      contractAddress,\n      selector,\n      chainIdTruncated,\n      loadConfig\n    );\n\n    if (contractMethodInfos) {\n      const { plugin, payload, signature, erc20OfInterest, abi } =\n        contractMethodInfos;\n\n      if (plugin) {\n        log(\"ethereum\", \"found plugin for \" + selector);\n        resolution.externalPlugin.push({ payload, signature });\n      }\n\n      if (erc20OfInterest && erc20OfInterest.length && abi) {\n        const contract = new Interface(abi);\n        const args = contract.parseTransaction(decodedTx).args;\n\n        for (const path of erc20OfInterest) {\n          const erc20ContractAddress = path.split(\".\").reduce((value, seg) => {\n            if (seg === \"-1\" && Array.isArray(value)) {\n              return value[value.length - 1];\n            }\n            return value[seg];\n          }, args) as unknown as string; // impossible(?) to type correctly as the initializer is different from the returned type\n\n          const externalPluginResolution = await getAdditionalDataForContract(\n            erc20ContractAddress,\n            chainIdTruncated,\n            loadConfig,\n            {\n              nft: false,\n              externalPlugins: false,\n              token: true, // enforcing resolution of tokens for external plugins that need info on assets (e.g. for a swap)\n            }\n          );\n          resolution = mergeResolutions(resolution, externalPluginResolution);\n        }\n      }\n    } else {\n      log(\"ethereum\", \"no infos for selector \" + selector);\n    }\n  }\n\n  return resolution;\n};\n\nconst ledgerService: LedgerEthTransactionService = {\n  resolveTransaction: async (rawTxHex, loadConfig, resolutionConfig) => {\n    const rawTx = Buffer.from(rawTxHex, \"hex\");\n    const { decodedTx, chainIdTruncated } = decodeTxInfo(rawTx);\n\n    const contractAddress = decodedTx.to;\n    const selector =\n      decodedTx.data.length >= 10 && decodedTx.data.substring(0, 10);\n\n    let pluginsResolution: Partial<LedgerEthTransactionResolution> = {};\n    let contractResolution: Partial<LedgerEthTransactionResolution> = {};\n    if (selector) {\n      const shouldResolve: potentialResolutions = {\n        token: resolutionConfig.erc20 && tokenSelectors.includes(selector),\n        nft: resolutionConfig.nft && nftSelectors.includes(selector),\n        externalPlugins: resolutionConfig.externalPlugins,\n      };\n\n      pluginsResolution = await loadNanoAppPlugins(\n        contractAddress,\n        selector,\n        decodedTx,\n        chainIdTruncated,\n        loadConfig,\n        shouldResolve\n      );\n\n      contractResolution = await getAdditionalDataForContract(\n        contractAddress,\n        chainIdTruncated,\n        loadConfig,\n        shouldResolve\n      );\n    }\n\n    return mergeResolutions(pluginsResolution, contractResolution);\n  },\n};\n\nexport default ledgerService;\n","import { createCustomErrorClass } from \"@ledgerhq/errors\";\n\nexport const EthAppPleaseEnableContractData = createCustomErrorClass(\n  \"EthAppPleaseEnableContractData\"\n);\nexport const EthAppNftNotSupported = createCustomErrorClass(\n  \"EthAppNftNotSupported\"\n);\n","export default {\"1:0x7f268357a8c2552623316e2562d90e642bb538e5:d8e4f2bd77f7562e99ea5df4adb127291a2bfbc225ae55450038f27f\":{\"contractName\":{\"label\":\"OpenSea Listing\",\"signature\":\"304402205f01e62b2331ecb9f1cb3f49a764d66015937cb20cb4c3af625146905ca4832402205076eeb4a74619b4552278836b548c8e525813faa9008399e43bfed7db016408\"},\"fields\":[{\"label\":\"Contract address\",\"path\":\"exchange\",\"signature\":\"3044022069df3b1c82dda9849a3df4cd0dd263d2b6c35e4fb8946865a35f5555830971b802201880d72b3d956867b597a2f5097d7f8799bad6e636d3de4030515634bba47155\"},{\"label\":\"Price\",\"path\":\"basePrice\",\"signature\":\"3045022100db49dbd8426193b6012781f43c3b445d1cf845d99d738091c1f068951728333402204326a2da5203f25deec049deba760bb31a86507c73fe6828c68e0db2eabfc966\"},{\"label\":\"Offer expiration\",\"path\":\"expirationTime\",\"signature\":\"3045022100e71a4921740fcdf4e489c517fc82f9b7e83cfbd675dff318acb91fbf8eaf175402203fac43650771c6523dad8d995ef414d035a92d262a9cf95885ef2704337a2382\"}]},\"1:0xe92b586627cca7a83dc919cc7127196d70f55a06:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3\":{\"contractName\":{\"label\":\"AugustusRFQ ERC20 order\",\"signature\":\"3044022043fb323d3a064faa38bcabad3a3f797dff60f55b49c19e350a9d0b1f980818e202205c3dc14efcc49adf915f195ff29fa02dfd9d08fca532b76086e501f9e0d133ed\"},\"fields\":[{\"label\":\"Nonce and metadata\",\"path\":\"nonceAndMeta\",\"signature\":\"304402205b674138eb50ddbfdd05768f2c641109f6c8f341d27e10ea12d59e083746cb330220521d739a49ee57ff9a41cf00adc631d3dd33e9ce2b23ce50759fb33c0ffce0a5\"},{\"label\":\"Expiration time\",\"path\":\"expiry\",\"signature\":\"304402203ba8d470649ae7cb5d02764fa48899ec0414075ed85cb9fd95e89ac5b3bb073e02200183233f30de996a8b87417a6febcbb56a544c38fd62b6f7702efa7e0d7b2ee3\"},{\"label\":\"Maker asset address\",\"path\":\"makerAsset\",\"signature\":\"304402206f3c4055bd431c1ceddce5b147c3b5acec950b267205da655fb3d331b9c070830220570c9cfdcc02b10abbf9a335ab6a4067ab7cae2ae8a443f795225a7c3981cc0a\"},{\"label\":\"Taker asset address\",\"path\":\"takerAsset\",\"signature\":\"3045022100fb93cbca6ee524729b138319a92316a37c56ae5f89b3d652af7f680c3f160df002203d1fc525b11cd30d2907f844d7774f49995b2be7e3ba2896dcd4a6e73c8a59d5\"},{\"label\":\"Maker address\",\"path\":\"maker\",\"signature\":\"3044022002e75adf4733bf28d532647c54fb0000415737db37b7e5674f9bb20179d01eea02203834ebcfe81d98e745572349bb0da4ffdc8ec846d35e3812119e9a3491462724\"},{\"label\":\"Taker address\",\"path\":\"taker\",\"signature\":\"3045022100966a77a69a7e0c060f154a8c7ed36087d8ba7da111d9bacc90b873421fe6a75c02207d92956d938a966cb98ddb6e8b3a56e4d8e7725182cf1bb02f03f67512460485\"},{\"label\":\"Maker amount\",\"path\":\"makerAmount\",\"signature\":\"304402207ece45c0993fa46316022cffbdf64307cef2caede370f27fdfd78471c3550dd002200da74e8b3b5201e654e7e4674f7471a333a104288fdf8cf80fc3122126113d1b\"},{\"label\":\"Taker amount\",\"path\":\"takerAmount\",\"signature\":\"3044022014183f10973ddc0ccb12472d2437e33f368f627b99022735044e5c4ebb4e345802203a3f5e8aa5c928981d2dabd0442342c605db1626dcd0d3ad5e3afcd98bb8c673\"}]},\"1:0xe92b586627cca7a83dc919cc7127196d70f55a06:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623\":{\"contractName\":{\"label\":\"AugustusRFQ NFT order\",\"signature\":\"304402206dfa1d54ee0a7ab236252618a5fac9c752152304f31838eab4ba4c6d2d3f844b02206658b1e9b2503577619080909be0f4c1d2a899b3d0085ed8c3f2a4309762dd94\"},\"fields\":[{\"label\":\"Nonce and metadata\",\"path\":\"nonceAndMeta\",\"signature\":\"3045022100ed9b0b91a8cace4d312f6d1bab076c057e954a9cd33c3dc5c350d030e41edd230220230e3050131157f6fc2fc578df7b1108f69d55d25ab837c661045877b148765b\"},{\"label\":\"Expiration time\",\"path\":\"expiry\",\"signature\":\"304402205d4913092612fe78d75c181f3ed28ac7808e25ab0131e73bebd91c08aac65e7902203d63f1fd4d5cc11b1f8aa2af0ec6a8440a0ed59d440237bce96ed87874c2a26d\"},{\"label\":\"Maker asset encoded\",\"path\":\"makerAsset\",\"signature\":\"304402205f9fb08bef206518e5bf48cb7fd968709a0ae317e903d9c87a41c934a0983af3022066264858ae4a1338d4daa1b4f9dc7376335ce9e57d4bed320b0d4c27a0012deb\"},{\"label\":\"Maker asset NFT ID\",\"path\":\"makerAssetId\",\"signature\":\"3045022100ac653732f2acece7c47588bfff9a1059dc69bd3fa7e387cfef8246eb0ae2a70902204ffd7f89cd7223f8e52b7c44b02ac4fa1d06017015304f1a3a7459b20d54a5e7\"},{\"label\":\"Taker asset encoded\",\"path\":\"takerAsset\",\"signature\":\"30450221008e59dfbed2dd4d1e2738b829d7a57fa23be737b652c0b01299f3d9482174aea80220138c8e948becda6dc1e7564358e574e7ac8d7016f2a1795059977f401535b27f\"},{\"label\":\"Taker asset NFT ID\",\"path\":\"takerAssetId\",\"signature\":\"304402203408e2bf0210fa4454baf46374cf876299578df056ddaaf5a907306804ca41cb0220056f910e3c500e4a8f55d5c09dceed9753a2ca7b49a9ade1955a598f4e64d657\"},{\"label\":\"Maker address\",\"path\":\"maker\",\"signature\":\"3045022100ce5db907819f4f36c77f1e3a849a3a6ac9483970128998d5add5941e1fcf6dc102200e1f26e08a3f48ef6fe1d40a4149cb8603c5e70e076755ddcf76894d31f2adc0\"},{\"label\":\"Taker address\",\"path\":\"taker\",\"signature\":\"30440220015799beef248e4eb12f95368ef44cfbaf65e43da1a4110623006e46157ab22c022055f962e02e4cbdc05bab79cfbee523da8ff9d16529c4e98755b15d45bb34a16b\"},{\"label\":\"Maker amount\",\"path\":\"makerAmount\",\"signature\":\"30450221008048cec54417376b3a659e3aeeb349a4352751a099443ea203b59e9d2cd954b702201b32704d89bd028a6794ef315bf2a204b7293f547d14282440f5aea041a27ee1\"},{\"label\":\"Taker amount\",\"path\":\"takerAmount\",\"signature\":\"3045022100dad584a953b3c56c67913e76f1a6626cb72620e23bd16f41b2817a95ddb0bccb02206189e3b49d9f3475bd52baff2a40c7f026daf1d2dad9cfaa403eb08030836090\"}]},\"1:0x7f19564c35c681099c0c857a7141836cf7edaa53:139c059f886c2b9b41f05a6c4ec2578a048d18aaadbc095609e5df4b\":{\"contractName\":{\"label\":\"List Order\",\"signature\":\"3045022100cfd82c26631445df34b327b31ad55ad7f26e0480ea7838ae83274ad83b8f9cd1022044b5a3db6b6052a5b818b1bc6cb28d523115033ca7ab3c4a269ec37e3cde890f\"},\"fields\":[{\"label\":\"Order maker address\",\"path\":\"maker\",\"signature\":\"30450221008ab1ef7012cf407a80348d6be16a98d375bf959de72f260cb92520dbb30fc2ce02200d9c0e02c8375d94077ebe16c849df5745654a1c499100286201407be47688f9\"},{\"label\":\"Order make asset value\",\"path\":\"makeAsset.value\",\"signature\":\"3044022018c3ea3b1768f348094f151f8e28171d1325d5cc1621478b23474f4695acf2d3022040ad4bb4c8c138857e426128488ee5a3df8fa0a7cfaf58e9858765a0f72a8a02\"},{\"label\":\"Order taker address\",\"path\":\"taker\",\"signature\":\"30440220482e1c1439ea879f243fdd47cf043bd271c7fb73ba095463e920ab34c38076c002207c095ec3307fa3a3ebcd125238caf3f7c50d196db444559d31c79916e514f370\"},{\"label\":\"Order take asset value\",\"path\":\"takeAsset.value\",\"signature\":\"304402205d33c23ab575fa613d37d7fabaa719f5aa4dacf8de0f299e83dd189eeabfc31d0220535f67346b8ed7d175193929aebead42b92921465c1474f482fce88bfd00323a\"},{\"label\":\"Order start time\",\"path\":\"start\",\"signature\":\"3045022100c178033effb772f141b46a9d5b5bcfc48468c6e5c499d8865043535947b1bb490220687dc9018a38c62e01c91e90fecf9e18febe995267d1bea27d3368f12f04bc9b\"},{\"label\":\"Order end time\",\"path\":\"end\",\"signature\":\"3044022074ecdea3c58a28565af3336de33390aa7e592e5108f6d9151dd000a90a5eb60a0220163362373d11f177e41b914dc10c93b76adfa4c27f4662179329e66b32f8f139\"}]},\"1:0x9757f2d2b135150bbeb65308d4a91804107cd8d6:139c059f886c2b9b41f05a6c4ec2578a048d18aaadbc095609e5df4b\":{\"contractName\":{\"label\":\"List Order\",\"signature\":\"3045022100892ab54a425fa1306df530b5ffeab2944133f1fbc68b99b92e61abf5c5051d1002205eff72d6f2c65f7835bcb2c6593b772d0a45e152988b4379cdb52327ce5da382\"},\"fields\":[{\"label\":\"Order maker address\",\"path\":\"maker\",\"signature\":\"304402205990b238b291ad1bb3cce7d2acce868761c6a73fa79e87c05530813aac8eba5f02207408c5e30e840195677fa60d411d2c2bc76fbe15a7ad2506a4636f001708bec5\"},{\"label\":\"Order make asset value\",\"path\":\"makeAsset.value\",\"signature\":\"30440220646b1bd068a229a75f7f0558f03d2fbbe7dd441d318480dc8eb532c3452ed6a00220642fe4f065198bab191c682e55487cd6464a90c9527983dcd672d15a0a083d80\"},{\"label\":\"Order taker address\",\"path\":\"taker\",\"signature\":\"3044022014dff71fc22c0b53e918ceed99de5aa86cc49fffc22f271a9586a9db1197e413022001125d415ad2eef46353bd8e812248fbf3fc2b60fb5fc7dad3853c9d2c85c6a1\"},{\"label\":\"Order take asset value\",\"path\":\"takeAsset.value\",\"signature\":\"304402202416cd3b9b1b9b7fc4bd5434f0f8c54638d0f29e87f1f92de7006747f4e856aa02207afb4547d03de6247628f93c5ed49f9122e2780507bc601f5211c89c8905b93e\"},{\"label\":\"Order start time\",\"path\":\"start\",\"signature\":\"304502210095c5b1927e171ce8f0b74bd311cb0f66bff5e3d23a7eb52e1d6b696378defb2502204114def9ce15f2b698ea00d43bee8e8692568a6394e24c8e0b53c90c29ab7ad0\"},{\"label\":\"Order end time\",\"path\":\"end\",\"signature\":\"304402203f435338d8130399eaa6939c0cc8f4fc5efc92a34256ac450d6d55b0ac2e816f02204c116eb40b3c07810facd9117572147216fdb175b2ce31c6ef277501dff7f6d1\"}]},\"1:0xb66a603f4cfe17e3d27b87a8bfcad319856518b8:07bed12ab07fe09633d57ede321ed3dd0940d654b9d34a379c4997b9\":{\"contractName\":{\"label\":\"Lazy Mint ERC-1155\",\"signature\":\"304402206bd24ac8c5cfa2b75e16ea0c315295368a7f780c4ec062555079cfe48d583a8602204300f968037f9ea84919cdc8ad3a22103b04e00b9c4dffe5c34ebf13d1b769cc\"},\"fields\":[{\"label\":\"Token ID\",\"path\":\"tokenId\",\"signature\":\"304402206e18eac55b89b17b4706547807a864f6c1b37eee09fff4ccad54e9842eb1abaf02204ef2984f87d6c0ebab26352ce82f8040aae5bd259ae55d9921d609b3936d15dc\"},{\"label\":\"Token URI\",\"path\":\"tokenURI\",\"signature\":\"3044022067c04bf2be50a7660b11742d10dbcc84655c22a0d359c20b2abb54a4d23f2846022030bded842ae4208854c0d11d655b234465e2c9ee9fe9b1eb5074778ddcfa9426\"},{\"label\":\"Token Supply\",\"path\":\"supply\",\"signature\":\"3045022100fc4ab75ab184e564ea297da785d4a749b913e58706dff4e6c7ae49f72a7e9701022067bfead2e11a323beca3821a3ba310d705ebb128f45bee1f394dcc7e60af8043\"},{\"label\":\"Creator account address\",\"path\":\"creators.[].account\",\"signature\":\"304402203e5e5fe4636b283df4e4d027e8ba5e43d912f53125b052e603548fff051b37d702207ceae4257ccc801de3943fb68b1a0e2af546e12d3bc74481b7695a12de7eebd2\"},{\"label\":\"Creator value (10000 = 100%)\",\"path\":\"creators.[].value\",\"signature\":\"3044022065a51fd2cafd0013215fb703e27052320d35951e5f9d26a3c3d03a050b7088340220193e98ad9282a96e3e7b5e6813bb5989c31cded994fed35d5383e68738905c1e\"},{\"label\":\"Royalties account address\",\"path\":\"royalties.[].account\",\"signature\":\"304502210092d8aa5743b9fa52cc1d5caf4f83e65cf232b02394dae8e3056d29606377caf902205119918948d39a165950efb998e19aecb3bde611065e92fd5f5c10bafaacda22\"},{\"label\":\"Royalties value (10000 = 100%)\",\"path\":\"royalties.[].value\",\"signature\":\"3045022100b7cc93e7abfcc00efbfeeb49cef4d2ceb5521e1c97b2bdee882e011292964be902203d7ebd7c328961e1ca66aa16e8c61aeefa3bbbcad419bc65315658cdb425e5b9\"}]},\"1:0xc9154424b823b10579895ccbe442d41b9abd96ed:4776d13d863bd29241312beab87bd487ba5648c8c71919e9e5025e7b\":{\"contractName\":{\"label\":\"Lazy Mint ERC-721\",\"signature\":\"3044022001ca2f9abb569b76bfb8398ba150999d93fc6a02f5e637f4ac3a125b6c48b528022007ab8f1b776d1b2f5a0b44f90214b02f71c3535e468f03b681f133c3bc217946\"},\"fields\":[{\"label\":\"Token ID\",\"path\":\"tokenId\",\"signature\":\"3045022100e762ea781d76c81e5f3b28269e03f1cfe7e33b847dbe20a56289841579b0fb4f022033c6249fc155deb94850e6e30fd7fb854f07c63c2b8ffc8b3c7d412c01b8398d\"},{\"label\":\"Token URI\",\"path\":\"tokenURI\",\"signature\":\"3045022100dc369275a5b2d6a3c934221e9f7483082cd5c52bb1b41a802d260c54757cf29002206dfcd13e32357144ed68b90c2308208bfa699d95d917a97d8bf438aed08269bc\"},{\"label\":\"Creator account address\",\"path\":\"creators.[].account\",\"signature\":\"304502210089448beccdb19e680a7f8a6dd4f1e0dc8319b3458f0d5a491518bb97af0e1f5002200dc01550cc4d0d3398049938d2a498c142e2e82eb9086c7d6d6a8f1f90d1d25e\"},{\"label\":\"Creator value (10000 = 100%)\",\"path\":\"creators.[].value\",\"signature\":\"3044022026ebacc1dce44b2815c6e53d9030836a4768ba0019c4b6f9d8eb83d8699ffac3022076b9bc2f89daa7e5e21b294163e64ed25d2bdfe5f2373f6aefba4f6da1d92d3f\"},{\"label\":\"Royalties account address\",\"path\":\"royalties.[].account\",\"signature\":\"30440220626fdb56db8c34a282917aab1f7fddd36a060eb35f117ded7b675be946acfac002206770d35391e086e1ab31e9fd9cea07e90b09d38f0b882857e394283ecd6575a9\"},{\"label\":\"Royalties value (10000 = 100%)\",\"path\":\"royalties.[].value\",\"signature\":\"3045022100e22f440fe2bb06d77a0afc50366689ede59570dc91796305ea62e5ca5da5286c022074bdc3dc840c7314abcf6bbaf35fe5e20318c54a911e7508942fecd38b70db9e\"}]},\"1:0x72e9d9038ce484ee986fea183f8d8df93f9ada13:65b962ff5c94fe989fdc9169a5dbf3662e79747c3932616d9f0a39cc\":{\"contractName\":{\"label\":\"SmartCredit.io\",\"signature\":\"304402202d7247f61c8a08f5ea99fdbf628e88d487f12a6e4ed330bdc3e8a5886fee6f9202200524d6035cbdcd469b1d1d3fa8dcf83595112daf20f24286e1b0e3c820fa2127\"},\"fields\":[]},\"56:0x8dcdfe88ef0351f27437284d0710cd65b20288bb:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3\":{\"contractName\":{\"label\":\"AugustusRFQ ERC20 order\",\"signature\":\"3045022100cdd6ed9272614ffdedb2b2aa22418386928f1174a6214451d67b82c06b637d4102205ee814ca52cfbdab011e337727cfe91fa272b98246ecbfb1683bfc0de3086efc\"},\"fields\":[{\"label\":\"Nonce and metadata\",\"path\":\"nonceAndMeta\",\"signature\":\"3044022056e3fdb59c9ece3d411d03963edfcb9a186ccb753b4e984366e7ca6baa99b38902206a7267e31543659ba3bf8b796edec2d1c6f174a810b89862e43541f94b191eca\"},{\"label\":\"Expiration time\",\"path\":\"expiry\",\"signature\":\"3045022100a4cc77374944e947748dd36408f48f43a94e67436231fad62191554d1ea5ff0e022001baa4fc0587af310bebe1c0044d7b4280bb5537192736fa3805584c735a6710\"},{\"label\":\"Maker asset address\",\"path\":\"makerAsset\",\"signature\":\"30440220770b731ffb6091493ce2fcdb4163ad872add409a9c66e88e29b0d7a82b0ee79c02201e0130c1841c484e816b9f9ff3694eea3601e1569c1ddb87319b08d86e9823d5\"},{\"label\":\"Taker asset address\",\"path\":\"takerAsset\",\"signature\":\"304502210094b700c3383bf0d8740e09d23dac120addc1c21029746f672d8f8c8b3a2a2995022008b5d3af862f7fb0510321cd9ae4f7172ab3b347f6556b3da79e2a95950ff34b\"},{\"label\":\"Maker address\",\"path\":\"maker\",\"signature\":\"304402202dafdefb2181e5bbdf5816fc710400bae0846bc08dfc389ef8008048228e2fd0022002b89786ea578488cf6c6b751dac0c13dd6c2c57c8d6bb0fcb47a28d2b07b1b6\"},{\"label\":\"Taker address\",\"path\":\"taker\",\"signature\":\"304402204c27aac1c07e8bde8a998bf06acd5eaf40e874a9b128a4f19ee8c39ce45c9cbe0220380d9438d10ce81f7545f3de8530a19c1eda78e4683fc2145b9715eb260f1d66\"},{\"label\":\"Maker amount\",\"path\":\"makerAmount\",\"signature\":\"3045022100e7f19c15b49e6f40eddd2c8a24d8c55e9224262aa0b856a413f842fc5c0fc7d00220341e5eaf45d8335bb6143768b1c961b6c7e97897bda5ef485457020661ac3ae3\"},{\"label\":\"Taker amount\",\"path\":\"takerAmount\",\"signature\":\"3045022100e36cd43f82fc0f99ec2770a26b245f6af13623cee69670d68dd696ff76d4630e02202057a0dd1faee909037429ba7489ccf3891a38d29a4da04648441105c1e89048\"}]},\"56:0x8dcdfe88ef0351f27437284d0710cd65b20288bb:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623\":{\"contractName\":{\"label\":\"AugustusRFQ NFT order\",\"signature\":\"3044022045bb3ce0d61f428537754555a0d69cfc5554de2dd58c1c5cc7ae81abe073b1df022039ba8d7e1230c3851fc08db58cda6222c420dce4b8cf96725891906fc5f7539b\"},\"fields\":[{\"label\":\"Nonce and metadata\",\"path\":\"nonceAndMeta\",\"signature\":\"3044022020d30ebe13aa1235ea25dcc247a1c494a6aa2ac4f121aadc3beb874b9de4b75e022078efc82c2343d6165960fc252d10313550b6d9d1faeb6f2ff611c288fb53f364\"},{\"label\":\"Expiration time\",\"path\":\"expiry\",\"signature\":\"3045022100ee126c98d8ad5b000090d6c16131709618d803878a72ceb1f58f2b11b2e52324022076403ce3d181511afc9b59b3f4a0ce4de9ee76dd60c78eb61660d623294d4070\"},{\"label\":\"Maker asset encoded\",\"path\":\"makerAsset\",\"signature\":\"3045022100ed1f432fe0c33307e397f846970f7de0fc18098f3d5b4cc1a25844f75dbbfb9902204075ef8e6d6dae438dac2a7e3aace3e27bc7c67fe22728395f92888e68361f20\"},{\"label\":\"Maker asset NFT ID\",\"path\":\"makerAssetId\",\"signature\":\"3044022022be34e598b158445f7ff6a5565b04627b61789339aa956b03f5c8dcb81e0ca102201b970d57742618204906414d7d23dc42e9e566776e7bda9060bcde335817a8ce\"},{\"label\":\"Taker asset encoded\",\"path\":\"takerAsset\",\"signature\":\"304402203ec8a77927b84388d5a0ba1bb0bfa38fcb862b8c43d988bbbbccbd547a4ae38e022002f2f736d3cfbf42829b750af704323f29b1eedcbde789c49052521ec47bafee\"},{\"label\":\"Taker asset NFT ID\",\"path\":\"takerAssetId\",\"signature\":\"304402205defad5bc1514f254cece6e8dfbfe3b68c3818bef6d4268b40c59858a6a2187502206767bb96c040e523dfd88724a0ce4b4f6bde73c02a286772f2a73c973dab0bab\"},{\"label\":\"Maker address\",\"path\":\"maker\",\"signature\":\"3045022100a273a21625a130728e0448f53a047d50867a9ba5e4a285d7e06d98fb3bd655c2022061e93ce13cedef0ebe9bc9340b988d0fc7353e99e2ec28b77102a14b3a129479\"},{\"label\":\"Taker address\",\"path\":\"taker\",\"signature\":\"3045022100b74529d5cab0055f80732bcf7864f03db98bb9f779fa56171f3faafdfee2719e0220757505e2ba5df6184002e921f678f9f5bb073197652a45d86c6edf003067ce2c\"},{\"label\":\"Maker amount\",\"path\":\"makerAmount\",\"signature\":\"3045022100c14e1f90619be9cc92da927b1c908a18133b043e138d908bf81117e1fc73fe000220503047ae5e75ee53c0ed60601644ec09f430c613edc6ec72cdae4021d29438ce\"},{\"label\":\"Taker amount\",\"path\":\"takerAmount\",\"signature\":\"304402201096ca9ff9b886a77fcbc7fdc8ddfc0f42a9c8e7fccb783581ca3abc75ba61dd0220191d21eed8b4eed56975b580832a8b1891a5b674fe1a0e5d7314b7b6486d7104\"}]},\"137:0xDb46d1Dc155634FbC732f92E853b10B288AD5a1d:9e97b4d1d211350352bdbb5ef45c4cb52f988d93a2d4a8ec6e675d14\":{\"contractName\":{\"label\":\"Dispatch.xyz Follow Profile\",\"signature\":\"3044022008ad0a8cfe8c2630848f05e54ab93cfd1f5c301eb52cc74537d67a56751932bc02206dd3e78f5055b6c65a73905f840963b2f696afd04d6d472f4185dce9f6262821\"},\"fields\":[{\"label\":\"Profile Ids\",\"path\":\"profileIds\",\"signature\":\"3044022079ab31498b3ef74e744d5414f4c51334e00b20a5ad7c0a0ea6f463462d0a3699022079b29776df1f5243794cc128f19478ba586cd3b9378b5809740e9980763f8d8c\"},{\"label\":\"Data\",\"path\":\"datas\",\"signature\":\"3045022100c04fb22aecc349de63571095782ea34cde05e576095c980d5c86f054c1a248cc02207f5a41199516bed46221aebed4f0f377508d39d661ef7f6ea7b16877709aa4ce\"},{\"label\":\"Nonce\",\"path\":\"nonce\",\"signature\":\"304502210090109424df964562737fd1b5ce2f06b427856ae933c37f279af199f64fc530760220290cf4491328fc947f4d73f0032e151aa09caf8e085d0f0306fa355c0624dcac\"},{\"label\":\"Expiration Date\",\"path\":\"deadline\",\"signature\":\"3044022060825e02b00e4487917d073f701639b1ca812f21f1cf588fa8eb545a59b1fec8022073ca7918a322dfeb966dfe5239cc1a213c14e67a32f5f51e14e53c05f4149783\"}]},\"137:0x33c6eec1723b12c46732f7ab41398de45641fa42:2a4e40fa701836b6f11303b841424a6f3a47a5313c810b6651517fd1\":{\"contractName\":{\"label\":\"Mint\",\"signature\":\"30440220513be6e618840924202f319870537e0c1f1eb2e684c0a2c61152fc4c20b41c550220026e22f2cd2e12a6b48f97bbe362600556ce3fe5e8b292c05c89c591ea446e2b\"},\"fields\":[{\"label\":\"Receiver\",\"path\":\"receiver\",\"signature\":\"304502210089eeb41d1ba1235fe8319c6a248e1ac66d2598979d265e2d4cf16abc34ba47f302205a59e802e42b3268441980b4708600ab6e05e4c55de7407610987532cf73462e\"},{\"label\":\"Quest Type\",\"path\":\"categoryId\",\"signature\":\"3045022100bc6cc7ae4c2b3b4d43acea4c513e09d11736275fade4c0bd834d94f6ebd3893302203045ae14bfbaa4ef3bc0d9cf76f29cd4c90859464290632ee72b20f4b5c37f8b\"},{\"label\":\"Collection\",\"path\":\"collectionId\",\"signature\":\"304402207537d928b803882aac63dadb7fd512f4b959c0e1a737ce7594c9b9e0a0c661170220587298e0e8e2eae94da28564b1bdd7f62273d7e3707665a7966f1b04a15f061b\"}]},\"137:0xf3cd476c3c4d3ac5ca2724767f269070ca09a043:16c6594547c8c6af18ca0d8b500976bfb7f38764060cec3792c2aad3\":{\"contractName\":{\"label\":\"AugustusRFQ ERC20 order\",\"signature\":\"3045022100a887a8b2f40695509ac6e040feb1a4a088fee459fd7e76cb137ea7c06b0a0b930220617b514271c05679e7ce04860ffca703ad2a21f4a45cce34b40e38624cf7ec13\"},\"fields\":[{\"label\":\"Nonce and metadata\",\"path\":\"nonceAndMeta\",\"signature\":\"30450221009fcaf300fef36d00f64c3d5e92991e67fd93862f8eddba0b8472568b5c66e38d02203a26f3aad1c0cf6638dea961f8f5e4ba5f72272bc7f1e33afac897a3b5b51604\"},{\"label\":\"Expiration time\",\"path\":\"expiry\",\"signature\":\"3045022100984f166ee1744b4b69e24ed1e49fbaf43a24e82dd5b7d2103cf8ca854ff49e0a0220326ab17879b902521fa032a89c5c984e52bf3e31c8336cd67a1ce198d7c36e2d\"},{\"label\":\"Maker asset address\",\"path\":\"makerAsset\",\"signature\":\"3045022100f4ec14863e0512804fc69d82fe17bf576340ae8005d0c48520cefb3254b102f702205fea57ba3919071157ff3ee0c93472e936f1dc079bcb0c447bb87ad86e505ea2\"},{\"label\":\"Taker asset address\",\"path\":\"takerAsset\",\"signature\":\"3045022100957771ad2eced04af9750c1df10cc5b5b913fd3f9fe83408baa766573ed34221022055a1ba30b3a8895a011719ac54adaf7bfd24fe2c5041a90348097f719bed0dc7\"},{\"label\":\"Maker address\",\"path\":\"maker\",\"signature\":\"3045022100f25edb42b652d5c645de567c201a1e6a64b0d6b23274cde08046d955cd2573860220129bbded4e33150cc38b93033b2d70d5fa141066f1ed7c603b5515ab8cdb2fca\"},{\"label\":\"Taker address\",\"path\":\"taker\",\"signature\":\"3045022100c8790938f88557986c769102d31603849dc8c560cc03a45db99ddc90d69306690220295950348fffc22fbb898d75e768edb1edcb1c8772cc3518ff9687e957a87e50\"},{\"label\":\"Maker amount\",\"path\":\"makerAmount\",\"signature\":\"3045022100b5e1dc4e5f69fd80611a4f5c7d306ac6aca4a2a2103515d761557e532884ca8702204b86dd5c323345242f1c1b263ba035932a10a5b0eeaddbc79fa10db27aa9d7d4\"},{\"label\":\"Taker amount\",\"path\":\"takerAmount\",\"signature\":\"3045022100bd1de29559311612a7d0bca3c61b10d9ddf0753be7c372ebb95e0b69b674c01102207d685aa2b0a2309ad094a5fc8e09210681781f9a4294e4c7973d0ecf1adabcbd\"}]},\"137:0xf3cd476c3c4d3ac5ca2724767f269070ca09a043:affaa50b47c793acb6b9f912325d898538d409f735b8f312a1914623\":{\"contractName\":{\"label\":\"AugustusRFQ NFT order\",\"signature\":\"3045022100b9798555ab901ed3cefcdec4aabd9418f3561fba299833ceadbf9d3043a996a7022037388e3956ce02764088733d92384fb4e669754b037e8a913995d761ac0d5cdf\"},\"fields\":[{\"label\":\"Nonce and metadata\",\"path\":\"nonceAndMeta\",\"signature\":\"3045022100b57c5877ce124196316dde0e2fb0f18258521cc2c7c27405bde78008bca27d8d02202053d4696b28b40fd1a16e7a179020c7d633e4548da0bd92f9442c24da12d510\"},{\"label\":\"Expiration time\",\"path\":\"expiry\",\"signature\":\"3045022100b35db3057953f7b747d4423f688d8a3fb3101729f37af65c4ac4fc9a7ee8fb8d022033f4d70422b437593f00af75828ff067f914f825bd3075f8462080bf4e0f9ae0\"},{\"label\":\"Maker asset encoded\",\"path\":\"makerAsset\",\"signature\":\"3045022100e2e0f280d333692a776343669d6f17dac3ded8935d5875964d5ac6b05bb093f80220589afeaf7a7baf3b5964b439111d07deafe25be8a32b43640a2cc073a7257aa6\"},{\"label\":\"Maker asset NFT ID\",\"path\":\"makerAssetId\",\"signature\":\"304302201e35015cc3bbd6ca28bd57eb970cf1eb05826a4988c1238e951574f8804f28c2021f0cae62ed8199b725a39e714e60c92fe522ac7992c3dc1a27866f749547de89\"},{\"label\":\"Taker asset encoded\",\"path\":\"takerAsset\",\"signature\":\"304502210094d2c3de8a61bf940dc5c8132070ee0566ab6d0059f1eff5aec3ba1ec04740a202200fb41470f2693427466a9ce580d5c9ff12243f848351c7aa2ac070c1618896e2\"},{\"label\":\"Taker asset NFT ID\",\"path\":\"takerAssetId\",\"signature\":\"3045022100f9b55eafa8d519298960b040f36a7479ace9d43b677d243d22c3194147dfa033022025f7a2962e342ee1572f814cd8b8cba1382deb20054475ba9df9dd321bc9fcc7\"},{\"label\":\"Maker address\",\"path\":\"maker\",\"signature\":\"304402201aa4061287e14289ff1c4fdffe8ddd811775aae4bb6577970ebb87735102a5ba02207d9c89254e9698a7aff849a87c2a163ce9793212a5fe3745e446393c6a71ec46\"},{\"label\":\"Taker address\",\"path\":\"taker\",\"signature\":\"304402207ca92ed4b465b4fe1d4b2dd65561165a70b54c8dd132dcf15031c799c8ab22fe022041d7bd664003c62e949cdb0ed09a744ac6adce7d6e676e4de22437a830edcf74\"},{\"label\":\"Maker amount\",\"path\":\"makerAmount\",\"signature\":\"3044022038901c22513acf13bac39f553c763d26ee32c3e6e215ca3cb69da0274ca901c702204fce716fc91f3cb7ac7da446bd3432020d002c5a62c48d199d7b4379fe93c9f1\"},{\"label\":\"Taker amount\",\"path\":\"takerAmount\",\"signature\":\"304402203361ee1439f545c9664035be586925b2fb4878de9dbcdc7a519b5eb95a44ca6e02205f905942febcf5342577b5af149ea4deea5e6d0e1ae17356bb1d0628d8ccf8ff\"}]},\"137:0x35f8aee672cde8e5fd09c93d2bfe4ff5a9cf0756:4776d13d863bd29241312beab87bd487ba5648c8c71919e9e5025e7b\":{\"contractName\":{\"label\":\"Lazy Mint ERC-721\",\"signature\":\"3045022100977ad189fb3f8c809caef784ca6c66fcda1c98274d92219b07416e43f43187af022051b069af307aef8d7b3b3aaf815eaf0e7e91c55f994616f3ea88293dd69f217c\"},\"fields\":[{\"label\":\"Token ID\",\"path\":\"tokenId\",\"signature\":\"30440220403fc14ad30f3f3ea597f75d88371c83ef2e10130a5143faeda87dc507fb9aa2022056202bc01b283e0f625b82c73db84ca3f17eef6d9eea89709aa0a88eae17096c\"},{\"label\":\"Token URI\",\"path\":\"tokenURI\",\"signature\":\"3045022100ce280997a6b39acd5dc3522401c205eb4719b4b43e7e673958f1c7b7b97a8f59022042eb6a70f1f45c771a697eb85b71ba58acc8074ac436d27840ec1325423d7e0c\"},{\"label\":\"Creator account address\",\"path\":\"creators.[].account\",\"signature\":\"3045022100f072042cace3b6ce605bbf0db7c3941928cb1ac5b6011bf47e04d76f57bbf392022054eb24e12319d88144a5e4d15a22271f2f1285d51f1b7f48bfc46ff1724c1741\"},{\"label\":\"Creator value (10000 = 100%)\",\"path\":\"creators.[].value\",\"signature\":\"3045022100b5517383a1f9f7281859e1e3ebcc588770ac08fe7961d83ebff3ff922674fa3302204c490c86d4d987875aa55c089a6c8bab4414a742bc7df19f67261a319d4d8c17\"},{\"label\":\"Royalties account address\",\"path\":\"royalties.[].account\",\"signature\":\"304402203660c0f0da24c89206e992e46c399d75d4e0981dd86bc145f4ed0d0ef469b47402200948f415f220225eaa67fb03749b2d5ea1ca8dfa76eda34d15c8f95746e30bd4\"},{\"label\":\"Royalties value (10000 = 100%)\",\"path\":\"royalties.[].value\",\"signature\":\"30440220747d86766a08b5bf78182dadf5ace3813cb8190266e5d1a72f2d94a387fd6ba5022006c69b8171a47fa15ef906fac4546856dd9467a8e1036d89e323614e64d29715\"}]},\"137:0x35f8aee672cde8e5fd09c93d2bfe4ff5a9cf0756:82dc7c771ad33e33d4e1b89d932d7574d87b8ef5d7d9c0d6f0be97a8\":{\"contractName\":{\"label\":\"Meta Transaction\",\"signature\":\"304402203e256b1407f82dbe395bee10e34bf5b995c3fa91737172b58fb41bcf8e006eea0220046543fdb21b8f65e050b57081915c083fab2abc1cdd663ce53b1c792dbfdfb2\"},\"fields\":[{\"label\":\"User Address\",\"path\":\"from\",\"signature\":\"304402204576c4999dd6a70df131dfd032667a42695d333a07b3599ec6d72843c54b48b502202cf424d057bffceadbbcd9023b2241bab6d2faf8b7324fbdf87f5daa9789fe38\"},{\"label\":\"Meta Transaction Nonce\",\"path\":\"nonce\",\"signature\":\"3045022100e094b23ebe8102c3c1aa5f802c33ed56f48bc94f6446b289ce358ea60ac375c0022013255aba7dc03fcfe30c7eacdf7a14ad0c51f389ddd51f7c4ba6e8d9bbf3dbb7\"}]},\"137:0x7f19564c35c681099c0c857a7141836cf7edaa53:139c059f886c2b9b41f05a6c4ec2578a048d18aaadbc095609e5df4b\":{\"contractName\":{\"label\":\"List Order\",\"signature\":\"30450221008b4ee6f1b492d19243afc4715d1f0cd9bf79a1aeb61fbf58f0e1323bce9dbc99022001a8a548f081eba23f33f03e20f478c33bd264efb3d8bfa16ce96e0b69ad5428\"},\"fields\":[{\"label\":\"Order maker address\",\"path\":\"maker\",\"signature\":\"3045022100f9851e9dfd9706740307e7829705b3e049390755e36b26a059f28d6bb47ac949022029a4efc35a2264fbe8f88eee1f83c430fb5e96bbf55e6deb31a60826cb0203b3\"},{\"label\":\"Order make asset value\",\"path\":\"makeAsset.value\",\"signature\":\"304402203bf13f37325f60973b02d5433857676ce135f94011047bbfdd2b97c30db1a069022029f409c7689891c222cdec4e63d143938ff73a4f6cffb0c5d56228d572d25fc2\"},{\"label\":\"Order taker address\",\"path\":\"taker\",\"signature\":\"3045022100bcdc72ba9f16a3ac3b73ad04f445a60958a7ea644511d9b917c5ae52be52c76b02206a68b66cc24c79e45687c07a201f7e910444a66a657c615c5854ac7065b0c6fc\"},{\"label\":\"Order take asset value\",\"path\":\"takeAsset.value\",\"signature\":\"3045022100c23622dc64172dfedc8fae04d5fa24e25f598bea659e703839dccf19736ba13a02207554a945d0e9c2816860ec7a6c4aab9088fb58f5316c1007d82f0add61693954\"},{\"label\":\"Order start time\",\"path\":\"start\",\"signature\":\"304402200cfe7613b90190a2c4dafaa661e5778a7756444e593a8e16105da315231df264022025e1daecd1752763decb7c51389a5eb97037536ecea3781e70ab428d75e1278b\"},{\"label\":\"Order end time\",\"path\":\"end\",\"signature\":\"3045022100d0047bfc769190c5a173c8bdf79a2fdef008f0674ac04f3a7fe100553f41dafc022030e7ef0a1dd8f6f4131da237f6c33a331add85dd747f7f9749806759767d0880\"}]},\"137:0x7f19564c35c681099c0c857a7141836cf7edaa53:82dc7c771ad33e33d4e1b89d932d7574d87b8ef5d7d9c0d6f0be97a8\":{\"contractName\":{\"label\":\"Meta Transaction\",\"signature\":\"3045022100a2f95042a915f8ae76b54b1f012271a44356484ea6d4963b81e6806ed6fe80500220564155498a275d3fe5eec595fad3858cb2d7fa85178b98208d09a886a1485257\"},\"fields\":[{\"label\":\"User Address\",\"path\":\"from\",\"signature\":\"3044022051a39f6c809110faf6aa95fde98315c0c2b2cac34c31d927c058a2c0ebc158cd02206ccfac20b0327ac6e2ca08d5d53aef189b2bbe8bc010ae9002b25edcf43c2f06\"},{\"label\":\"Meta Transaction Nonce\",\"path\":\"nonce\",\"signature\":\"3045022100c1e15f064b9cf3d8cb2c6b297318c543066a12868419121c7062ccb7fb2f619b02202c3079f47124d6a25178d4b8431acd0bb08f44e9a0ec302e71bb4cc9b49a05a9\"}]},\"137:0xa2d9ded6115b7b7208459450d676f0127418ae7a:07bed12ab07fe09633d57ede321ed3dd0940d654b9d34a379c4997b9\":{\"contractName\":{\"label\":\"Lazy Mint ERC-1155\",\"signature\":\"3045022100b85f48fd591345542f9e2271b4f33e71287a703eda9f9f7b54458dea60fb59fa0220661f4281eff16352e5e8db92a254b6b74ac0f20e3d41c9042a3c7c9f7397bd08\"},\"fields\":[{\"label\":\"Token ID\",\"path\":\"tokenId\",\"signature\":\"304402203dfd604170efb9379c36e17439f15f441b437aecf2d9abd0dc8b0c757c15d1fa022007fde07992c2b3797e7aacb7309cb60d494856d7a9d5866981a8948abf4d6a9c\"},{\"label\":\"Token URI\",\"path\":\"tokenURI\",\"signature\":\"3045022100a334814c15bfe1474472e56201aa83aa7016648b2a92aa2ae7c4d86b8a412eaf0220416654d59af289a253a96cbe4f5c9b75c2129d603d94cb3c7966cbea682f542a\"},{\"label\":\"Token Supply\",\"path\":\"supply\",\"signature\":\"3045022100a180585fc34f26b83b50c1d7609a0623b85b76267e393bf2871f41790487bf5902206c296108c56f2a1557a66a04f05bbcd7f0e0e0cd7a7a9764783673c0cda21d1f\"},{\"label\":\"Creator account address\",\"path\":\"creators.[].account\",\"signature\":\"304402200a32f52a36f61e3b62af734ceea6e02ebf44e9bbafccb92b2570b7ae9666638e02205e8a0ee1634919bab75369b611257e17c12cf379a4b83e3da2089de13863baa0\"},{\"label\":\"Creator value (10000 = 100%)\",\"path\":\"creators.[].value\",\"signature\":\"304502210092c988b7806250d99ca2760167a0c72f4c7e20f8f9174c519421bba8adc03c0a022032f33a3843e31b8ad17991e8eb3e3b922c5c2b9570d930fa9456b6f59b8974d3\"},{\"label\":\"Royalties account address\",\"path\":\"royalties.[].account\",\"signature\":\"304502210081e5ed5701d2bb497c4b1cadd0ca61220b1078357f7e3ace908c01fcfcd3abad02203b03cb75eeabcd49777362466e3af9a461ad39059238748ed7d902f988db3318\"},{\"label\":\"Royalties value (10000 = 100%)\",\"path\":\"royalties.[].value\",\"signature\":\"3045022100cc555652ef532386da9ad2405536aaa7adbe4cdac73ae9b2a8d4b0659eb4013a0220030799c1a813bef66c6395c7305a1f98e3bfc0bd045917d63bf7bd24e09fbebf\"}]},\"137:0xa2d9ded6115b7b7208459450d676f0127418ae7a:82dc7c771ad33e33d4e1b89d932d7574d87b8ef5d7d9c0d6f0be97a8\":{\"contractName\":{\"label\":\"Meta Transaction\",\"signature\":\"304402202e2b7810798bb8d8094ff46e47ae09c820b374420984f5c9845139f7995b5266022050244aa907e45d7ff4ffc0b383262c4425d32aee4190bfc09fff359163268b73\"},\"fields\":[{\"label\":\"User Address\",\"path\":\"from\",\"signature\":\"3045022100da2c6c45ce4014375aec27ce7dfc470a066a53a3ba812da7f4fac641fc48334502202ce049c05a76e19fc4195a323464383f3eca62f33a435ad5807716af1a83af4e\"},{\"label\":\"Meta Transaction Nonce\",\"path\":\"nonce\",\"signature\":\"304402207b53dc30da4e7360a2deb22ab0ee2ddca9dda1c807095a57751dc395d7d503c602200f464f277a17558cab3b891fe8d4fb232b5783f26f6813da77ceeba527bbe1c5\"}]}};\n","import axios from \"axios\";\nimport SHA224 from \"crypto-js/sha224\";\nimport { hexBuffer, intAsHexBytes } from \"../../utils\";\nimport {\n  EIP712Message,\n  EIP712MessageTypesEntry,\n  MessageFilters,\n} from \"./EIP712.types\";\nimport EIP712CAL from \"@ledgerhq/cryptoassets/data/eip712\";\nimport BigNumber from \"bignumber.js\";\n\nconst NULL_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\n/**\n * @ignore for the README\n *\n * A Map of helpers to get the wanted binary value for\n * each type of array possible in a type definition\n */\nenum EIP712_ARRAY_TYPE_VALUE {\n  DYNAMIC = 0,\n  FIXED = 1,\n}\n\n/**\n * @ignore for the README\n *\n * A Map of helpers to get the id and size to return for each\n * type that can be used in EIP712\n */\nexport const EIP712_TYPE_PROPERTIES: Record<\n  string,\n  {\n    key: (size?: number) => number;\n    sizeInBits: (size?: number) => number | null;\n  }\n> = {\n  CUSTOM: {\n    key: () => 0,\n    sizeInBits: () => null,\n  },\n  INT: {\n    key: () => 1,\n    sizeInBits: (size) => Number(size) / 8,\n  },\n  UINT: {\n    key: () => 2,\n    sizeInBits: (size) => Number(size) / 8,\n  },\n  ADDRESS: {\n    key: () => 3,\n    sizeInBits: () => null,\n  },\n  BOOL: {\n    key: () => 4,\n    sizeInBits: () => null,\n  },\n  STRING: {\n    key: () => 5,\n    sizeInBits: () => null,\n  },\n  BYTES: {\n    key: (size) => (typeof size !== \"undefined\" ? 6 : 7),\n    sizeInBits: (size) => (typeof size !== \"undefined\" ? Number(size) : null),\n  },\n};\n\n/**\n * @ignore for the README\n *\n * A Map of encoders to transform a value to formatted buffer\n */\nexport const EIP712_TYPE_ENCODERS = {\n  INT(value: string | null, sizeInBits = 256): Buffer {\n    const failSafeValue = value ?? \"0\";\n\n    if (typeof failSafeValue === \"string\" && failSafeValue?.startsWith(\"0x\")) {\n      return hexBuffer(failSafeValue);\n    }\n\n    let valueAsBN = new BigNumber(failSafeValue);\n    // If negative we'll use `two's complement` method to\n    // \"reversibly convert a positive binary number into a negative binary number with equivalent (but negative) value\".\n    // thx wikipedia\n    if (valueAsBN.lt(0)) {\n      const sizeInBytes = sizeInBits / 8;\n      // Creates BN from a buffer serving as a mask filled by maximum value 0xff\n      const maskAsBN = new BigNumber(\n        `0x${Buffer.alloc(sizeInBytes, 0xff).toString(\"hex\")}`\n      );\n\n      // two's complement version of value\n      valueAsBN = maskAsBN.plus(valueAsBN).plus(1);\n    }\n\n    const paddedHexString =\n      valueAsBN.toString(16).length % 2\n        ? \"0\" + valueAsBN.toString(16)\n        : valueAsBN.toString(16);\n\n    return Buffer.from(paddedHexString, \"hex\");\n  },\n\n  UINT(value: string): Buffer {\n    return this.INT(value);\n  },\n\n  BOOL(value: number | string | boolean | null): Buffer {\n    return this.INT(\n      typeof value === \"boolean\" ? Number(value).toString() : value\n    );\n  },\n\n  ADDRESS(value: string | null): Buffer {\n    // Only sending the first 10 bytes (why ?)\n    return hexBuffer(value ?? \"\").slice(0, 20);\n  },\n\n  STRING(value: string | null): Buffer {\n    return Buffer.from(value ?? \"\", \"utf-8\");\n  },\n\n  BYTES(value: string | null, sizeInBits?: number): Buffer {\n    const failSafeValue = value ?? \"\";\n    // Why slice again ?\n    return hexBuffer(failSafeValue).slice(\n      0,\n      sizeInBits ?? (failSafeValue?.length - 2) / 2\n    );\n  },\n};\n\n/**\n * @ignore for the README\n *\n * Helper parsing an EIP712 Type name to return its type and size(s)\n * if it's an array or nested arrays\n *\n * @see EIP712MessageTypes\n *\n * @example \"uint8[2][][4]\" => [{name: \"uint\", bits: 8}, [2, null, 4]]\n * @example \"bool\" => [{name: \"bool\", bits: null}, []]\n *\n * @param {String} typeName\n * @returns {[{ name: string; bits: Number | null }, Array<Number | null | undefined>]}\n */\nexport const destructTypeFromString = (\n  typeName?: string\n): [\n  { name: string; bits: number | undefined } | null,\n  Array<number | null>\n] => {\n  // Will split \"any[][1][10]\" in \"any\", \"[][1][10]\"\n  const splitNameAndArraysRegex = new RegExp(/^([^[\\]]*)(\\[.*\\])*/g);\n  // Will match all numbers (or null) inside each array. [0][10][] => [0,10,null]\n  const splitArraysRegex = new RegExp(/\\[(\\d*)\\]/g);\n  // Will separate the the name from the potential bits allocation. uint8 => [uint,8]\n  const splitNameAndNumberRegex = new RegExp(/(\\D*)(\\d*)/);\n\n  const [, type, maybeArrays] =\n    splitNameAndArraysRegex.exec(typeName || \"\") || [];\n  const [, name, bits] = splitNameAndNumberRegex.exec(type || \"\") || [];\n  const typeDescription = name\n    ? { name, bits: bits ? Number(bits) : undefined }\n    : null;\n\n  const arrays = maybeArrays ? [...maybeArrays.matchAll(splitArraysRegex)] : [];\n  // Parse each size to either a Number or null\n  const arraySizes = arrays.map(([, size]) => (size ? Number(size) : null));\n\n  return [typeDescription, arraySizes];\n};\n\n/**\n * @ignore for the README\n *\n * Helper to construct the hexadecimal ByteString for the description\n * of a field in an EIP712 Message\n *\n * @param isArray\n * @param typeSize\n * @param typeValue\n * @returns {String} HexByteString\n */\nexport const constructTypeDescByteString = (\n  isArray: boolean,\n  typeSize: number | null | undefined,\n  typeValue: number\n): string => {\n  if (typeValue >= 16) {\n    throw new Error(\n      \"Eth utils - constructTypeDescByteString - Cannot accept a typeValue >= 16 because the typeValue can only be 4 bits in binary\" +\n        { isArray, typeSize, typeValue }\n    );\n  }\n  // 1 is array, 0 is not array\n  const isArrayBit = isArray ? \"1\" : \"0\";\n  // 1 has type size, 0 has no type size\n  const hasTypeSize = typeof typeSize === \"number\" ? \"1\" : \"0\";\n  // 2 unused bits\n  const unusedBits = \"00\";\n  // type key as 4 bits\n  const typeValueBits = typeValue.toString(2).padStart(4, \"0\");\n\n  return intAsHexBytes(\n    parseInt(isArrayBit + hasTypeSize + unusedBits + typeValueBits, 2),\n    1\n  );\n};\n\n/**\n * @ignore for the README\n *\n * Helper to create the buffer to describe an EIP712 types' entry structure\n *\n * @param {EIP712MessageTypesEntry} entry\n * @returns {Buffer}\n */\nexport const makeTypeEntryStructBuffer = ({\n  name,\n  type,\n}: EIP712MessageTypesEntry): Buffer => {\n  const [typeDescription, arrSizes] = destructTypeFromString(type as string);\n  const isTypeAnArray = Boolean(arrSizes.length);\n  const typeProperties =\n    EIP712_TYPE_PROPERTIES[typeDescription?.name?.toUpperCase() || \"\"] ||\n    EIP712_TYPE_PROPERTIES.CUSTOM;\n\n  const typeKey = typeProperties.key(typeDescription?.bits);\n  const typeSizeInBits = typeProperties.sizeInBits(typeDescription?.bits);\n\n  const typeDescData = constructTypeDescByteString(\n    isTypeAnArray,\n    typeSizeInBits,\n    typeKey\n  );\n\n  const bufferArray: Buffer[] = [Buffer.from(typeDescData, \"hex\")];\n\n  if (typeProperties === EIP712_TYPE_PROPERTIES.CUSTOM) {\n    bufferArray.push(\n      Buffer.from(intAsHexBytes(typeDescription?.name?.length ?? 0, 1), \"hex\")\n    );\n    bufferArray.push(Buffer.from(typeDescription?.name ?? \"\", \"utf-8\"));\n  }\n\n  if (typeof typeSizeInBits === \"number\") {\n    bufferArray.push(Buffer.from(intAsHexBytes(typeSizeInBits, 1), \"hex\"));\n  }\n\n  if (isTypeAnArray) {\n    bufferArray.push(Buffer.from(intAsHexBytes(arrSizes.length, 1), \"hex\"));\n\n    arrSizes.forEach((size) => {\n      if (typeof size === \"number\") {\n        bufferArray.push(\n          Buffer.from(intAsHexBytes(EIP712_ARRAY_TYPE_VALUE.FIXED, 1), \"hex\"),\n          Buffer.from(intAsHexBytes(size, 1), \"hex\")\n        );\n      } else {\n        bufferArray.push(\n          Buffer.from(intAsHexBytes(EIP712_ARRAY_TYPE_VALUE.DYNAMIC, 1), \"hex\")\n        );\n      }\n    });\n  }\n\n  bufferArray.push(\n    Buffer.from(intAsHexBytes(name.length, 1), \"hex\"),\n    Buffer.from(name, \"utf-8\")\n  );\n\n  return Buffer.concat(bufferArray);\n};\n\n// As defined in [spec](https://eips.ethereum.org/EIPS/eip-712), the properties below are all required.\nexport function isEIP712Message(\n  message: Record<string, unknown> | string\n): message is EIP712Message {\n  return (\n    typeof message === \"object\" &&\n    \"types\" in message &&\n    \"primaryType\" in message &&\n    \"domain\" in message &&\n    \"message\" in message\n  );\n}\n\nexport const sortObjectAlphabetically = (\n  obj: Record<string, any>\n): Record<string, any> => {\n  const keys = Object.keys(obj).sort();\n\n  return keys.reduce((acc, curr) => {\n    const value = (() => {\n      if (Array.isArray(obj[curr])) {\n        return obj[curr].map((field) =>\n          sortObjectAlphabetically(field as Record<string, any>)\n        );\n      }\n      return obj[curr];\n    })();\n\n    acc[curr] = value;\n    return acc;\n  }, {});\n};\n\nexport const getSchemaHashForMessage = (message: EIP712Message): string => {\n  const { types } = message;\n  const sortedTypes = sortObjectAlphabetically(types);\n\n  return SHA224(JSON.stringify(sortedTypes).replace(\" \", \"\")).toString();\n};\n\n/**\n * @ignore for the README\n *\n * Tries to find the proper filters for a given EIP712 message\n * in the CAL\n *\n * @param {EIP712Message} message\n * @returns {MessageFilters | undefined}\n */\nexport const getFiltersForMessage = async (\n  message: EIP712Message,\n  remoteCryptoAssetsListURI?: string | null\n): Promise<MessageFilters | undefined> => {\n  const schemaHash = getSchemaHashForMessage(message);\n  const messageId = `${message.domain?.chainId ?? 0}:${\n    message.domain?.verifyingContract ?? NULL_ADDRESS\n  }:${schemaHash}`;\n\n  try {\n    if (remoteCryptoAssetsListURI) {\n      const { data: dynamicCAL } = await axios.get<\n        Record<string, MessageFilters>\n      >(`${remoteCryptoAssetsListURI}/eip712.json`);\n      return dynamicCAL[messageId] || EIP712CAL[messageId];\n    }\n    throw new Error();\n  } catch (e) {\n    return EIP712CAL[messageId];\n  }\n};\n","import Transport from \"@ledgerhq/hw-transport\";\nimport {\n  EIP712Message,\n  EIP712MessageTypes,\n  EIP712MessageTypesEntry,\n  FilteringInfoContractName,\n  FilteringInfoShowField,\n  MessageFilters,\n  StructDefData,\n  StructImplemData,\n} from \"./EIP712.types\";\nimport { hexBuffer, intAsHexBytes, splitPath } from \"../../utils\";\nimport { getLoadConfig } from \"../../services/ledger/loadConfig\";\nimport { LoadConfig } from \"../../services/types\";\nimport {\n  destructTypeFromString,\n  EIP712_TYPE_ENCODERS,\n  EIP712_TYPE_PROPERTIES,\n  getFiltersForMessage,\n  makeTypeEntryStructBuffer,\n  sortObjectAlphabetically,\n} from \"./EIP712.utils\";\n\n/**\n * @ignore for the README\n *\n * Factory to create the recursive function that will pass on each\n * field level and APDUs to describe its structure implementation\n *\n * @param {Eth[\"sendStructImplem\"]} sendStructImplem\n * @param {EIP712MessageTypes} types\n * @returns {void}\n */\nconst makeRecursiveFieldStructImplem = (\n  transport: Transport,\n  types: EIP712MessageTypes,\n  filters?: MessageFilters\n): ((\n  destructedType: ReturnType<typeof destructTypeFromString>,\n  data: unknown,\n  path?: string\n) => Promise<void>) => {\n  const typesMap = {} as Record<string, Record<string, string>>;\n  for (const type in types) {\n    typesMap[type] = types[type]?.reduce(\n      (acc, curr) => ({ ...acc, [curr.name]: curr.type }),\n      {}\n    );\n  }\n\n  // This recursion will call itself to handle each level of each field\n  // in order to send APDUs for each of them\n  const recursiveFieldStructImplem = async (\n    destructedType: ReturnType<typeof destructTypeFromString>,\n    data,\n    path = \"\"\n  ) => {\n    const [typeDescription, arrSizes] = destructedType;\n    const [currSize, ...restSizes] = arrSizes;\n    const isCustomType =\n      !EIP712_TYPE_PROPERTIES[typeDescription?.name?.toUpperCase() || \"\"];\n\n    if (Array.isArray(data) && typeof currSize !== \"undefined\") {\n      await sendStructImplem(transport, {\n        structType: \"array\",\n        value: data.length,\n      });\n      for (const entry of data) {\n        await recursiveFieldStructImplem(\n          [typeDescription, restSizes],\n          entry,\n          `${path}.[]`\n        );\n      }\n    } else if (isCustomType) {\n      for (const [fieldName, fieldValue] of Object.entries(\n        data as EIP712Message[\"message\"]\n      )) {\n        const fieldType = typesMap[typeDescription?.name || \"\"]?.[fieldName];\n\n        if (fieldType) {\n          await recursiveFieldStructImplem(\n            destructTypeFromString(fieldType),\n            fieldValue,\n            `${path}.${fieldName}`\n          );\n        }\n      }\n    } else {\n      const filter = filters?.fields.find((f) => path === f.path);\n\n      if (filter) {\n        await sendFilteringInfo(transport, \"showField\", {\n          displayName: filter.label,\n          sig: filter.signature,\n        });\n      }\n\n      await sendStructImplem(transport, {\n        structType: \"field\",\n        value: {\n          data,\n          type: typeDescription?.name || \"\",\n          sizeInBits: typeDescription?.bits,\n        },\n      });\n    }\n  };\n\n  return recursiveFieldStructImplem;\n};\n\n/**\n * @ignore for the README\n *\n * This method is used to send the message definition with all its types.\n * This method should be used before the sendStructImplem one\n *\n * @param {String} structType\n * @param {String|Buffer} value\n * @returns {Promise<void>}\n */\nconst sendStructDef = (\n  transport: Transport,\n  structDef: StructDefData\n): Promise<Buffer> => {\n  enum APDU_FIELDS {\n    CLA = 0xe0,\n    INS = 0x1a,\n    P1_complete = 0x00,\n    P1_partial = 0x01,\n    P2_name = 0x00,\n    P2_field = 0xff,\n  }\n\n  const { structType, value } = structDef;\n  const data =\n    structType === \"name\" && typeof value === \"string\"\n      ? Buffer.from(value, \"utf-8\")\n      : (value as Buffer);\n\n  return transport.send(\n    APDU_FIELDS.CLA,\n    APDU_FIELDS.INS,\n    APDU_FIELDS.P1_complete,\n    structType === \"name\" ? APDU_FIELDS.P2_name : APDU_FIELDS.P2_field,\n    data\n  );\n};\n\n/**\n * @ignore for the README\n *\n * This method provides a trusted new display name to use for the upcoming field.\n * This method should be used after the sendStructDef one.\n *\n * If the method describes an empty name (length of 0), the upcoming field will be taken\n * into account but won’t be shown on the device.\n *\n * The signature is computed on :\n * json key length || json key || display name length || display name\n *\n * signed by the following secp256k1 public key:\n * 0482bbf2f34f367b2e5bc21847b6566f21f0976b22d3388a9a5e446ac62d25cf725b62a2555b2dd464a4da0ab2f4d506820543af1d242470b1b1a969a27578f353\n *\n * @param {String} structType \"root\" | \"array\" | \"field\"\n * @param {string | number | StructFieldData} value\n * @returns {Promise<Buffer | void>}\n */\nconst sendStructImplem = async (\n  transport: Transport,\n  structImplem: StructImplemData\n): Promise<Buffer | void> => {\n  enum APDU_FIELDS {\n    CLA = 0xe0,\n    INS = 0x1c,\n    P1_complete = 0x00,\n    P1_partial = 0x01,\n    P2_root = 0x00,\n    P2_array = 0x0f,\n    P2_field = 0xff,\n  }\n\n  const { structType, value } = structImplem;\n\n  if (structType === \"root\") {\n    return transport.send(\n      APDU_FIELDS.CLA,\n      APDU_FIELDS.INS,\n      APDU_FIELDS.P1_complete,\n      APDU_FIELDS.P2_root,\n      Buffer.from(value, \"utf-8\")\n    );\n  }\n\n  if (structType === \"array\") {\n    return transport.send(\n      APDU_FIELDS.CLA,\n      APDU_FIELDS.INS,\n      APDU_FIELDS.P1_complete,\n      APDU_FIELDS.P2_array,\n      Buffer.from(intAsHexBytes(value, 1), \"hex\")\n    );\n  }\n\n  if (structType === \"field\") {\n    const { data: rawData, type, sizeInBits } = value;\n    const encodedData: Buffer | null = EIP712_TYPE_ENCODERS[\n      type.toUpperCase()\n    ]?.(rawData, sizeInBits);\n\n    if (encodedData) {\n      // const dataLengthPer16Bits = (encodedData.length & 0xff00) >> 8;\n      const dataLengthPer16Bits = Math.floor(encodedData.length / 256);\n      // const dataLengthModulo16Bits = encodedData.length & 0xff;\n      const dataLengthModulo16Bits = encodedData.length % 256;\n\n      const data = Buffer.concat([\n        Buffer.from(intAsHexBytes(dataLengthPer16Bits, 1), \"hex\"),\n        Buffer.from(intAsHexBytes(dataLengthModulo16Bits, 1), \"hex\"),\n        encodedData,\n      ]);\n\n      const bufferSlices = new Array(Math.ceil(data.length / 256))\n        .fill(null)\n        .map((_, i) => data.slice(i * 255, (i + 1) * 255));\n\n      for (const bufferSlice of bufferSlices) {\n        await transport.send(\n          APDU_FIELDS.CLA,\n          APDU_FIELDS.INS,\n          bufferSlice !== bufferSlices[bufferSlices.length - 1]\n            ? APDU_FIELDS.P1_partial\n            : APDU_FIELDS.P1_complete,\n          APDU_FIELDS.P2_field,\n          bufferSlice\n        );\n      }\n    }\n  }\n\n  return Promise.resolve();\n};\n\nasync function sendFilteringInfo(\n  transport: Transport,\n  type: \"activate\"\n): Promise<Buffer>;\nasync function sendFilteringInfo(\n  transport: Transport,\n  type: \"contractName\",\n  data: FilteringInfoContractName\n): Promise<Buffer>;\nasync function sendFilteringInfo(\n  transport: Transport,\n  type: \"showField\",\n  data: FilteringInfoShowField\n): Promise<Buffer>;\nasync function sendFilteringInfo(\n  transport: Transport,\n  type: \"activate\" | \"contractName\" | \"showField\",\n  data?: FilteringInfoContractName | FilteringInfoShowField\n): Promise<Buffer | void> {\n  enum APDU_FIELDS {\n    CLA = 0xe0,\n    INS = 0x1e,\n    P1 = 0x00,\n    P2_activate = 0x00,\n    P2_contract_name = 0x0f, // officially named \"message info\"\n    P2_show_field = 0xff,\n  }\n\n  switch (type) {\n    case \"activate\":\n      return transport.send(\n        APDU_FIELDS.CLA,\n        APDU_FIELDS.INS,\n        APDU_FIELDS.P1,\n        APDU_FIELDS.P2_activate\n      );\n\n    case \"contractName\": {\n      const { displayName, filtersCount, sig } =\n        data as FilteringInfoContractName;\n      const displayNameLengthBuffer = Buffer.from(\n        intAsHexBytes(displayName.length, 1),\n        \"hex\"\n      );\n      const displayNameBuffer = Buffer.from(displayName);\n      const filtersCountBuffer = Buffer.from(\n        intAsHexBytes(filtersCount, 1),\n        \"hex\"\n      );\n      const sigLengthBuffer = Buffer.from(\n        intAsHexBytes(sig.length / 2, 1),\n        \"hex\"\n      );\n      const sigBuffer = Buffer.from(sig, \"hex\");\n\n      const callData = Buffer.concat([\n        displayNameLengthBuffer,\n        displayNameBuffer,\n        filtersCountBuffer,\n        sigLengthBuffer,\n        sigBuffer,\n      ]);\n\n      return transport.send(\n        APDU_FIELDS.CLA,\n        APDU_FIELDS.INS,\n        APDU_FIELDS.P1,\n        APDU_FIELDS.P2_contract_name,\n        callData\n      );\n    }\n\n    case \"showField\": {\n      const { displayName, sig } = data as FilteringInfoShowField;\n      const displayNameLengthBuffer = Buffer.from(\n        intAsHexBytes(displayName.length, 1),\n        \"hex\"\n      );\n      const displayNameBuffer = Buffer.from(displayName);\n      const sigLengthBuffer = Buffer.from(\n        intAsHexBytes(sig.length / 2, 1),\n        \"hex\"\n      );\n      const sigBuffer = Buffer.from(sig, \"hex\");\n\n      const callData = Buffer.concat([\n        displayNameLengthBuffer,\n        displayNameBuffer,\n        sigLengthBuffer,\n        sigBuffer,\n      ]);\n\n      return transport.send(\n        APDU_FIELDS.CLA,\n        APDU_FIELDS.INS,\n        APDU_FIELDS.P1,\n        APDU_FIELDS.P2_show_field,\n        callData\n      );\n    }\n  }\n}\n\n/**\n * @ignore for the README\n *\n * Sign an EIP-721 formatted message following the specification here:\n * https://github.com/LedgerHQ/app-ethereum/blob/develop/doc/ethapp.asc#sign-eth-eip-712\n * @example\n  eth.signEIP721Message(\"44'/60'/0'/0/0\", {\n    domain: {\n      chainId: 69,\n      name: \"Da Domain\",\n      verifyingContract: \"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\",\n      version: \"1\"\n    },\n    types: {\n      \"EIP712Domain\": [\n            { name: \"name\", type: \"string\" },\n            { name: \"version\", type: \"string\" },\n            { name: \"chainId\", type: \"uint256\" },\n            { name: \"verifyingContract\", type: \"address\" }\n        ],\n      \"Test\": [\n        { name: \"contents\", type: \"string\" }\n      ]\n    },\n    primaryType: \"Test\",\n    message: {contents: \"Hello, Bob!\"},\n  })\n *\n * @param {String} path derivationPath\n * @param {Object} jsonMessage message to sign\n * @param {Boolean} fullImplem use the legacy implementation\n * @returns {Promise}\n */\nexport const signEIP712Message = async (\n  transport: Transport,\n  path: string,\n  jsonMessage: EIP712Message,\n  fullImplem = false,\n  loadConfig: LoadConfig\n): Promise<{\n  v: number;\n  s: string;\n  r: string;\n}> => {\n  enum APDU_FIELDS {\n    CLA = 0xe0,\n    INS = 0x0c,\n    P1 = 0x00,\n    P2_v0 = 0x00,\n    P2_full = 0x01,\n  }\n  const { primaryType, types: unsortedTypes, domain, message } = jsonMessage;\n  const { cryptoassetsBaseURL } = getLoadConfig(loadConfig);\n  // Types are sorted by alphabetical order in order to get the same schema hash no matter the JSON format\n  const types = sortObjectAlphabetically(unsortedTypes) as EIP712MessageTypes;\n  const filters = await getFiltersForMessage(jsonMessage, cryptoassetsBaseURL);\n\n  const typeEntries = Object.entries(types) as [\n    keyof EIP712MessageTypes,\n    EIP712MessageTypesEntry[]\n  ][];\n  // Looping on all types entries and fields to send structures' definitions\n  for (const [typeName, entries] of typeEntries) {\n    await sendStructDef(transport, {\n      structType: \"name\",\n      value: typeName as string,\n    });\n\n    for (const { name, type } of entries) {\n      const typeEntryBuffer = makeTypeEntryStructBuffer({ name, type });\n      await sendStructDef(transport, {\n        structType: \"field\",\n        value: typeEntryBuffer,\n      });\n    }\n  }\n\n  if (filters) {\n    await sendFilteringInfo(transport, \"activate\");\n  }\n  // Create the recursion that should pass on each entry\n  // of the domain fields and primaryType fields\n  const recursiveFieldStructImplem = makeRecursiveFieldStructImplem(\n    transport,\n    types,\n    filters\n  );\n\n  // Looping on all domain type's entries and fields to send\n  // structures' implementations\n  const domainName = \"EIP712Domain\";\n  await sendStructImplem(transport, {\n    structType: \"root\",\n    value: domainName,\n  });\n  const domainTypeFields = types[domainName];\n  for (const { name, type } of domainTypeFields) {\n    const domainFieldValue = domain[name];\n    await recursiveFieldStructImplem(\n      destructTypeFromString(type as string),\n      domainFieldValue\n    );\n  }\n\n  if (filters) {\n    const { contractName, fields } = filters;\n    const contractNameInfos = {\n      displayName: contractName.label,\n      filtersCount: fields.length,\n      sig: contractName.signature,\n    };\n    await sendFilteringInfo(transport, \"contractName\", contractNameInfos);\n  }\n\n  // Looping on all primaryType type's entries and fields to send\n  // structures' implementations\n  await sendStructImplem(transport, {\n    structType: \"root\",\n    value: primaryType,\n  });\n  const primaryTypeFields = types[primaryType];\n  for (const { name, type } of primaryTypeFields) {\n    const primaryTypeValue = message[name];\n    await recursiveFieldStructImplem(\n      destructTypeFromString(type as string),\n      primaryTypeValue,\n      name\n    );\n  }\n\n  // Sending the final signature.\n  const paths = splitPath(path);\n  const signatureBuffer = Buffer.alloc(1 + paths.length * 4);\n  signatureBuffer[0] = paths.length;\n  paths.forEach((element, index) => {\n    signatureBuffer.writeUInt32BE(element, 1 + 4 * index);\n  });\n\n  return transport\n    .send(\n      APDU_FIELDS.CLA,\n      APDU_FIELDS.INS,\n      APDU_FIELDS.P1,\n      fullImplem ? APDU_FIELDS.P2_v0 : APDU_FIELDS.P2_full,\n      signatureBuffer\n    )\n    .then((response) => {\n      const v = response[0];\n      const r = response.slice(1, 1 + 32).toString(\"hex\");\n      const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n\n      return {\n        v,\n        r,\n        s,\n      };\n    });\n};\n\n/**\n * @ignore for the README\n * Sign a prepared message following web3.eth.signTypedData specification. The host computes the domain separator and hashStruct(message)\n * @example\n eth.signEIP712HashedMessage(\"44'/60'/0'/0/0\", Buffer.from(\"0101010101010101010101010101010101010101010101010101010101010101\").toString(\"hex\"), Buffer.from(\"0202020202020202020202020202020202020202020202020202020202020202\").toString(\"hex\")).then(result => {\n var v = result['v'] - 27;\n v = v.toString(16);\n if (v.length < 2) {\n   v = \"0\" + v;\n }\n console.log(\"Signature 0x\" + result['r'] + result['s'] + v);\n })\n */\nexport const signEIP712HashedMessage = (\n  transport: Transport,\n  path: string,\n  domainSeparatorHex: string,\n  hashStructMessageHex: string\n): Promise<{\n  v: number;\n  s: string;\n  r: string;\n}> => {\n  const domainSeparator = hexBuffer(domainSeparatorHex);\n  const hashStruct = hexBuffer(hashStructMessageHex);\n  const paths = splitPath(path);\n  const buffer = Buffer.alloc(1 + paths.length * 4 + 32 + 32, 0);\n  let offset = 0;\n  buffer[0] = paths.length;\n  paths.forEach((element, index) => {\n    buffer.writeUInt32BE(element, 1 + 4 * index);\n  });\n  offset = 1 + 4 * paths.length;\n  domainSeparator.copy(buffer, offset);\n  offset += 32;\n  hashStruct.copy(buffer, offset);\n\n  return transport.send(0xe0, 0x0c, 0x00, 0x00, buffer).then((response) => {\n    const v = response[0];\n    const r = response.slice(1, 1 + 32).toString(\"hex\");\n    const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n    return {\n      v,\n      r,\n      s,\n    };\n  });\n};\n\nexport type { EIP712Message } from \"./EIP712.types\";\nexport { isEIP712Message, getFiltersForMessage } from \"./EIP712.utils\";\n","/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2016-2017 Ledger\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n// FIXME drop:\nimport type Transport from \"@ledgerhq/hw-transport\";\nimport { BigNumber } from \"bignumber.js\";\nimport { decodeTxInfo, hexBuffer, maybeHexBuffer, splitPath } from \"./utils\";\n// NB: these are temporary import for the deprecated fallback mechanism\nimport {\n  LedgerEthTransactionResolution,\n  LoadConfig,\n  ResolutionConfig,\n} from \"./services/types\";\nimport ledgerService from \"./services/ledger\";\nimport {\n  EthAppNftNotSupported,\n  EthAppPleaseEnableContractData,\n} from \"./errors\";\nimport {\n  signEIP712HashedMessage,\n  signEIP712Message,\n  EIP712Message,\n  isEIP712Message,\n  getFiltersForMessage,\n} from \"./modules/EIP712\";\n\nexport { ledgerService, isEIP712Message, getFiltersForMessage };\n\nexport type StarkQuantizationType =\n  | \"eth\"\n  | \"erc20\"\n  | \"erc721\"\n  | \"erc20mintable\"\n  | \"erc721mintable\";\nconst starkQuantizationTypeMap = {\n  eth: 1,\n  erc20: 2,\n  erc721: 3,\n  erc20mintable: 4,\n  erc721mintable: 5,\n};\n\nconst remapTransactionRelatedErrors = (e) => {\n  if (e && e.statusCode === 0x6a80) {\n    return new EthAppPleaseEnableContractData(\n      \"Please enable Blind signing or Contract data in the Ethereum app Settings\"\n    );\n  }\n\n  return e;\n};\n\n/**\n * Ethereum API\n *\n * @example\n * import Eth from \"@ledgerhq/hw-app-eth\";\n * const eth = new Eth(transport)\n */\n\nexport default class Eth {\n  transport: Transport;\n  loadConfig: LoadConfig;\n\n  setLoadConfig(loadConfig: LoadConfig): void {\n    this.loadConfig = loadConfig;\n  }\n\n  constructor(\n    transport: Transport,\n    scrambleKey = \"w0w\",\n    loadConfig: LoadConfig = {}\n  ) {\n    this.transport = transport;\n    this.loadConfig = loadConfig;\n    transport.decorateAppAPIMethods(\n      this,\n      [\n        \"getAddress\",\n        \"provideERC20TokenInformation\",\n        \"signTransaction\",\n        \"signPersonalMessage\",\n        \"getAppConfiguration\",\n        \"signEIP712Message\",\n        \"signEIP712HashedMessage\",\n        \"starkGetPublicKey\",\n        \"starkSignOrder\",\n        \"starkSignOrder_v2\",\n        \"starkSignTransfer\",\n        \"starkSignTransfer_v2\",\n        \"starkProvideQuantum\",\n        \"starkProvideQuantum_v2\",\n        \"starkUnsafeSign\",\n        \"eth2GetPublicKey\",\n        \"eth2SetWithdrawalIndex\",\n        \"setExternalPlugin\",\n        \"setPlugin\",\n        \"getEIP1024PublicEncryptionKey\",\n        \"getEIP1024SharedSecret\",\n      ],\n      scrambleKey\n    );\n  }\n\n  /**\n   * get Ethereum address for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @option boolChaincode optionally enable or not the chaincode request\n   * @return an object with a publicKey, address and (optionally) chainCode\n   * @example\n   * eth.getAddress(\"44'/60'/0'/0/0\").then(o => o.address)\n   */\n  getAddress(\n    path: string,\n    boolDisplay?: boolean,\n    boolChaincode?: boolean\n  ): Promise<{\n    publicKey: string;\n    address: string;\n    chainCode?: string;\n  }> {\n    const paths = splitPath(path);\n    const buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport\n      .send(\n        0xe0,\n        0x02,\n        boolDisplay ? 0x01 : 0x00,\n        boolChaincode ? 0x01 : 0x00,\n        buffer\n      )\n      .then((response) => {\n        const publicKeyLength = response[0];\n        const addressLength = response[1 + publicKeyLength];\n\n        return {\n          publicKey: response.slice(1, 1 + publicKeyLength).toString(\"hex\"),\n          address:\n            \"0x\" +\n            response\n              .slice(\n                1 + publicKeyLength + 1,\n                1 + publicKeyLength + 1 + addressLength\n              )\n              .toString(\"ascii\"),\n          chainCode: boolChaincode\n            ? response\n                .slice(\n                  1 + publicKeyLength + 1 + addressLength,\n                  1 + publicKeyLength + 1 + addressLength + 32\n                )\n                .toString(\"hex\")\n            : undefined,\n        };\n      });\n  }\n\n  /**\n   * You can sign a transaction and retrieve v, r, s given the raw transaction and the BIP 32 path of the account to sign.\n   *\n   * @param path: the BIP32 path to sign the transaction on\n   * @param rawTxHex: the raw ethereum transaction in hexadecimal to sign\n   * @param resolution: resolution is an object with all \"resolved\" metadata necessary to allow the device to clear sign information. This includes: ERC20 token information, plugins, contracts, NFT signatures,... You must explicitly provide something to avoid having a warning. By default, you can use Ledger's service or your own resolution service. See services/types.js for the contract. Setting the value to \"null\" will fallback everything to blind signing but will still allow the device to sign the transaction.\n   * @example\n   import { ledgerService } from \"@ledgerhq/hw-app-eth\"\n   const tx = \"e8018504e3b292008252089428ee52a8f3d6e5d15f8b131996950d7f296c7952872bd72a2487400080\"; // raw tx to sign\n   const resolution = await ledgerService.resolveTransaction(tx);\n   const result = eth.signTransaction(\"44'/60'/0'/0/0\", tx, resolution);\n   console.log(result);\n   */\n  async signTransaction(\n    path: string,\n    rawTxHex: string,\n    resolution?: LedgerEthTransactionResolution | null\n  ): Promise<{\n    s: string;\n    v: string;\n    r: string;\n  }> {\n    if (resolution === undefined) {\n      console.warn(\n        \"hw-app-eth: signTransaction(path, rawTxHex, resolution): \" +\n          \"please provide the 'resolution' parameter. \" +\n          \"See https://github.com/LedgerHQ/ledgerjs/blob/master/packages/hw-app-eth/README.md \" +\n          \"– the previous signature is deprecated and providing the 3rd 'resolution' parameter explicitly will become mandatory so you have the control on the resolution and the fallback mecanism (e.g. fallback to blind signing or not).\" +\n          \"// Possible solution:\\n\" +\n          \" + import { ledgerService } from '@ledgerhq/hw-app-eth';\\n\" +\n          \" + const resolution = await ledgerService.resolveTransaction(rawTxHex);\"\n      );\n      resolution = await ledgerService\n        .resolveTransaction(rawTxHex, this.loadConfig, {\n          externalPlugins: true,\n          erc20: true,\n        })\n        .catch((e) => {\n          console.warn(\n            \"an error occurred in resolveTransaction => fallback to blind signing: \" +\n              String(e)\n          );\n          return null;\n        });\n    }\n\n    // provide to the device resolved information to make it clear sign the signature\n    if (resolution) {\n      for (const plugin of resolution.plugin) {\n        await setPlugin(this.transport, plugin);\n      }\n      for (const { payload, signature } of resolution.externalPlugin) {\n        await setExternalPlugin(this.transport, payload, signature);\n      }\n      for (const nft of resolution.nfts) {\n        await provideNFTInformation(this.transport, Buffer.from(nft, \"hex\"));\n      }\n      for (const data of resolution.erc20Tokens) {\n        await provideERC20TokenInformation(\n          this.transport,\n          Buffer.from(data, \"hex\")\n        );\n      }\n    }\n\n    const rawTx = Buffer.from(rawTxHex, \"hex\");\n    const { vrsOffset, txType, chainId, chainIdTruncated } =\n      decodeTxInfo(rawTx);\n\n    const paths = splitPath(path);\n    let response;\n    let offset = 0;\n    while (offset !== rawTx.length) {\n      const first = offset === 0;\n      const maxChunkSize = first ? 150 - 1 - paths.length * 4 : 150;\n      let chunkSize =\n        offset + maxChunkSize > rawTx.length\n          ? rawTx.length - offset\n          : maxChunkSize;\n\n      if (vrsOffset != 0 && offset + chunkSize >= vrsOffset) {\n        // Make sure that the chunk doesn't end right on the EIP 155 marker if set\n        chunkSize = rawTx.length - offset;\n      }\n\n      const buffer = Buffer.alloc(\n        first ? 1 + paths.length * 4 + chunkSize : chunkSize\n      );\n\n      if (first) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        rawTx.copy(buffer, 1 + 4 * paths.length, offset, offset + chunkSize);\n      } else {\n        rawTx.copy(buffer, 0, offset, offset + chunkSize);\n      }\n\n      response = await this.transport\n        .send(0xe0, 0x04, first ? 0x00 : 0x80, 0x00, buffer)\n        .catch((e) => {\n          throw remapTransactionRelatedErrors(e);\n        });\n\n      offset += chunkSize;\n    }\n\n    const response_byte: number = response[0];\n    let v = \"\";\n\n    if (chainId.times(2).plus(35).plus(1).isGreaterThan(255)) {\n      const oneByteChainId = (chainIdTruncated * 2 + 35) % 256;\n\n      const ecc_parity = Math.abs(response_byte - oneByteChainId);\n\n      if (txType != null) {\n        // For EIP2930 and EIP1559 tx, v is simply the parity.\n        v = ecc_parity % 2 == 1 ? \"00\" : \"01\";\n      } else {\n        // Legacy type transaction with a big chain ID\n        v = chainId.times(2).plus(35).plus(ecc_parity).toString(16);\n      }\n    } else {\n      v = response_byte.toString(16);\n    }\n\n    // Make sure v has is prefixed with a 0 if its length is odd (\"1\" -> \"01\").\n    if (v.length % 2 == 1) {\n      v = \"0\" + v;\n    }\n\n    const r = response.slice(1, 1 + 32).toString(\"hex\");\n    const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n    return { v, r, s };\n  }\n\n  /**\n   * Helper to get resolution and signature of a transaction in a single method\n   * \n   * @param path: the BIP32 path to sign the transaction on\n   * @param rawTxHex: the raw ethereum transaction in hexadecimal to sign\n   * @param resolutionConfig: configuration about what should be clear signed in the transaction\n   * @param throwOnError: optional parameter to determine if a failing resolution of the transaction should throw an error or not\n   * @example\n   const tx = \"e8018504e3b292008252089428ee52a8f3d6e5d15f8b131996950d7f296c7952872bd72a2487400080\"; // raw tx to sign\n   const result = eth.clearSignTransaction(\"44'/60'/0'/0/0\", tx, { erc20: true, externalPlugins: true, nft: true});\n   console.log(result);\n   */\n  async clearSignTransaction(\n    path: string,\n    rawTxHex: string,\n    resolutionConfig: ResolutionConfig,\n    throwOnError = false\n  ): Promise<{ r: string; s: string; v: string }> {\n    const resolution = await ledgerService\n      .resolveTransaction(rawTxHex, this.loadConfig, resolutionConfig)\n      .catch((e) => {\n        console.warn(\n          \"an error occurred in resolveTransaction => fallback to blind signing: \" +\n            String(e)\n        );\n\n        if (throwOnError) {\n          throw e;\n        }\n        return null;\n      });\n\n    return this.signTransaction(path, rawTxHex, resolution);\n  }\n\n  /**\n   */\n  getAppConfiguration(): Promise<{\n    arbitraryDataEnabled: number;\n    erc20ProvisioningNecessary: number;\n    starkEnabled: number;\n    starkv2Supported: number;\n    version: string;\n  }> {\n    return this.transport.send(0xe0, 0x06, 0x00, 0x00).then((response) => {\n      return {\n        arbitraryDataEnabled: response[0] & 0x01,\n        erc20ProvisioningNecessary: response[0] & 0x02,\n        starkEnabled: response[0] & 0x04,\n        starkv2Supported: response[0] & 0x08,\n        version: \"\" + response[1] + \".\" + response[2] + \".\" + response[3],\n      };\n    });\n  }\n\n  /**\n  * You can sign a message according to eth_sign RPC call and retrieve v, r, s given the message and the BIP 32 path of the account to sign.\n  * @example\n  eth.signPersonalMessage(\"44'/60'/0'/0/0\", Buffer.from(\"test\").toString(\"hex\")).then(result => {\n  var v = result['v'] - 27;\n  v = v.toString(16);\n  if (v.length < 2) {\n    v = \"0\" + v;\n  }\n  console.log(\"Signature 0x\" + result['r'] + result['s'] + v);\n  })\n   */\n  async signPersonalMessage(\n    path: string,\n    messageHex: string\n  ): Promise<{\n    v: number;\n    s: string;\n    r: string;\n  }> {\n    const paths = splitPath(path);\n    let offset = 0;\n    const message = Buffer.from(messageHex, \"hex\");\n    let response;\n\n    while (offset !== message.length) {\n      const maxChunkSize = offset === 0 ? 150 - 1 - paths.length * 4 - 4 : 150;\n      const chunkSize =\n        offset + maxChunkSize > message.length\n          ? message.length - offset\n          : maxChunkSize;\n      const buffer = Buffer.alloc(\n        offset === 0 ? 1 + paths.length * 4 + 4 + chunkSize : chunkSize\n      );\n\n      if (offset === 0) {\n        buffer[0] = paths.length;\n        paths.forEach((element, index) => {\n          buffer.writeUInt32BE(element, 1 + 4 * index);\n        });\n        buffer.writeUInt32BE(message.length, 1 + 4 * paths.length);\n        message.copy(\n          buffer,\n          1 + 4 * paths.length + 4,\n          offset,\n          offset + chunkSize\n        );\n      } else {\n        message.copy(buffer, 0, offset, offset + chunkSize);\n      }\n\n      response = await this.transport.send(\n        0xe0,\n        0x08,\n        offset === 0 ? 0x00 : 0x80,\n        0x00,\n        buffer\n      );\n\n      offset += chunkSize;\n    }\n\n    const v = response[0];\n    const r = response.slice(1, 1 + 32).toString(\"hex\");\n    const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n    return { v, r, s };\n  }\n\n  /**\n  * Sign a prepared message following web3.eth.signTypedData specification. The host computes the domain separator and hashStruct(message)\n  * @example\n  eth.signEIP712HashedMessage(\"44'/60'/0'/0/0\", Buffer.from(\"0101010101010101010101010101010101010101010101010101010101010101\").toString(\"hex\"), Buffer.from(\"0202020202020202020202020202020202020202020202020202020202020202\").toString(\"hex\")).then(result => {\n  var v = result['v'] - 27;\n  v = v.toString(16);\n  if (v.length < 2) {\n    v = \"0\" + v;\n  }\n  console.log(\"Signature 0x\" + result['r'] + result['s'] + v);\n  })\n   */\n  signEIP712HashedMessage(\n    path: string,\n    domainSeparatorHex: string,\n    hashStructMessageHex: string\n  ): Promise<{\n    v: number;\n    s: string;\n    r: string;\n  }> {\n    return signEIP712HashedMessage(\n      this.transport,\n      path,\n      domainSeparatorHex,\n      hashStructMessageHex\n    );\n  }\n\n  /**\n   * Sign an EIP-721 formatted message following the specification here:\n   * https://github.com/LedgerHQ/app-ethereum/blob/develop/doc/ethapp.asc#sign-eth-eip-712\n   * ⚠️ This method is not compatible with nano S (LNS). Make sure to use a try/catch to fallback on the signEIP712HashedMessage method ⚠️ \n   @example\n   eth.signEIP721Message(\"44'/60'/0'/0/0\", {\n      domain: {\n        chainId: 69,\n        name: \"Da Domain\",\n        verifyingContract: \"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\",\n        version: \"1\"\n      },\n      types: {\n        \"EIP712Domain\": [\n              { name: \"name\", type: \"string\" },\n              { name: \"version\", type: \"string\" },\n              { name: \"chainId\", type: \"uint256\" },\n              { name: \"verifyingContract\", type: \"address\" }\n          ],\n        \"Test\": [\n          { name: \"contents\", type: \"string\" }\n        ]\n      },\n      primaryType: \"Test\",\n      message: {contents: \"Hello, Bob!\"},\n    })\n   *\n   * @param {String} path derivationPath\n   * @param {Object} jsonMessage message to sign\n   * @param {Boolean} fullImplem use the legacy implementation\n   * @returns {Promise}\n   */\n  async signEIP712Message(\n    path: string,\n    jsonMessage: EIP712Message,\n    fullImplem = false\n  ): Promise<{\n    v: number;\n    s: string;\n    r: string;\n  }> {\n    return signEIP712Message(\n      this.transport,\n      path,\n      jsonMessage,\n      fullImplem,\n      this.loadConfig\n    );\n  }\n\n  /**\n   * get Stark public key for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @return the Stark public key\n   */\n  starkGetPublicKey(path: string, boolDisplay?: boolean): Promise<Buffer> {\n    const paths = splitPath(path);\n    const buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport\n      .send(0xf0, 0x02, boolDisplay ? 0x01 : 0x00, 0x00, buffer)\n      .then((response) => {\n        return response.slice(0, response.length - 2);\n      });\n  }\n\n  /**\n   * sign a Stark order\n   * @param path a path in BIP 32 format\n   * @option sourceTokenAddress contract address of the source token (not present for ETH)\n   * @param sourceQuantization quantization used for the source token\n   * @option destinationTokenAddress contract address of the destination token (not present for ETH)\n   * @param destinationQuantization quantization used for the destination token\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountSell amount to sell\n   * @param amountBuy amount to buy\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @return the signature\n   */\n  starkSignOrder(\n    path: string,\n    sourceTokenAddress: string | undefined,\n    sourceQuantization: BigNumber,\n    destinationTokenAddress: string | undefined,\n    destinationQuantization: BigNumber,\n    sourceVault: number,\n    destinationVault: number,\n    amountSell: BigNumber,\n    amountBuy: BigNumber,\n    nonce: number,\n    timestamp: number\n  ): Promise<Buffer | { r: string; s: string }> {\n    const sourceTokenAddressHex = maybeHexBuffer(sourceTokenAddress);\n    const destinationTokenAddressHex = maybeHexBuffer(destinationTokenAddress);\n    const paths = splitPath(path);\n    const buffer = Buffer.alloc(\n      1 + paths.length * 4 + 20 + 32 + 20 + 32 + 4 + 4 + 8 + 8 + 4 + 4,\n      0\n    );\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n\n    if (sourceTokenAddressHex) {\n      sourceTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n    Buffer.from(sourceQuantization.toString(16).padStart(64, \"0\"), \"hex\").copy(\n      buffer,\n      offset\n    );\n    offset += 32;\n\n    if (destinationTokenAddressHex) {\n      destinationTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n    Buffer.from(\n      destinationQuantization.toString(16).padStart(64, \"0\"),\n      \"hex\"\n    ).copy(buffer, offset);\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountSell.toString(16).padStart(16, \"0\"), \"hex\").copy(\n      buffer,\n      offset\n    );\n    offset += 8;\n    Buffer.from(amountBuy.toString(16).padStart(16, \"0\"), \"hex\").copy(\n      buffer,\n      offset\n    );\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n    return this.transport\n      .send(0xf0, 0x04, 0x01, 0x00, buffer)\n      .then((response) => {\n        const r = response.slice(1, 1 + 32).toString(\"hex\");\n        const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n        return {\n          r,\n          s,\n        };\n      });\n  }\n\n  /**\n   * sign a Stark order using the Starkex V2 protocol\n   * @param path a path in BIP 32 format\n   * @option sourceTokenAddress contract address of the source token (not present for ETH)\n   * @param sourceQuantizationType quantization type used for the source token\n   * @option sourceQuantization quantization used for the source token (not present for erc 721 or mintable erc 721)\n   * @option sourceMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the source token\n   * @option destinationTokenAddress contract address of the destination token (not present for ETH)\n   * @param destinationQuantizationType quantization type used for the destination token\n   * @option destinationQuantization quantization used for the destination token (not present for erc 721 or mintable erc 721)\n   * @option destinationMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the destination token\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountSell amount to sell\n   * @param amountBuy amount to buy\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @return the signature\n   */\n  starkSignOrder_v2(\n    path: string,\n    sourceTokenAddress: string | undefined,\n    sourceQuantizationType: StarkQuantizationType,\n    sourceQuantization: BigNumber | undefined,\n    sourceMintableBlobOrTokenId: BigNumber | undefined,\n    destinationTokenAddress: string | undefined,\n    destinationQuantizationType: StarkQuantizationType,\n    destinationQuantization: BigNumber | undefined,\n    destinationMintableBlobOrTokenId: BigNumber | undefined,\n    sourceVault: number,\n    destinationVault: number,\n    amountSell: BigNumber,\n    amountBuy: BigNumber,\n    nonce: number,\n    timestamp: number\n  ): Promise<Buffer | { r: string; s: string }> {\n    const sourceTokenAddressHex = maybeHexBuffer(sourceTokenAddress);\n    const destinationTokenAddressHex = maybeHexBuffer(destinationTokenAddress);\n\n    if (!(sourceQuantizationType in starkQuantizationTypeMap)) {\n      throw new Error(\n        \"eth.starkSignOrderv2 invalid source quantization type=\" +\n          sourceQuantizationType\n      );\n    }\n\n    if (!(destinationQuantizationType in starkQuantizationTypeMap)) {\n      throw new Error(\n        \"eth.starkSignOrderv2 invalid destination quantization type=\" +\n          destinationQuantizationType\n      );\n    }\n\n    const paths = splitPath(path);\n    const buffer = Buffer.alloc(\n      1 +\n        paths.length * 4 +\n        1 +\n        20 +\n        32 +\n        32 +\n        1 +\n        20 +\n        32 +\n        32 +\n        4 +\n        4 +\n        8 +\n        8 +\n        4 +\n        4,\n      0\n    );\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    buffer[offset] = starkQuantizationTypeMap[sourceQuantizationType];\n    offset++;\n\n    if (sourceTokenAddressHex) {\n      sourceTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n\n    if (sourceQuantization) {\n      Buffer.from(\n        sourceQuantization.toString(16).padStart(64, \"0\"),\n        \"hex\"\n      ).copy(buffer, offset);\n    }\n\n    offset += 32;\n\n    if (sourceMintableBlobOrTokenId) {\n      Buffer.from(\n        sourceMintableBlobOrTokenId.toString(16).padStart(64, \"0\"),\n        \"hex\"\n      ).copy(buffer, offset);\n    }\n\n    offset += 32;\n    buffer[offset] = starkQuantizationTypeMap[destinationQuantizationType];\n    offset++;\n\n    if (destinationTokenAddressHex) {\n      destinationTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n\n    if (destinationQuantization) {\n      Buffer.from(\n        destinationQuantization.toString(16).padStart(64, \"0\"),\n        \"hex\"\n      ).copy(buffer, offset);\n    }\n\n    offset += 32;\n\n    if (destinationMintableBlobOrTokenId) {\n      Buffer.from(\n        destinationMintableBlobOrTokenId.toString(16).padStart(64, \"0\"),\n        \"hex\"\n      ).copy(buffer, offset);\n    }\n\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountSell.toString(16).padStart(16, \"0\"), \"hex\").copy(\n      buffer,\n      offset\n    );\n    offset += 8;\n    Buffer.from(amountBuy.toString(16).padStart(16, \"0\"), \"hex\").copy(\n      buffer,\n      offset\n    );\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n    return this.transport\n      .send(0xf0, 0x04, 0x03, 0x00, buffer)\n      .then((response) => {\n        const r = response.slice(1, 1 + 32).toString(\"hex\");\n        const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n        return {\n          r,\n          s,\n        };\n      });\n  }\n\n  /**\n   * sign a Stark transfer\n   * @param path a path in BIP 32 format\n   * @option transferTokenAddress contract address of the token to be transferred (not present for ETH)\n   * @param transferQuantization quantization used for the token to be transferred\n   * @param targetPublicKey target Stark public key\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountTransfer amount to transfer\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @return the signature\n   */\n  starkSignTransfer(\n    path: string,\n    transferTokenAddress: string | undefined,\n    transferQuantization: BigNumber,\n    targetPublicKey: string,\n    sourceVault: number,\n    destinationVault: number,\n    amountTransfer: BigNumber,\n    nonce: number,\n    timestamp: number\n  ): Promise<Buffer | { r: string; s: string }> {\n    const transferTokenAddressHex = maybeHexBuffer(transferTokenAddress);\n    const targetPublicKeyHex = hexBuffer(targetPublicKey);\n    const paths = splitPath(path);\n    const buffer = Buffer.alloc(\n      1 + paths.length * 4 + 20 + 32 + 32 + 4 + 4 + 8 + 4 + 4,\n      0\n    );\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n\n    if (transferTokenAddressHex) {\n      transferTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n    Buffer.from(\n      transferQuantization.toString(16).padStart(64, \"0\"),\n      \"hex\"\n    ).copy(buffer, offset);\n    offset += 32;\n    targetPublicKeyHex.copy(buffer, offset);\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountTransfer.toString(16).padStart(16, \"0\"), \"hex\").copy(\n      buffer,\n      offset\n    );\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n    return this.transport\n      .send(0xf0, 0x04, 0x02, 0x00, buffer)\n      .then((response) => {\n        const r = response.slice(1, 1 + 32).toString(\"hex\");\n        const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n        return {\n          r,\n          s,\n        };\n      });\n  }\n\n  /**\n   * sign a Stark transfer or conditional transfer using the Starkex V2 protocol\n   * @param path a path in BIP 32 format\n   * @option transferTokenAddress contract address of the token to be transferred (not present for ETH)\n   * @param transferQuantizationType quantization type used for the token to be transferred\n   * @option transferQuantization quantization used for the token to be transferred (not present for erc 721 or mintable erc 721)\n   * @option transferMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) associated to the token to be transferred\n   * @param targetPublicKey target Stark public key\n   * @param sourceVault ID of the source vault\n   * @param destinationVault ID of the destination vault\n   * @param amountTransfer amount to transfer\n   * @param nonce transaction nonce\n   * @param timestamp transaction validity timestamp\n   * @option conditionalTransferAddress onchain address of the condition for a conditional transfer\n   * @option conditionalTransferFact fact associated to the condition for a conditional transfer\n   * @return the signature\n   */\n  starkSignTransfer_v2(\n    path: string,\n    transferTokenAddress: string | undefined,\n    transferQuantizationType: StarkQuantizationType,\n    transferQuantization: BigNumber | undefined,\n    transferMintableBlobOrTokenId: BigNumber | undefined,\n    targetPublicKey: string,\n    sourceVault: number,\n    destinationVault: number,\n    amountTransfer: BigNumber,\n    nonce: number,\n    timestamp: number,\n    conditionalTransferAddress?: string,\n    conditionalTransferFact?: BigNumber\n  ): Promise<Buffer | { r: string; s: string }> {\n    const transferTokenAddressHex = maybeHexBuffer(transferTokenAddress);\n    const targetPublicKeyHex = hexBuffer(targetPublicKey);\n    const conditionalTransferAddressHex = maybeHexBuffer(\n      conditionalTransferAddress\n    );\n\n    if (!(transferQuantizationType in starkQuantizationTypeMap)) {\n      throw new Error(\n        \"eth.starkSignTransferv2 invalid quantization type=\" +\n          transferQuantizationType\n      );\n    }\n\n    const paths = splitPath(path);\n    const buffer = Buffer.alloc(\n      1 +\n        paths.length * 4 +\n        1 +\n        20 +\n        32 +\n        32 +\n        32 +\n        4 +\n        4 +\n        8 +\n        4 +\n        4 +\n        (conditionalTransferAddressHex ? 32 + 20 : 0),\n      0\n    );\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    buffer[offset] = starkQuantizationTypeMap[transferQuantizationType];\n    offset++;\n\n    if (transferTokenAddressHex) {\n      transferTokenAddressHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n\n    if (transferQuantization) {\n      Buffer.from(\n        transferQuantization.toString(16).padStart(64, \"0\"),\n        \"hex\"\n      ).copy(buffer, offset);\n    }\n\n    offset += 32;\n\n    if (transferMintableBlobOrTokenId) {\n      Buffer.from(\n        transferMintableBlobOrTokenId.toString(16).padStart(64, \"0\"),\n        \"hex\"\n      ).copy(buffer, offset);\n    }\n\n    offset += 32;\n    targetPublicKeyHex.copy(buffer, offset);\n    offset += 32;\n    buffer.writeUInt32BE(sourceVault, offset);\n    offset += 4;\n    buffer.writeUInt32BE(destinationVault, offset);\n    offset += 4;\n    Buffer.from(amountTransfer.toString(16).padStart(16, \"0\"), \"hex\").copy(\n      buffer,\n      offset\n    );\n    offset += 8;\n    buffer.writeUInt32BE(nonce, offset);\n    offset += 4;\n    buffer.writeUInt32BE(timestamp, offset);\n\n    if (conditionalTransferAddressHex && conditionalTransferFact) {\n      offset += 4;\n      Buffer.from(\n        conditionalTransferFact.toString(16).padStart(64, \"0\"),\n        \"hex\"\n      ).copy(buffer, offset);\n      offset += 32;\n      conditionalTransferAddressHex.copy(buffer, offset);\n    }\n\n    return this.transport\n      .send(\n        0xf0,\n        0x04,\n        conditionalTransferAddressHex ? 0x05 : 0x04,\n        0x00,\n        buffer\n      )\n      .then((response) => {\n        const r = response.slice(1, 1 + 32).toString(\"hex\");\n        const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n        return {\n          r,\n          s,\n        };\n      });\n  }\n\n  /**\n   * provide quantization information before singing a deposit or withdrawal Stark powered contract call\n   *\n   * It shall be run following a provideERC20TokenInformation call for the given contract\n   *\n   * @param operationContract contract address of the token to be transferred (not present for ETH)\n   * @param operationQuantization quantization used for the token to be transferred\n   */\n  starkProvideQuantum(\n    operationContract: string | undefined,\n    operationQuantization: BigNumber\n  ): Promise<boolean> {\n    const operationContractHex = maybeHexBuffer(operationContract);\n    const buffer = Buffer.alloc(20 + 32, 0);\n\n    if (operationContractHex) {\n      operationContractHex.copy(buffer, 0);\n    }\n\n    Buffer.from(\n      operationQuantization.toString(16).padStart(64, \"0\"),\n      \"hex\"\n    ).copy(buffer, 20);\n    return this.transport.send(0xf0, 0x08, 0x00, 0x00, buffer).then(\n      () => true,\n      (e) => {\n        if (e && e.statusCode === 0x6d00) {\n          // this case happen for ETH application versions not supporting Stark extensions\n          return false;\n        }\n\n        throw e;\n      }\n    );\n  }\n\n  /**\n   * provide quantization information before singing a deposit or withdrawal Stark powered contract call using the Starkex V2 protocol\n   *\n   * It shall be run following a provideERC20TokenInformation call for the given contract\n   *\n   * @param operationContract contract address of the token to be transferred (not present for ETH)\n   * @param operationQuantizationType quantization type of the token to be transferred\n   * @option operationQuantization quantization used for the token to be transferred (not present for erc 721 or mintable erc 721)\n   * @option operationMintableBlobOrTokenId mintable blob (mintable erc 20 / mintable erc 721) or token id (erc 721) of the token to be transferred\n   */\n  starkProvideQuantum_v2(\n    operationContract: string | undefined,\n    operationQuantizationType: StarkQuantizationType,\n    operationQuantization?: BigNumber,\n    operationMintableBlobOrTokenId?: BigNumber\n  ): Promise<boolean> {\n    const operationContractHex = maybeHexBuffer(operationContract);\n\n    if (!(operationQuantizationType in starkQuantizationTypeMap)) {\n      throw new Error(\n        \"eth.starkProvideQuantumV2 invalid quantization type=\" +\n          operationQuantizationType\n      );\n    }\n\n    const buffer = Buffer.alloc(20 + 32 + 32, 0);\n    let offset = 0;\n\n    if (operationContractHex) {\n      operationContractHex.copy(buffer, offset);\n    }\n\n    offset += 20;\n\n    if (operationQuantization) {\n      Buffer.from(\n        operationQuantization.toString(16).padStart(64, \"0\"),\n        \"hex\"\n      ).copy(buffer, offset);\n    }\n\n    offset += 32;\n\n    if (operationMintableBlobOrTokenId) {\n      Buffer.from(\n        operationMintableBlobOrTokenId.toString(16).padStart(64, \"0\"),\n        \"hex\"\n      ).copy(buffer, offset);\n    }\n\n    return this.transport\n      .send(\n        0xf0,\n        0x08,\n        starkQuantizationTypeMap[operationQuantizationType],\n        0x00,\n        buffer\n      )\n      .then(\n        () => true,\n        (e) => {\n          if (e && e.statusCode === 0x6d00) {\n            // this case happen for ETH application versions not supporting Stark extensions\n            return false;\n          }\n\n          throw e;\n        }\n      );\n  }\n\n  /**\n   * sign the given hash over the Stark curve\n   * It is intended for speed of execution in case an unknown Stark model is pushed and should be avoided as much as possible.\n   * @param path a path in BIP 32 format\n   * @param hash hexadecimal hash to sign\n   * @return the signature\n   */\n  starkUnsafeSign(\n    path: string,\n    hash: string\n  ): Promise<Buffer | { r: string; s: string }> {\n    const hashHex = hexBuffer(hash);\n    const paths = splitPath(path);\n    const buffer = Buffer.alloc(1 + paths.length * 4 + 32);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    hashHex.copy(buffer, offset);\n    return this.transport\n      .send(0xf0, 0x0a, 0x00, 0x00, buffer)\n      .then((response) => {\n        const r = response.slice(1, 1 + 32).toString(\"hex\");\n        const s = response.slice(1 + 32, 1 + 32 + 32).toString(\"hex\");\n        return {\n          r,\n          s,\n        };\n      });\n  }\n\n  /**\n   * get an Ethereum 2 BLS-12 381 public key for a given BIP 32 path.\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @return an object with a publicKey\n   * @example\n   * eth.eth2GetPublicKey(\"12381/3600/0/0\").then(o => o.publicKey)\n   */\n  eth2GetPublicKey(\n    path: string,\n    boolDisplay?: boolean\n  ): Promise<{\n    publicKey: string;\n  }> {\n    const paths = splitPath(path);\n    const buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport\n      .send(0xe0, 0x0e, boolDisplay ? 0x01 : 0x00, 0x00, buffer)\n      .then((response) => {\n        return {\n          publicKey: response.slice(0, -2).toString(\"hex\"),\n        };\n      });\n  }\n\n  /**\n   * Set the index of a Withdrawal key used as withdrawal credentials in an ETH 2 deposit contract call signature\n   *\n   * It shall be run before the ETH 2 deposit transaction is signed. If not called, the index is set to 0\n   *\n   * @param withdrawalIndex index path in the EIP 2334 path m/12381/3600/withdrawalIndex/0\n   * @return True if the method was executed successfully\n   */\n  eth2SetWithdrawalIndex(withdrawalIndex: number): Promise<boolean> {\n    const buffer = Buffer.alloc(4, 0);\n    buffer.writeUInt32BE(withdrawalIndex, 0);\n    return this.transport.send(0xe0, 0x10, 0x00, 0x00, buffer).then(\n      () => true,\n      (e) => {\n        if (e && e.statusCode === 0x6d00) {\n          // this case happen for ETH application versions not supporting ETH 2\n          return false;\n        }\n\n        throw e;\n      }\n    );\n  }\n\n  /**\n   * get a public encryption key on Curve25519 according to EIP 1024\n   * @param path a path in BIP 32 format\n   * @option boolDisplay optionally enable or not the display\n   * @return an object with a publicKey\n   * @example\n   * eth.getEIP1024PublicEncryptionKey(\"44'/60'/0'/0/0\").then(o => o.publicKey)\n   */\n  getEIP1024PublicEncryptionKey(\n    path: string,\n    boolDisplay?: boolean\n  ): Promise<{\n    publicKey: string;\n  }> {\n    const paths = splitPath(path);\n    const buffer = Buffer.alloc(1 + paths.length * 4);\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    return this.transport\n      .send(0xe0, 0x18, boolDisplay ? 0x01 : 0x00, 0x00, buffer)\n      .then((response) => {\n        return {\n          publicKey: response.slice(0, -2).toString(\"hex\"),\n        };\n      });\n  }\n\n  /**\n   * get a shared secret on Curve25519 according to EIP 1024\n   * @param path a path in BIP 32 format\n   * @param remotePublicKeyHex remote Curve25519 public key\n   * @option boolDisplay optionally enable or not the display\n   * @return an object with a shared secret\n   * @example\n   * eth.getEIP1024SharedSecret(\"44'/60'/0'/0/0\", \"87020e80af6e07a6e4697f091eacadb9e7e6629cb7e5a8a371689a3ed53b3d64\").then(o => o.sharedSecret)\n   */\n  getEIP1024SharedSecret(\n    path: string,\n    remotePublicKeyHex: string,\n    boolDisplay?: boolean\n  ): Promise<{\n    sharedSecret: string;\n  }> {\n    const paths = splitPath(path);\n    const remotePublicKey = hexBuffer(remotePublicKeyHex);\n    const buffer = Buffer.alloc(1 + paths.length * 4 + 32);\n    let offset = 0;\n    buffer[0] = paths.length;\n    paths.forEach((element, index) => {\n      buffer.writeUInt32BE(element, 1 + 4 * index);\n    });\n    offset = 1 + 4 * paths.length;\n    remotePublicKey.copy(buffer, offset);\n    return this.transport\n      .send(0xe0, 0x18, boolDisplay ? 0x01 : 0x00, 0x01, buffer)\n      .then((response) => {\n        return {\n          sharedSecret: response.slice(0, -2).toString(\"hex\"),\n        };\n      });\n  }\n\n  provideERC20TokenInformation({ data }: { data: Buffer }): Promise<boolean> {\n    return provideERC20TokenInformation(this.transport, data);\n  }\n\n  setExternalPlugin(\n    pluginName: string,\n    contractAddress: string,\n    selector: string\n  ): Promise<boolean> {\n    console.warn(\n      \"hw-app-eth: eth.setExternalPlugin is deprecated. signTransaction solves this for you when providing it in `resolution`.\"\n    );\n    return setExternalPlugin(this.transport, pluginName, selector);\n  }\n\n  setPlugin(data: string): Promise<boolean> {\n    console.warn(\n      \"hw-app-eth: eth.setPlugin is deprecated. signTransaction solves this for you when providing it in `resolution`.\"\n    );\n    return setPlugin(this.transport, data);\n  }\n}\n\n// internal helpers\n\nfunction provideERC20TokenInformation(\n  transport: Transport,\n  data: Buffer\n): Promise<boolean> {\n  return transport.send(0xe0, 0x0a, 0x00, 0x00, data).then(\n    () => true,\n    (e) => {\n      if (e && e.statusCode === 0x6d00) {\n        // this case happen for older version of ETH app, since older app version had the ERC20 data hardcoded, it's fine to assume it worked.\n        // we return a flag to know if the call was effective or not\n        return false;\n      }\n      throw e;\n    }\n  );\n}\n\nfunction provideNFTInformation(\n  transport: Transport,\n  data: Buffer\n): Promise<boolean> {\n  return transport.send(0xe0, 0x14, 0x00, 0x00, data).then(\n    () => true,\n    (e) => {\n      if (e && e.statusCode === 0x6d00) {\n        // older version of ETH app => error because we don't allow blind sign when NFT is explicitly requested to be resolved.\n        throw new EthAppNftNotSupported();\n      }\n      throw e;\n    }\n  );\n}\n\nfunction setExternalPlugin(\n  transport: Transport,\n  payload: string,\n  signature: string\n): Promise<boolean> {\n  const payloadBuffer = Buffer.from(payload, \"hex\");\n  const signatureBuffer = Buffer.from(signature, \"hex\");\n  const buffer = Buffer.concat([payloadBuffer, signatureBuffer]);\n  return transport.send(0xe0, 0x12, 0x00, 0x00, buffer).then(\n    () => true,\n    (e) => {\n      if (e && e.statusCode === 0x6a80) {\n        // this case happen when the plugin name is too short or too long\n        return false;\n      } else if (e && e.statusCode === 0x6984) {\n        // this case happen when the plugin requested is not installed on the device\n        return false;\n      } else if (e && e.statusCode === 0x6d00) {\n        // this case happen for older version of ETH app\n        return false;\n      }\n      throw e;\n    }\n  );\n}\n\nfunction setPlugin(transport: Transport, data: string): Promise<boolean> {\n  const buffer = Buffer.from(data, \"hex\");\n  return transport.send(0xe0, 0x16, 0x00, 0x00, buffer).then(\n    () => true,\n    (e) => {\n      if (e && e.statusCode === 0x6a80) {\n        // this case happen when the plugin name is too short or too long\n        return false;\n      } else if (e && e.statusCode === 0x6984) {\n        // this case happen when the plugin requested is not installed on the device\n        return false;\n      } else if (e && e.statusCode === 0x6d00) {\n        // this case happen for older version of ETH app\n        return false;\n      }\n      throw e;\n    }\n  );\n}\n"],"names":["splitPath","path","result","split","forEach","element","number","parseInt","isNaN","length","push","hexBuffer","str","Buffer","from","startsWith","slice","maybeHexBuffer","ERC20_CLEAR_SIGNED_SELECTORS","ERC721_CLEAR_SIGNED_SELECTORS","ERC1155_CLEAR_SIGNED_SELECTORS","decodeTxInfo","rawTx","decodedTx","txType","includes","rlpData","rlpTx","decode","map","hex","chainIdTruncated","rlpDecoded","chainIdSrc","data","to","chainId","BigNumber","toString","chainIdTruncatedBuf","alloc","copy","readUInt32BE","vrsOffset","rlpVrs","encode","intAsHexBytes","int","bytes","padStart","tokenSelectors","Object","values","nftSelectors","__spreadArray","__read","mergeResolutions","oldResolution","newResolution","resolutions","nfts","erc20Tokens","externalPlugin","plugin","key","_a","apply","_b","defaultLoadConfig","nftExplorerBaseURL","pluginBaseURL","extraPlugins","cryptoassetsBaseURL","getLoadConfig","userLoadConfig","__assign","loadInfosForContractMethod","contractAddress","selector","__awaiter","url_1","concat","axios","then","r","e","log","String","sent","lcSelector","toLowerCase","lcContractAddress","contractSelectors","payload","signature","erc20OfInterest","abi","signatures","asContractAddress","addr","a","parse","erc20SignaturesBlob","buf","entries","i","length_1","item","j","tickerLength","readUInt8","ticker","decimals","entry","list","byContractAndChainId","get","cache","signatureBlob","signaturesByChainId","api","getNFTInfo","url","response","collectionNameLength","collectionNameHex","substr","collectionName","match","reduce","acc","curr","fromCharCode","loadNftPlugin","getAdditionalDataForContract","loadConfig","shouldResolve","resolution","nft","nftInfo","token","Error","erc20Info","contract","byContractAddressAndChainId","loadNanoAppPlugins","nftPluginPayload","externalPlugins","contractMethodInfos","Interface","args","parseTransaction","erc20OfInterest_1","__values","erc20OfInterest_1_1","next","value","erc20ContractAddress","seg","Array","isArray","externalPluginResolution","resolveTransaction","rawTxHex","resolutionConfig","substring","pluginsResolution","contractResolution","erc20","EthAppPleaseEnableContractData","createCustomErrorClass","EthAppNftNotSupported","EIP712_ARRAY_TYPE_VALUE","EIP712_TYPE_PROPERTIES","CUSTOM","sizeInBits","INT","size","Number","UINT","ADDRESS","BOOL","STRING","BYTES","EIP712_TYPE_ENCODERS","failSafeValue","valueAsBN","lt","sizeInBytes","plus","paddedHexString","this","destructTypeFromString","typeName","splitNameAndArraysRegex","RegExp","splitArraysRegex","splitNameAndNumberRegex","exec","type","maybeArrays","name","bits","typeDescription","undefined","arraySizes","matchAll","makeTypeEntryStructBuffer","_f","arrSizes","isTypeAnArray","Boolean","typeProperties","toUpperCase","typeKey","typeSizeInBits","typeDescData","typeSize","typeValue","isArrayBit","hasTypeSize","typeValueBits","constructTypeDescByteString","bufferArray","_d","_c","_e","FIXED","DYNAMIC","isEIP712Message","message","sortObjectAlphabetically","obj","keys","sort","field","getFiltersForMessage","remoteCryptoAssetsListURI","schemaHash","types","sortedTypes","SHA224","JSON","stringify","replace","getSchemaHashForMessage","messageId","domain","verifyingContract","EIP712CAL","sendStructDef","transport","structDef","APDU_FIELDS","structType","send","CLA","INS","P1_complete","P2_name","P2_field","sendStructImplem","structImplem","P2_root","P2_array","rawData","encodedData","call","dataLengthPer16Bits","Math","floor","dataLengthModulo16Bits","data_2","bufferSlices","ceil","fill","_","bufferSlices_1","bufferSlices_1_1","bufferSlice","P1_partial","Promise","resolve","sendFilteringInfo","P1","P2_activate","displayName","filtersCount","sig","displayNameLengthBuffer","displayNameBuffer","filtersCountBuffer","sigLengthBuffer","sigBuffer","callData","P2_contract_name","P2_show_field","signEIP712Message","jsonMessage","fullImplem","primaryType","unsortedTypes","filters","_j","typeEntries","typeEntries_1","typeEntries_1_1","e_4","entries_1","entries_1_1","name_1","typeEntryBuffer","recursiveFieldStructImplem","typesMap","destructedType","currSize","restSizes","isCustomType","_h","_k","data_1","data_1_1","fieldName","fieldValue","fieldType","filter","fields","find","f","label","makeRecursiveFieldStructImplem","domainName","domainTypeFields","domainTypeFields_1","domainTypeFields_1_1","name_2","domainFieldValue","contractName","contractNameInfos","primaryTypeFields","primaryTypeFields_1","primaryTypeFields_1_1","name_3","primaryTypeValue","paths","signatureBuffer","index","writeUInt32BE","P2_v0","P2_full","v","s","starkQuantizationTypeMap","eth","erc721","erc20mintable","erc721mintable","Eth","scrambleKey","decorateAppAPIMethods","prototype","setLoadConfig","getAddress","boolDisplay","boolChaincode","buffer","publicKeyLength","addressLength","publicKey","address","chainCode","signTransaction","console","warn","ledgerService","_q","setPlugin","setExternalPlugin","_g","provideNFTInformation","provideERC20TokenInformation","offset","maxChunkSize","first","chunkSize","this_1","statusCode","remapTransactionRelatedErrors","_r","response_byte","times","isGreaterThan","oneByteChainId","ecc_parity","abs","clearSignTransaction","throwOnError","getAppConfiguration","arbitraryDataEnabled","erc20ProvisioningNecessary","starkEnabled","starkv2Supported","version","signPersonalMessage","messageHex","this_2","signEIP712HashedMessage","domainSeparatorHex","hashStructMessageHex","domainSeparator","hashStruct","starkGetPublicKey","starkSignOrder","sourceTokenAddress","sourceQuantization","destinationTokenAddress","destinationQuantization","sourceVault","destinationVault","amountSell","amountBuy","nonce","timestamp","sourceTokenAddressHex","destinationTokenAddressHex","starkSignOrder_v2","sourceQuantizationType","sourceMintableBlobOrTokenId","destinationQuantizationType","destinationMintableBlobOrTokenId","starkSignTransfer","transferTokenAddress","transferQuantization","targetPublicKey","amountTransfer","transferTokenAddressHex","targetPublicKeyHex","starkSignTransfer_v2","transferQuantizationType","transferMintableBlobOrTokenId","conditionalTransferAddress","conditionalTransferFact","conditionalTransferAddressHex","starkProvideQuantum","operationContract","operationQuantization","operationContractHex","starkProvideQuantum_v2","operationQuantizationType","operationMintableBlobOrTokenId","starkUnsafeSign","hash","hashHex","eth2GetPublicKey","eth2SetWithdrawalIndex","withdrawalIndex","getEIP1024PublicEncryptionKey","getEIP1024SharedSecret","remotePublicKeyHex","remotePublicKey","sharedSecret","pluginName","payloadBuffer"],"sourceRoot":""}